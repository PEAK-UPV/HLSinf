// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k_conv2D_dataflow_in_loop_o_iter_loop_entry25 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        o_iter_dout,
        o_iter_empty_n,
        o_iter_read,
        global_offset_dout,
        global_offset_empty_n,
        global_offset_read,
        ptr_bias_dout,
        ptr_bias_empty_n,
        ptr_bias_read,
        ptr_kernel_dout,
        ptr_kernel_empty_n,
        ptr_kernel_read,
        ptr_data_dout,
        ptr_data_empty_n,
        ptr_data_read,
        enable_relu_dout,
        enable_relu_empty_n,
        enable_relu_read,
        ptr_out_dout,
        ptr_out_empty_n,
        ptr_out_read,
        o_iter_out_din,
        o_iter_out_full_n,
        o_iter_out_write,
        o_iter_out1_din,
        o_iter_out1_full_n,
        o_iter_out1_write,
        o_iter_out2_din,
        o_iter_out2_full_n,
        o_iter_out2_write,
        o_iter_out3_din,
        o_iter_out3_full_n,
        o_iter_out3_write,
        global_offset_out_din,
        global_offset_out_full_n,
        global_offset_out_write,
        global_offset_out4_din,
        global_offset_out4_full_n,
        global_offset_out4_write,
        ptr_bias_out_din,
        ptr_bias_out_full_n,
        ptr_bias_out_write,
        ptr_kernel_out_din,
        ptr_kernel_out_full_n,
        ptr_kernel_out_write,
        ptr_data_out_din,
        ptr_data_out_full_n,
        ptr_data_out_write,
        enable_relu_out_din,
        enable_relu_out_full_n,
        enable_relu_out_write,
        ptr_out_out_din,
        ptr_out_out_full_n,
        ptr_out_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [30:0] o_iter_dout;
input   o_iter_empty_n;
output   o_iter_read;
input  [31:0] global_offset_dout;
input   global_offset_empty_n;
output   global_offset_read;
input  [63:0] ptr_bias_dout;
input   ptr_bias_empty_n;
output   ptr_bias_read;
input  [63:0] ptr_kernel_dout;
input   ptr_kernel_empty_n;
output   ptr_kernel_read;
input  [63:0] ptr_data_dout;
input   ptr_data_empty_n;
output   ptr_data_read;
input  [31:0] enable_relu_dout;
input   enable_relu_empty_n;
output   enable_relu_read;
input  [63:0] ptr_out_dout;
input   ptr_out_empty_n;
output   ptr_out_read;
output  [30:0] o_iter_out_din;
input   o_iter_out_full_n;
output   o_iter_out_write;
output  [30:0] o_iter_out1_din;
input   o_iter_out1_full_n;
output   o_iter_out1_write;
output  [30:0] o_iter_out2_din;
input   o_iter_out2_full_n;
output   o_iter_out2_write;
output  [30:0] o_iter_out3_din;
input   o_iter_out3_full_n;
output   o_iter_out3_write;
output  [31:0] global_offset_out_din;
input   global_offset_out_full_n;
output   global_offset_out_write;
output  [31:0] global_offset_out4_din;
input   global_offset_out4_full_n;
output   global_offset_out4_write;
output  [63:0] ptr_bias_out_din;
input   ptr_bias_out_full_n;
output   ptr_bias_out_write;
output  [63:0] ptr_kernel_out_din;
input   ptr_kernel_out_full_n;
output   ptr_kernel_out_write;
output  [63:0] ptr_data_out_din;
input   ptr_data_out_full_n;
output   ptr_data_out_write;
output  [31:0] enable_relu_out_din;
input   enable_relu_out_full_n;
output   enable_relu_out_write;
output  [63:0] ptr_out_out_din;
input   ptr_out_out_full_n;
output   ptr_out_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg o_iter_read;
reg global_offset_read;
reg ptr_bias_read;
reg ptr_kernel_read;
reg ptr_data_read;
reg enable_relu_read;
reg ptr_out_read;
reg o_iter_out_write;
reg o_iter_out1_write;
reg o_iter_out2_write;
reg o_iter_out3_write;
reg global_offset_out_write;
reg global_offset_out4_write;
reg ptr_bias_out_write;
reg ptr_kernel_out_write;
reg ptr_data_out_write;
reg enable_relu_out_write;
reg ptr_out_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    o_iter_blk_n;
reg    global_offset_blk_n;
reg    ptr_bias_blk_n;
reg    ptr_kernel_blk_n;
reg    ptr_data_blk_n;
reg    enable_relu_blk_n;
reg    ptr_out_blk_n;
reg    o_iter_out_blk_n;
reg    o_iter_out1_blk_n;
reg    o_iter_out2_blk_n;
reg    o_iter_out3_blk_n;
reg    global_offset_out_blk_n;
reg    global_offset_out4_blk_n;
reg    ptr_bias_out_blk_n;
reg    ptr_kernel_out_blk_n;
reg    ptr_data_out_blk_n;
reg    enable_relu_out_blk_n;
reg    ptr_out_out_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        enable_relu_blk_n = enable_relu_empty_n;
    end else begin
        enable_relu_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        enable_relu_out_blk_n = enable_relu_out_full_n;
    end else begin
        enable_relu_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        enable_relu_out_write = 1'b1;
    end else begin
        enable_relu_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        enable_relu_read = 1'b1;
    end else begin
        enable_relu_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        global_offset_blk_n = global_offset_empty_n;
    end else begin
        global_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        global_offset_out4_blk_n = global_offset_out4_full_n;
    end else begin
        global_offset_out4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        global_offset_out4_write = 1'b1;
    end else begin
        global_offset_out4_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        global_offset_out_blk_n = global_offset_out_full_n;
    end else begin
        global_offset_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        global_offset_out_write = 1'b1;
    end else begin
        global_offset_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        global_offset_read = 1'b1;
    end else begin
        global_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_blk_n = o_iter_empty_n;
    end else begin
        o_iter_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_out1_blk_n = o_iter_out1_full_n;
    end else begin
        o_iter_out1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_out1_write = 1'b1;
    end else begin
        o_iter_out1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_out2_blk_n = o_iter_out2_full_n;
    end else begin
        o_iter_out2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_out2_write = 1'b1;
    end else begin
        o_iter_out2_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_out3_blk_n = o_iter_out3_full_n;
    end else begin
        o_iter_out3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_out3_write = 1'b1;
    end else begin
        o_iter_out3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_out_blk_n = o_iter_out_full_n;
    end else begin
        o_iter_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_out_write = 1'b1;
    end else begin
        o_iter_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        o_iter_read = 1'b1;
    end else begin
        o_iter_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_bias_blk_n = ptr_bias_empty_n;
    end else begin
        ptr_bias_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_bias_out_blk_n = ptr_bias_out_full_n;
    end else begin
        ptr_bias_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_bias_out_write = 1'b1;
    end else begin
        ptr_bias_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_bias_read = 1'b1;
    end else begin
        ptr_bias_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_data_blk_n = ptr_data_empty_n;
    end else begin
        ptr_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_data_out_blk_n = ptr_data_out_full_n;
    end else begin
        ptr_data_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_data_out_write = 1'b1;
    end else begin
        ptr_data_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_data_read = 1'b1;
    end else begin
        ptr_data_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_kernel_blk_n = ptr_kernel_empty_n;
    end else begin
        ptr_kernel_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_kernel_out_blk_n = ptr_kernel_out_full_n;
    end else begin
        ptr_kernel_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_kernel_out_write = 1'b1;
    end else begin
        ptr_kernel_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_kernel_read = 1'b1;
    end else begin
        ptr_kernel_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_out_blk_n = ptr_out_empty_n;
    end else begin
        ptr_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_out_out_blk_n = ptr_out_out_full_n;
    end else begin
        ptr_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_out_out_write = 1'b1;
    end else begin
        ptr_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ptr_out_read = 1'b1;
    end else begin
        ptr_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ptr_data_out_full_n == 1'b0) | (ptr_kernel_out_full_n == 1'b0) | (ptr_bias_out_full_n == 1'b0) | (global_offset_out4_full_n == 1'b0) | (global_offset_out_full_n == 1'b0) | (real_start == 1'b0) | (o_iter_out3_full_n == 1'b0) | (o_iter_out2_full_n == 1'b0) | (o_iter_out1_full_n == 1'b0) | (o_iter_out_full_n == 1'b0) | (ptr_out_empty_n == 1'b0) | (enable_relu_empty_n == 1'b0) | (ptr_data_empty_n == 1'b0) | (ptr_kernel_empty_n == 1'b0) | (ptr_bias_empty_n == 1'b0) | (global_offset_empty_n == 1'b0) | (o_iter_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ptr_out_out_full_n == 1'b0) | (enable_relu_out_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign enable_relu_out_din = enable_relu_dout;

assign global_offset_out4_din = global_offset_dout;

assign global_offset_out_din = global_offset_dout;

assign o_iter_out1_din = o_iter_dout;

assign o_iter_out2_din = o_iter_dout;

assign o_iter_out3_din = o_iter_dout;

assign o_iter_out_din = o_iter_dout;

assign ptr_bias_out_din = ptr_bias_dout;

assign ptr_data_out_din = ptr_data_dout;

assign ptr_kernel_out_din = ptr_kernel_dout;

assign ptr_out_out_din = ptr_out_dout;

assign start_out = real_start;

endmodule //k_conv2D_dataflow_in_loop_o_iter_loop_entry25
