// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k_conv2D_padding (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        rows,
        W,
        I_ITER,
        enable_upper_padding_dout,
        enable_upper_padding_empty_n,
        enable_upper_padding_read,
        enable_lower_padding_dout,
        enable_lower_padding_empty_n,
        enable_lower_padding_read,
        out_read_data_1_dout,
        out_read_data_1_empty_n,
        out_read_data_1_read,
        str_pad_cvt_din,
        str_pad_cvt_full_n,
        str_pad_cvt_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_pp0_stage0 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] rows;
input  [31:0] W;
input  [31:0] I_ITER;
input  [31:0] enable_upper_padding_dout;
input   enable_upper_padding_empty_n;
output   enable_upper_padding_read;
input  [31:0] enable_lower_padding_dout;
input   enable_lower_padding_empty_n;
output   enable_lower_padding_read;
input  [127:0] out_read_data_1_dout;
input   out_read_data_1_empty_n;
output   out_read_data_1_read;
output  [127:0] str_pad_cvt_din;
input   str_pad_cvt_full_n;
output   str_pad_cvt_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg enable_upper_padding_read;
reg enable_lower_padding_read;
reg out_read_data_1_read;
reg str_pad_cvt_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    enable_upper_padding_blk_n;
wire    ap_CS_fsm_state5;
reg    enable_lower_padding_blk_n;
reg    out_read_data_1_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln38_reg_475;
reg   [0:0] icmp_ln45_reg_479;
reg    str_pad_cvt_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln38_reg_475_pp0_iter1_reg;
reg   [30:0] i_i_i_reg_125;
reg   [31:0] w_reg_136;
reg   [31:0] h_reg_147;
wire  signed [31:0] add_ln34_fu_202_p2;
wire    ap_CS_fsm_state2;
wire  signed [31:0] add_ln34_1_fu_213_p2;
wire  signed [31:0] grp_fu_208_p2;
wire   [0:0] trunc_ln314_fu_223_p1;
reg   [0:0] trunc_ln314_reg_445;
wire   [0:0] trunc_ln314_1_fu_227_p1;
reg   [0:0] trunc_ln314_1_reg_450;
wire   [31:0] add5_i_i_i_i_fu_231_p2;
wire   [31:0] add11_i_i_i_i_fu_236_p2;
wire   [31:0] grp_fu_219_p2;
wire   [30:0] add_ln38_fu_241_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage0_iter0;
reg    ap_predicate_op72_read_state7;
reg    ap_block_state7_pp0_stage0_iter1;
reg    ap_block_state8_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln38_fu_251_p2;
wire   [0:0] icmp_ln45_fu_314_p2;
wire   [31:0] h_3_fu_350_p3;
wire   [31:0] w_2_fu_358_p3;
wire   [31:0] trunc_ln45_fu_366_p1;
reg    ap_block_state5;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_reg_158;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_reg_158;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_reg_158;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_94_reg_169;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_94_reg_169;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_94_reg_169;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_95_reg_180;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_95_reg_180;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_95_reg_180;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_96_reg_191;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_96_reg_191;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_96_reg_191;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire    ap_CS_fsm_state4;
wire   [31:0] zext_ln13_fu_247_p1;
wire   [0:0] icmp_ln41_fu_256_p2;
wire   [0:0] icmp_ln42_fu_267_p2;
wire   [0:0] icmp_ln43_fu_277_p2;
wire   [0:0] icmp_ln44_fu_283_p2;
wire   [0:0] enable1_fu_262_p2;
wire   [0:0] enable2_fu_272_p2;
wire   [0:0] or_ln45_1_fu_294_p2;
wire   [0:0] or_ln45_fu_288_p2;
wire   [0:0] or_ln45_2_fu_300_p2;
wire   [31:0] or_ln45_2_i_i_fu_306_p3;
wire   [31:0] w_1_fu_320_p2;
wire   [31:0] h_1_fu_331_p2;
wire   [0:0] icmp_ln51_fu_337_p2;
wire   [0:0] icmp_ln48_fu_326_p2;
wire   [31:0] h_2_fu_342_p3;
reg    grp_fu_219_ce;
wire    ap_CS_fsm_state9;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_163;
reg    ap_condition_215;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

k_conv2D_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln34_fu_202_p2),
    .din1(I_ITER),
    .ce(1'b1),
    .dout(grp_fu_208_p2)
);

k_conv2D_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U84(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_208_p2),
    .din1(add_ln34_1_fu_213_p2),
    .ce(grp_fu_219_ce),
    .dout(grp_fu_219_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_163)) begin
        if (((icmp_ln45_fu_314_p2 == 1'd0) & (icmp_ln38_fu_251_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_empty_94_reg_169 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_94_reg_169 <= ap_phi_reg_pp0_iter0_empty_94_reg_169;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_163)) begin
        if (((icmp_ln45_fu_314_p2 == 1'd0) & (icmp_ln38_fu_251_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_empty_95_reg_180 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_95_reg_180 <= ap_phi_reg_pp0_iter0_empty_95_reg_180;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_163)) begin
        if (((icmp_ln45_fu_314_p2 == 1'd0) & (icmp_ln38_fu_251_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_empty_96_reg_191 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_96_reg_191 <= ap_phi_reg_pp0_iter0_empty_96_reg_191;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_163)) begin
        if (((icmp_ln45_fu_314_p2 == 1'd0) & (icmp_ln38_fu_251_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter1_empty_reg_158 <= 32'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_empty_reg_158 <= ap_phi_reg_pp0_iter0_empty_reg_158;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_215)) begin
        if (((icmp_ln45_reg_479 == 1'd1) & (icmp_ln38_reg_475 == 1'd1))) begin
            ap_phi_reg_pp0_iter2_empty_94_reg_169 <= {{out_read_data_1_dout[95:64]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_empty_94_reg_169 <= ap_phi_reg_pp0_iter1_empty_94_reg_169;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_215)) begin
        if (((icmp_ln45_reg_479 == 1'd1) & (icmp_ln38_reg_475 == 1'd1))) begin
            ap_phi_reg_pp0_iter2_empty_95_reg_180 <= {{out_read_data_1_dout[63:32]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_empty_95_reg_180 <= ap_phi_reg_pp0_iter1_empty_95_reg_180;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_215)) begin
        if (((icmp_ln45_reg_479 == 1'd1) & (icmp_ln38_reg_475 == 1'd1))) begin
            ap_phi_reg_pp0_iter2_empty_96_reg_191 <= trunc_ln45_fu_366_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_empty_96_reg_191 <= ap_phi_reg_pp0_iter1_empty_96_reg_191;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_215)) begin
        if (((icmp_ln45_reg_479 == 1'd1) & (icmp_ln38_reg_475 == 1'd1))) begin
            ap_phi_reg_pp0_iter2_empty_reg_158 <= {{out_read_data_1_dout[127:96]}};
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_empty_reg_158 <= ap_phi_reg_pp0_iter1_empty_reg_158;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_fu_251_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        h_reg_147 <= h_3_fu_350_p3;
    end else if ((~((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        h_reg_147 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_fu_251_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_i_i_reg_125 <= add_ln38_fu_241_p2;
    end else if ((~((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        i_i_i_reg_125 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_fu_251_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_reg_136 <= w_2_fu_358_p3;
    end else if ((~((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        w_reg_136 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln38_reg_475 <= icmp_ln38_fu_251_p2;
        icmp_ln38_reg_475_pp0_iter1_reg <= icmp_ln38_reg_475;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln38_fu_251_p2 == 1'd1))) begin
        icmp_ln45_reg_479 <= icmp_ln45_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        trunc_ln314_1_reg_450 <= trunc_ln314_1_fu_227_p1;
        trunc_ln314_reg_445 <= trunc_ln314_fu_223_p1;
    end
end

always @ (*) begin
    if ((icmp_ln38_fu_251_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        enable_lower_padding_blk_n = enable_lower_padding_empty_n;
    end else begin
        enable_lower_padding_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        enable_lower_padding_read = 1'b1;
    end else begin
        enable_lower_padding_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        enable_upper_padding_blk_n = enable_upper_padding_empty_n;
    end else begin
        enable_upper_padding_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        enable_upper_padding_read = 1'b1;
    end else begin
        enable_upper_padding_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (~((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        grp_fu_219_ce = 1'b1;
    end else begin
        grp_fu_219_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln45_reg_479 == 1'd1) & (icmp_ln38_reg_475 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_read_data_1_blk_n = out_read_data_1_empty_n;
    end else begin
        out_read_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_predicate_op72_read_state7 == 1'b1))) begin
        out_read_data_1_read = 1'b1;
    end else begin
        out_read_data_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_475_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        str_pad_cvt_blk_n = str_pad_cvt_full_n;
    end else begin
        str_pad_cvt_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln38_reg_475_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        str_pad_cvt_write = 1'b1;
    end else begin
        str_pad_cvt_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if ((~((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln38_fu_251_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln38_fu_251_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add11_i_i_i_i_fu_236_p2 = (W + 32'd1);

assign add5_i_i_i_i_fu_231_p2 = (rows + 32'd1);

assign add_ln34_1_fu_213_p2 = (W + 32'd2);

assign add_ln34_fu_202_p2 = (rows + 32'd2);

assign add_ln38_fu_241_p2 = (i_i_i_reg_125 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln38_reg_475_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (str_pad_cvt_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (out_read_data_1_empty_n == 1'b0) & (ap_predicate_op72_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln38_reg_475_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (str_pad_cvt_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (out_read_data_1_empty_n == 1'b0) & (ap_predicate_op72_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln38_reg_475_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (str_pad_cvt_full_n == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (out_read_data_1_empty_n == 1'b0) & (ap_predicate_op72_read_state7 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((enable_lower_padding_empty_n == 1'b0) | (enable_upper_padding_empty_n == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter1 = ((out_read_data_1_empty_n == 1'b0) & (ap_predicate_op72_read_state7 == 1'b1));
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter2 = ((icmp_ln38_reg_475_pp0_iter1_reg == 1'd1) & (str_pad_cvt_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_163 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_condition_215 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_empty_94_reg_169 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_95_reg_180 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_96_reg_191 = 'bx;

assign ap_phi_reg_pp0_iter0_empty_reg_158 = 'bx;

always @ (*) begin
    ap_predicate_op72_read_state7 = ((icmp_ln45_reg_479 == 1'd1) & (icmp_ln38_reg_475 == 1'd1));
end

assign ap_ready = internal_ap_ready;

assign enable1_fu_262_p2 = (trunc_ln314_reg_445 & icmp_ln41_fu_256_p2);

assign enable2_fu_272_p2 = (trunc_ln314_1_reg_450 & icmp_ln42_fu_267_p2);

assign h_1_fu_331_p2 = (h_reg_147 + 32'd1);

assign h_2_fu_342_p3 = ((icmp_ln51_fu_337_p2[0:0] == 1'b1) ? 32'd0 : h_1_fu_331_p2);

assign h_3_fu_350_p3 = ((icmp_ln48_fu_326_p2[0:0] == 1'b1) ? h_2_fu_342_p3 : h_reg_147);

assign icmp_ln38_fu_251_p2 = (($signed(zext_ln13_fu_247_p1) < $signed(grp_fu_219_p2)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_256_p2 = ((h_reg_147 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_267_p2 = ((h_reg_147 == add5_i_i_i_i_fu_231_p2) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_277_p2 = ((w_reg_136 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_283_p2 = ((w_reg_136 == add11_i_i_i_i_fu_236_p2) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_314_p2 = ((or_ln45_2_i_i_fu_306_p3 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_326_p2 = ((w_1_fu_320_p2 == add_ln34_1_fu_213_p2) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_337_p2 = ((h_1_fu_331_p2 == add_ln34_fu_202_p2) ? 1'b1 : 1'b0);

assign or_ln45_1_fu_294_p2 = (enable2_fu_272_p2 | enable1_fu_262_p2);

assign or_ln45_2_fu_300_p2 = (or_ln45_fu_288_p2 | or_ln45_1_fu_294_p2);

assign or_ln45_2_i_i_fu_306_p3 = {{31'd0}, {or_ln45_2_fu_300_p2}};

assign or_ln45_fu_288_p2 = (icmp_ln44_fu_283_p2 | icmp_ln43_fu_277_p2);

assign start_out = real_start;

assign str_pad_cvt_din = {{{{ap_phi_reg_pp0_iter2_empty_reg_158}, {ap_phi_reg_pp0_iter2_empty_94_reg_169}}, {ap_phi_reg_pp0_iter2_empty_95_reg_180}}, {ap_phi_reg_pp0_iter2_empty_96_reg_191}};

assign trunc_ln314_1_fu_227_p1 = enable_lower_padding_dout[0:0];

assign trunc_ln314_fu_223_p1 = enable_upper_padding_dout[0:0];

assign trunc_ln45_fu_366_p1 = out_read_data_1_dout[31:0];

assign w_1_fu_320_p2 = (w_reg_136 + 32'd1);

assign w_2_fu_358_p3 = ((icmp_ln48_fu_326_p2[0:0] == 1'b1) ? 32'd0 : w_1_fu_320_p2);

assign zext_ln13_fu_247_p1 = i_i_i_reg_125;

endmodule //k_conv2D_padding
