// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k_conv2D_write_data_channels_gihwcpi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY,
        m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY,
        m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST,
        m_axi_gmem3_WID,
        m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY,
        m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID,
        m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA,
        m_axi_gmem3_RLAST,
        m_axi_gmem3_RID,
        m_axi_gmem3_RUSER,
        m_axi_gmem3_RRESP,
        m_axi_gmem3_BVALID,
        m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP,
        m_axi_gmem3_BID,
        m_axi_gmem3_BUSER,
        enable_avgpooling,
        enable_maxpooling,
        rows,
        W,
        o_iter_dout,
        o_iter_empty_n,
        o_iter_read,
        o_iter_first,
        ptr_out_dout,
        ptr_out_empty_n,
        ptr_out_read,
        out_pooling_dout,
        out_pooling_empty_n,
        out_pooling_read
);

parameter    ap_ST_fsm_state1 = 76'd1;
parameter    ap_ST_fsm_state2 = 76'd2;
parameter    ap_ST_fsm_state3 = 76'd4;
parameter    ap_ST_fsm_state4 = 76'd8;
parameter    ap_ST_fsm_state5 = 76'd16;
parameter    ap_ST_fsm_state6 = 76'd32;
parameter    ap_ST_fsm_state7 = 76'd64;
parameter    ap_ST_fsm_pp0_stage0 = 76'd128;
parameter    ap_ST_fsm_state11 = 76'd256;
parameter    ap_ST_fsm_state12 = 76'd512;
parameter    ap_ST_fsm_state13 = 76'd1024;
parameter    ap_ST_fsm_state14 = 76'd2048;
parameter    ap_ST_fsm_state15 = 76'd4096;
parameter    ap_ST_fsm_state16 = 76'd8192;
parameter    ap_ST_fsm_state17 = 76'd16384;
parameter    ap_ST_fsm_state18 = 76'd32768;
parameter    ap_ST_fsm_state19 = 76'd65536;
parameter    ap_ST_fsm_state20 = 76'd131072;
parameter    ap_ST_fsm_state21 = 76'd262144;
parameter    ap_ST_fsm_state22 = 76'd524288;
parameter    ap_ST_fsm_state23 = 76'd1048576;
parameter    ap_ST_fsm_state24 = 76'd2097152;
parameter    ap_ST_fsm_state25 = 76'd4194304;
parameter    ap_ST_fsm_state26 = 76'd8388608;
parameter    ap_ST_fsm_state27 = 76'd16777216;
parameter    ap_ST_fsm_state28 = 76'd33554432;
parameter    ap_ST_fsm_state29 = 76'd67108864;
parameter    ap_ST_fsm_state30 = 76'd134217728;
parameter    ap_ST_fsm_state31 = 76'd268435456;
parameter    ap_ST_fsm_state32 = 76'd536870912;
parameter    ap_ST_fsm_state33 = 76'd1073741824;
parameter    ap_ST_fsm_state34 = 76'd2147483648;
parameter    ap_ST_fsm_state35 = 76'd4294967296;
parameter    ap_ST_fsm_state36 = 76'd8589934592;
parameter    ap_ST_fsm_state37 = 76'd17179869184;
parameter    ap_ST_fsm_state38 = 76'd34359738368;
parameter    ap_ST_fsm_state39 = 76'd68719476736;
parameter    ap_ST_fsm_state40 = 76'd137438953472;
parameter    ap_ST_fsm_state41 = 76'd274877906944;
parameter    ap_ST_fsm_state42 = 76'd549755813888;
parameter    ap_ST_fsm_state43 = 76'd1099511627776;
parameter    ap_ST_fsm_state44 = 76'd2199023255552;
parameter    ap_ST_fsm_state45 = 76'd4398046511104;
parameter    ap_ST_fsm_state46 = 76'd8796093022208;
parameter    ap_ST_fsm_state47 = 76'd17592186044416;
parameter    ap_ST_fsm_state48 = 76'd35184372088832;
parameter    ap_ST_fsm_state49 = 76'd70368744177664;
parameter    ap_ST_fsm_state50 = 76'd140737488355328;
parameter    ap_ST_fsm_state51 = 76'd281474976710656;
parameter    ap_ST_fsm_state52 = 76'd562949953421312;
parameter    ap_ST_fsm_state53 = 76'd1125899906842624;
parameter    ap_ST_fsm_state54 = 76'd2251799813685248;
parameter    ap_ST_fsm_state55 = 76'd4503599627370496;
parameter    ap_ST_fsm_state56 = 76'd9007199254740992;
parameter    ap_ST_fsm_state57 = 76'd18014398509481984;
parameter    ap_ST_fsm_state58 = 76'd36028797018963968;
parameter    ap_ST_fsm_state59 = 76'd72057594037927936;
parameter    ap_ST_fsm_state60 = 76'd144115188075855872;
parameter    ap_ST_fsm_state61 = 76'd288230376151711744;
parameter    ap_ST_fsm_state62 = 76'd576460752303423488;
parameter    ap_ST_fsm_state63 = 76'd1152921504606846976;
parameter    ap_ST_fsm_state64 = 76'd2305843009213693952;
parameter    ap_ST_fsm_state65 = 76'd4611686018427387904;
parameter    ap_ST_fsm_state66 = 76'd9223372036854775808;
parameter    ap_ST_fsm_state67 = 76'd18446744073709551616;
parameter    ap_ST_fsm_state68 = 76'd36893488147419103232;
parameter    ap_ST_fsm_state69 = 76'd73786976294838206464;
parameter    ap_ST_fsm_state70 = 76'd147573952589676412928;
parameter    ap_ST_fsm_state71 = 76'd295147905179352825856;
parameter    ap_ST_fsm_state72 = 76'd590295810358705651712;
parameter    ap_ST_fsm_state73 = 76'd1180591620717411303424;
parameter    ap_ST_fsm_state74 = 76'd2361183241434822606848;
parameter    ap_ST_fsm_state75 = 76'd4722366482869645213696;
parameter    ap_ST_fsm_state76 = 76'd9444732965739290427392;
parameter    ap_ST_fsm_state77 = 76'd18889465931478580854784;
parameter    ap_ST_fsm_state78 = 76'd37778931862957161709568;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem3_AWVALID;
input   m_axi_gmem3_AWREADY;
output  [63:0] m_axi_gmem3_AWADDR;
output  [0:0] m_axi_gmem3_AWID;
output  [31:0] m_axi_gmem3_AWLEN;
output  [2:0] m_axi_gmem3_AWSIZE;
output  [1:0] m_axi_gmem3_AWBURST;
output  [1:0] m_axi_gmem3_AWLOCK;
output  [3:0] m_axi_gmem3_AWCACHE;
output  [2:0] m_axi_gmem3_AWPROT;
output  [3:0] m_axi_gmem3_AWQOS;
output  [3:0] m_axi_gmem3_AWREGION;
output  [0:0] m_axi_gmem3_AWUSER;
output   m_axi_gmem3_WVALID;
input   m_axi_gmem3_WREADY;
output  [127:0] m_axi_gmem3_WDATA;
output  [15:0] m_axi_gmem3_WSTRB;
output   m_axi_gmem3_WLAST;
output  [0:0] m_axi_gmem3_WID;
output  [0:0] m_axi_gmem3_WUSER;
output   m_axi_gmem3_ARVALID;
input   m_axi_gmem3_ARREADY;
output  [63:0] m_axi_gmem3_ARADDR;
output  [0:0] m_axi_gmem3_ARID;
output  [31:0] m_axi_gmem3_ARLEN;
output  [2:0] m_axi_gmem3_ARSIZE;
output  [1:0] m_axi_gmem3_ARBURST;
output  [1:0] m_axi_gmem3_ARLOCK;
output  [3:0] m_axi_gmem3_ARCACHE;
output  [2:0] m_axi_gmem3_ARPROT;
output  [3:0] m_axi_gmem3_ARQOS;
output  [3:0] m_axi_gmem3_ARREGION;
output  [0:0] m_axi_gmem3_ARUSER;
input   m_axi_gmem3_RVALID;
output   m_axi_gmem3_RREADY;
input  [127:0] m_axi_gmem3_RDATA;
input   m_axi_gmem3_RLAST;
input  [0:0] m_axi_gmem3_RID;
input  [0:0] m_axi_gmem3_RUSER;
input  [1:0] m_axi_gmem3_RRESP;
input   m_axi_gmem3_BVALID;
output   m_axi_gmem3_BREADY;
input  [1:0] m_axi_gmem3_BRESP;
input  [0:0] m_axi_gmem3_BID;
input  [0:0] m_axi_gmem3_BUSER;
input  [31:0] enable_avgpooling;
input  [31:0] enable_maxpooling;
input  [31:0] rows;
input  [31:0] W;
input  [30:0] o_iter_dout;
input   o_iter_empty_n;
output   o_iter_read;
input  [31:0] o_iter_first;
input  [63:0] ptr_out_dout;
input   ptr_out_empty_n;
output   ptr_out_read;
input  [127:0] out_pooling_dout;
input   out_pooling_empty_n;
output   out_pooling_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem3_AWVALID;
reg m_axi_gmem3_WVALID;
reg m_axi_gmem3_BREADY;
reg o_iter_read;
reg ptr_out_read;
reg out_pooling_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [75:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem3_blk_n_AW;
wire    ap_CS_fsm_state7;
reg    gmem3_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln82_1_reg_393;
reg   [0:0] icmp_ln82_1_reg_393_pp0_iter1_reg;
reg    gmem3_blk_n_B;
wire    ap_CS_fsm_state78;
wire   [0:0] icmp_ln82_fu_272_p2;
reg    o_iter_blk_n;
wire    ap_CS_fsm_state3;
reg    ptr_out_blk_n;
reg    out_pooling_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [30:0] i_reg_165;
wire   [31:0] grp_fu_176_p2;
wire    ap_CS_fsm_state2;
reg   [63:0] ptr_out_read_reg_345;
wire  signed [31:0] write_pixels_i_fu_251_p3;
wire  signed [31:0] add_ln94_fu_262_p2;
reg  signed [31:0] add_ln94_reg_358;
wire   [31:0] grp_fu_268_p2;
reg   [31:0] mul_ln202_reg_363;
wire    ap_CS_fsm_state5;
reg   [59:0] trunc_ln82_1_reg_372;
wire    ap_CS_fsm_state6;
wire   [30:0] trunc_ln82_fu_303_p1;
wire   [30:0] add_ln82_1_fu_316_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage0_iter0;
reg    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln82_1_fu_322_p2;
reg   [127:0] tmp_2_reg_397;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire  signed [63:0] sext_ln82_1_fu_306_p1;
reg    ap_block_state78;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_state1;
reg    ap_block_state3;
wire   [31:0] enable_pooling_i_fu_182_p2;
wire   [31:0] p_neg3_i_fu_201_p2;
wire   [29:0] p_lshr4_cast_cast_i_fu_206_p4;
wire   [30:0] p_lshr4_cast_cast_i_cast_fu_216_p1;
wire   [29:0] p_lshr_f6_cast_cast_i_fu_226_p4;
wire   [0:0] tmp_fu_194_p3;
wire   [30:0] p_neg_t5_i_fu_220_p2;
wire   [30:0] p_lshr_f6_cast_cast_i_cast_fu_235_p1;
wire   [30:0] div34_i_fu_239_p3;
wire   [0:0] tobool32_i_fu_188_p2;
wire  signed [31:0] div34_cast_i_fu_247_p1;
wire   [31:0] zext_ln90_fu_258_p1;
wire    ap_CS_fsm_state4;
wire   [35:0] shl_ln_fu_277_p3;
wire  signed [63:0] sext_ln82_fu_284_p1;
wire   [63:0] add_ln82_fu_288_p2;
reg    grp_fu_176_ce;
reg   [75:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 76'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

k_conv2D_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U517(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(rows),
    .din1(W),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

k_conv2D_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U518(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln94_reg_358),
    .din1(write_pixels_i_fu_251_p3),
    .ce(1'b1),
    .dout(grp_fu_268_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln82_fu_272_p2 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state78))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state7) & (m_axi_gmem3_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state8)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state7) & (m_axi_gmem3_AWREADY == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (m_axi_gmem3_AWREADY == 1'b1))) begin
        i_reg_165 <= 31'd0;
    end else if (((icmp_ln82_1_fu_322_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_165 <= add_ln82_1_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln94_reg_358 <= add_ln94_fu_262_p2;
        ptr_out_read_reg_345 <= ptr_out_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln82_1_reg_393 <= icmp_ln82_1_fu_322_p2;
        icmp_ln82_1_reg_393_pp0_iter1_reg <= icmp_ln82_1_reg_393;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln202_reg_363 <= grp_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln82_1_reg_393 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_397 <= out_pooling_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        trunc_ln82_1_reg_372 <= {{add_ln82_fu_288_p2[63:4]}};
    end
end

always @ (*) begin
    if ((icmp_ln82_1_fu_322_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_272_p2 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state78))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_272_p2 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state78))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        gmem3_blk_n_AW = m_axi_gmem3_AWREADY;
    end else begin
        gmem3_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) & (icmp_ln82_fu_272_p2 == 1'd1))) begin
        gmem3_blk_n_B = m_axi_gmem3_BVALID;
    end else begin
        gmem3_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln82_1_reg_393_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        gmem3_blk_n_W = m_axi_gmem3_WREADY;
    end else begin
        gmem3_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (m_axi_gmem3_AWREADY == 1'b1))) begin
        m_axi_gmem3_AWVALID = 1'b1;
    end else begin
        m_axi_gmem3_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln82_fu_272_p2 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state78) & (icmp_ln82_fu_272_p2 == 1'd1))) begin
        m_axi_gmem3_BREADY = 1'b1;
    end else begin
        m_axi_gmem3_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln82_1_reg_393_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_gmem3_WVALID = 1'b1;
    end else begin
        m_axi_gmem3_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        o_iter_blk_n = o_iter_empty_n;
    end else begin
        o_iter_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_out_empty_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        o_iter_read = 1'b1;
    end else begin
        o_iter_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln82_1_reg_393 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        out_pooling_blk_n = out_pooling_empty_n;
    end else begin
        out_pooling_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln82_1_reg_393 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_pooling_read = 1'b1;
    end else begin
        out_pooling_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ptr_out_blk_n = ptr_out_empty_n;
    end else begin
        ptr_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ptr_out_empty_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        ptr_out_read = 1'b1;
    end else begin
        ptr_out_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((ptr_out_empty_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln82_fu_272_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (m_axi_gmem3_AWREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln82_1_fu_322_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln82_1_fu_322_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            if ((~((icmp_ln82_fu_272_p2 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state78))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln82_1_fu_316_p2 = (i_reg_165 + 31'd1);

assign add_ln82_fu_288_p2 = ($signed(ptr_out_read_reg_345) + $signed(sext_ln82_fu_284_p1));

assign add_ln94_fu_262_p2 = (zext_ln90_fu_258_p1 + o_iter_first);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd75];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln82_1_reg_393 == 1'd0) & (out_pooling_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln82_1_reg_393 == 1'd0) & (out_pooling_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln82_1_reg_393 == 1'd0) & (out_pooling_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln82_1_reg_393_pp0_iter1_reg == 1'd0) & (m_axi_gmem3_WREADY == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3 = ((ptr_out_empty_n == 1'b0) | (o_iter_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state78 = ((icmp_ln82_fu_272_p2 == 1'd1) & (m_axi_gmem3_BVALID == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp0_stage0_iter1 = ((icmp_ln82_1_reg_393 == 1'd0) & (out_pooling_empty_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign div34_cast_i_fu_247_p1 = $signed(div34_i_fu_239_p3);

assign div34_i_fu_239_p3 = ((tmp_fu_194_p3[0:0] == 1'b1) ? p_neg_t5_i_fu_220_p2 : p_lshr_f6_cast_cast_i_cast_fu_235_p1);

assign enable_pooling_i_fu_182_p2 = (enable_maxpooling | enable_avgpooling);

assign icmp_ln82_1_fu_322_p2 = ((i_reg_165 == trunc_ln82_fu_303_p1) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_272_p2 = (($signed(write_pixels_i_fu_251_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign m_axi_gmem3_ARADDR = 64'd0;

assign m_axi_gmem3_ARBURST = 2'd0;

assign m_axi_gmem3_ARCACHE = 4'd0;

assign m_axi_gmem3_ARID = 1'd0;

assign m_axi_gmem3_ARLEN = 32'd0;

assign m_axi_gmem3_ARLOCK = 2'd0;

assign m_axi_gmem3_ARPROT = 3'd0;

assign m_axi_gmem3_ARQOS = 4'd0;

assign m_axi_gmem3_ARREGION = 4'd0;

assign m_axi_gmem3_ARSIZE = 3'd0;

assign m_axi_gmem3_ARUSER = 1'd0;

assign m_axi_gmem3_ARVALID = 1'b0;

assign m_axi_gmem3_AWADDR = sext_ln82_1_fu_306_p1;

assign m_axi_gmem3_AWBURST = 2'd0;

assign m_axi_gmem3_AWCACHE = 4'd0;

assign m_axi_gmem3_AWID = 1'd0;

assign m_axi_gmem3_AWLEN = write_pixels_i_fu_251_p3;

assign m_axi_gmem3_AWLOCK = 2'd0;

assign m_axi_gmem3_AWPROT = 3'd0;

assign m_axi_gmem3_AWQOS = 4'd0;

assign m_axi_gmem3_AWREGION = 4'd0;

assign m_axi_gmem3_AWSIZE = 3'd0;

assign m_axi_gmem3_AWUSER = 1'd0;

assign m_axi_gmem3_RREADY = 1'b0;

assign m_axi_gmem3_WDATA = tmp_2_reg_397;

assign m_axi_gmem3_WID = 1'd0;

assign m_axi_gmem3_WLAST = 1'b0;

assign m_axi_gmem3_WSTRB = 16'd65535;

assign m_axi_gmem3_WUSER = 1'd0;

assign p_lshr4_cast_cast_i_cast_fu_216_p1 = p_lshr4_cast_cast_i_fu_206_p4;

assign p_lshr4_cast_cast_i_fu_206_p4 = {{p_neg3_i_fu_201_p2[31:2]}};

assign p_lshr_f6_cast_cast_i_cast_fu_235_p1 = p_lshr_f6_cast_cast_i_fu_226_p4;

assign p_lshr_f6_cast_cast_i_fu_226_p4 = {{grp_fu_176_p2[31:2]}};

assign p_neg3_i_fu_201_p2 = (32'd0 - grp_fu_176_p2);

assign p_neg_t5_i_fu_220_p2 = (31'd0 - p_lshr4_cast_cast_i_cast_fu_216_p1);

assign sext_ln82_1_fu_306_p1 = $signed(trunc_ln82_1_reg_372);

assign sext_ln82_fu_284_p1 = $signed(shl_ln_fu_277_p3);

assign shl_ln_fu_277_p3 = {{mul_ln202_reg_363}, {4'd0}};

assign tmp_fu_194_p3 = grp_fu_176_p2[32'd31];

assign tobool32_i_fu_188_p2 = ((enable_pooling_i_fu_182_p2 != 32'd0) ? 1'b1 : 1'b0);

assign trunc_ln82_fu_303_p1 = write_pixels_i_fu_251_p3[30:0];

assign write_pixels_i_fu_251_p3 = ((tobool32_i_fu_188_p2[0:0] == 1'b1) ? div34_cast_i_fu_247_p1 : grp_fu_176_p2);

assign zext_ln90_fu_258_p1 = o_iter_dout;

endmodule //k_conv2D_write_data_channels_gihwcpi
