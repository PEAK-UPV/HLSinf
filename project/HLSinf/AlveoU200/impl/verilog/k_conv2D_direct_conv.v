// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k_conv2D_direct_conv (
        rows,
        W,
        I_ITER,
        enable_upper_padding,
        enable_lower_padding,
        out_read_data_1_dout,
        out_read_data_1_empty_n,
        out_read_data_1_read,
        out_read_kernel_dout,
        out_read_kernel_empty_n,
        out_read_kernel_read,
        out_read_bias_dout,
        out_read_bias_empty_n,
        out_read_bias_read,
        out_conv_din,
        out_conv_full_n,
        out_conv_write,
        ap_clk,
        ap_rst,
        enable_upper_padding_ap_vld,
        enable_lower_padding_ap_vld,
        ap_start,
        rows_ap_vld,
        W_ap_vld,
        I_ITER_ap_vld,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input  [31:0] rows;
input  [31:0] W;
input  [31:0] I_ITER;
input  [31:0] enable_upper_padding;
input  [31:0] enable_lower_padding;
input  [127:0] out_read_data_1_dout;
input   out_read_data_1_empty_n;
output   out_read_data_1_read;
input  [4607:0] out_read_kernel_dout;
input   out_read_kernel_empty_n;
output   out_read_kernel_read;
input  [127:0] out_read_bias_dout;
input   out_read_bias_empty_n;
output   out_read_bias_read;
output  [127:0] out_conv_din;
input   out_conv_full_n;
output   out_conv_write;
input   ap_clk;
input   ap_rst;
input   enable_upper_padding_ap_vld;
input   enable_lower_padding_ap_vld;
input   ap_start;
input   rows_ap_vld;
input   W_ap_vld;
input   I_ITER_ap_vld;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

wire    direct_conv_entry5_U0_ap_start;
wire    direct_conv_entry5_U0_ap_done;
wire    direct_conv_entry5_U0_ap_continue;
wire    direct_conv_entry5_U0_ap_idle;
wire    direct_conv_entry5_U0_ap_ready;
wire    direct_conv_entry5_U0_start_out;
wire    direct_conv_entry5_U0_start_write;
wire   [31:0] direct_conv_entry5_U0_enable_upper_padding_out_din;
wire    direct_conv_entry5_U0_enable_upper_padding_out_write;
wire   [31:0] direct_conv_entry5_U0_enable_lower_padding_out_din;
wire    direct_conv_entry5_U0_enable_lower_padding_out_write;
wire    padding_U0_ap_start;
wire    padding_U0_ap_done;
wire    padding_U0_ap_continue;
wire    padding_U0_ap_idle;
wire    padding_U0_ap_ready;
wire    padding_U0_start_out;
wire    padding_U0_start_write;
wire    padding_U0_enable_upper_padding_read;
wire    padding_U0_enable_lower_padding_read;
wire    padding_U0_out_read_data_1_read;
wire   [127:0] padding_U0_str_pad_cvt_din;
wire    padding_U0_str_pad_cvt_write;
wire    cvt_U0_ap_start;
wire    cvt_U0_ap_done;
wire    cvt_U0_ap_continue;
wire    cvt_U0_ap_idle;
wire    cvt_U0_ap_ready;
wire    cvt_U0_start_out;
wire    cvt_U0_start_write;
wire    cvt_U0_str_pad_cvt_read;
wire   [1151:0] cvt_U0_str_cvt_mul_din;
wire    cvt_U0_str_cvt_mul_write;
wire    mul_U0_ap_start;
wire    mul_U0_ap_done;
wire    mul_U0_ap_continue;
wire    mul_U0_ap_idle;
wire    mul_U0_ap_ready;
wire    mul_U0_start_out;
wire    mul_U0_start_write;
wire    mul_U0_out_read_kernel_read;
wire    mul_U0_str_cvt_mul_read;
wire   [127:0] mul_U0_str_mul_add_din;
wire    mul_U0_str_mul_add_write;
wire    add_U0_ap_start;
wire    add_U0_ap_done;
wire    add_U0_ap_continue;
wire    add_U0_ap_idle;
wire    add_U0_ap_ready;
wire    add_U0_out_read_bias_read;
wire    add_U0_str_mul_add_read;
wire   [127:0] add_U0_out_conv_din;
wire    add_U0_out_conv_write;
wire    ap_sync_continue;
wire    enable_upper_padding_c_full_n;
wire   [31:0] enable_upper_padding_c_dout;
wire    enable_upper_padding_c_empty_n;
wire    enable_lower_padding_c_full_n;
wire   [31:0] enable_lower_padding_c_dout;
wire    enable_lower_padding_c_empty_n;
wire    str_pad_cvt_full_n;
wire   [127:0] str_pad_cvt_dout;
wire    str_pad_cvt_empty_n;
wire    str_cvt_mul_full_n;
wire   [1151:0] str_cvt_mul_dout;
wire    str_cvt_mul_empty_n;
wire    str_mul_add_full_n;
wire   [127:0] str_mul_add_dout;
wire    str_mul_add_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
wire   [0:0] start_for_padding_U0_din;
wire    start_for_padding_U0_full_n;
wire   [0:0] start_for_padding_U0_dout;
wire    start_for_padding_U0_empty_n;
wire   [0:0] start_for_cvt_U0_din;
wire    start_for_cvt_U0_full_n;
wire   [0:0] start_for_cvt_U0_dout;
wire    start_for_cvt_U0_empty_n;
wire   [0:0] start_for_mul_U0_din;
wire    start_for_mul_U0_full_n;
wire   [0:0] start_for_mul_U0_dout;
wire    start_for_mul_U0_empty_n;
wire   [0:0] start_for_add_U0_din;
wire    start_for_add_U0_full_n;
wire   [0:0] start_for_add_U0_dout;
wire    start_for_add_U0_empty_n;
wire    add_U0_start_full_n;
wire    add_U0_start_write;

k_conv2D_direct_conv_entry5 direct_conv_entry5_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(direct_conv_entry5_U0_ap_start),
    .start_full_n(start_for_padding_U0_full_n),
    .ap_done(direct_conv_entry5_U0_ap_done),
    .ap_continue(direct_conv_entry5_U0_ap_continue),
    .ap_idle(direct_conv_entry5_U0_ap_idle),
    .ap_ready(direct_conv_entry5_U0_ap_ready),
    .start_out(direct_conv_entry5_U0_start_out),
    .start_write(direct_conv_entry5_U0_start_write),
    .enable_upper_padding(enable_upper_padding),
    .enable_lower_padding(enable_lower_padding),
    .enable_upper_padding_out_din(direct_conv_entry5_U0_enable_upper_padding_out_din),
    .enable_upper_padding_out_full_n(enable_upper_padding_c_full_n),
    .enable_upper_padding_out_write(direct_conv_entry5_U0_enable_upper_padding_out_write),
    .enable_lower_padding_out_din(direct_conv_entry5_U0_enable_lower_padding_out_din),
    .enable_lower_padding_out_full_n(enable_lower_padding_c_full_n),
    .enable_lower_padding_out_write(direct_conv_entry5_U0_enable_lower_padding_out_write)
);

k_conv2D_padding padding_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(padding_U0_ap_start),
    .start_full_n(start_for_cvt_U0_full_n),
    .ap_done(padding_U0_ap_done),
    .ap_continue(padding_U0_ap_continue),
    .ap_idle(padding_U0_ap_idle),
    .ap_ready(padding_U0_ap_ready),
    .start_out(padding_U0_start_out),
    .start_write(padding_U0_start_write),
    .rows(rows),
    .W(W),
    .I_ITER(I_ITER),
    .enable_upper_padding_dout(enable_upper_padding_c_dout),
    .enable_upper_padding_empty_n(enable_upper_padding_c_empty_n),
    .enable_upper_padding_read(padding_U0_enable_upper_padding_read),
    .enable_lower_padding_dout(enable_lower_padding_c_dout),
    .enable_lower_padding_empty_n(enable_lower_padding_c_empty_n),
    .enable_lower_padding_read(padding_U0_enable_lower_padding_read),
    .out_read_data_1_dout(out_read_data_1_dout),
    .out_read_data_1_empty_n(out_read_data_1_empty_n),
    .out_read_data_1_read(padding_U0_out_read_data_1_read),
    .str_pad_cvt_din(padding_U0_str_pad_cvt_din),
    .str_pad_cvt_full_n(str_pad_cvt_full_n),
    .str_pad_cvt_write(padding_U0_str_pad_cvt_write)
);

k_conv2D_cvt cvt_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(cvt_U0_ap_start),
    .start_full_n(start_for_mul_U0_full_n),
    .ap_done(cvt_U0_ap_done),
    .ap_continue(cvt_U0_ap_continue),
    .ap_idle(cvt_U0_ap_idle),
    .ap_ready(cvt_U0_ap_ready),
    .start_out(cvt_U0_start_out),
    .start_write(cvt_U0_start_write),
    .H(rows),
    .W(W),
    .I_ITER(I_ITER),
    .str_pad_cvt_dout(str_pad_cvt_dout),
    .str_pad_cvt_empty_n(str_pad_cvt_empty_n),
    .str_pad_cvt_read(cvt_U0_str_pad_cvt_read),
    .str_cvt_mul_din(cvt_U0_str_cvt_mul_din),
    .str_cvt_mul_full_n(str_cvt_mul_full_n),
    .str_cvt_mul_write(cvt_U0_str_cvt_mul_write)
);

k_conv2D_mul mul_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(mul_U0_ap_start),
    .start_full_n(start_for_add_U0_full_n),
    .ap_done(mul_U0_ap_done),
    .ap_continue(mul_U0_ap_continue),
    .ap_idle(mul_U0_ap_idle),
    .ap_ready(mul_U0_ap_ready),
    .start_out(mul_U0_start_out),
    .start_write(mul_U0_start_write),
    .H(rows),
    .W(W),
    .I_ITER(I_ITER),
    .out_read_kernel_dout(out_read_kernel_dout),
    .out_read_kernel_empty_n(out_read_kernel_empty_n),
    .out_read_kernel_read(mul_U0_out_read_kernel_read),
    .str_cvt_mul_dout(str_cvt_mul_dout),
    .str_cvt_mul_empty_n(str_cvt_mul_empty_n),
    .str_cvt_mul_read(mul_U0_str_cvt_mul_read),
    .str_mul_add_din(mul_U0_str_mul_add_din),
    .str_mul_add_full_n(str_mul_add_full_n),
    .str_mul_add_write(mul_U0_str_mul_add_write)
);

k_conv2D_add add_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(add_U0_ap_start),
    .ap_done(add_U0_ap_done),
    .ap_continue(add_U0_ap_continue),
    .ap_idle(add_U0_ap_idle),
    .ap_ready(add_U0_ap_ready),
    .H(rows),
    .W(W),
    .I_ITER(I_ITER),
    .out_read_bias_dout(out_read_bias_dout),
    .out_read_bias_empty_n(out_read_bias_empty_n),
    .out_read_bias_read(add_U0_out_read_bias_read),
    .str_mul_add_dout(str_mul_add_dout),
    .str_mul_add_empty_n(str_mul_add_empty_n),
    .str_mul_add_read(add_U0_str_mul_add_read),
    .out_conv_din(add_U0_out_conv_din),
    .out_conv_full_n(out_conv_full_n),
    .out_conv_write(add_U0_out_conv_write)
);

k_conv2D_fifo_w32_d2_S enable_upper_padding_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(direct_conv_entry5_U0_enable_upper_padding_out_din),
    .if_full_n(enable_upper_padding_c_full_n),
    .if_write(direct_conv_entry5_U0_enable_upper_padding_out_write),
    .if_dout(enable_upper_padding_c_dout),
    .if_empty_n(enable_upper_padding_c_empty_n),
    .if_read(padding_U0_enable_upper_padding_read)
);

k_conv2D_fifo_w32_d2_S enable_lower_padding_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(direct_conv_entry5_U0_enable_lower_padding_out_din),
    .if_full_n(enable_lower_padding_c_full_n),
    .if_write(direct_conv_entry5_U0_enable_lower_padding_out_write),
    .if_dout(enable_lower_padding_c_dout),
    .if_empty_n(enable_lower_padding_c_empty_n),
    .if_read(padding_U0_enable_lower_padding_read)
);

k_conv2D_fifo_w128_d4_S str_pad_cvt_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(padding_U0_str_pad_cvt_din),
    .if_full_n(str_pad_cvt_full_n),
    .if_write(padding_U0_str_pad_cvt_write),
    .if_dout(str_pad_cvt_dout),
    .if_empty_n(str_pad_cvt_empty_n),
    .if_read(cvt_U0_str_pad_cvt_read)
);

k_conv2D_fifo_w1152_d4_A str_cvt_mul_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(cvt_U0_str_cvt_mul_din),
    .if_full_n(str_cvt_mul_full_n),
    .if_write(cvt_U0_str_cvt_mul_write),
    .if_dout(str_cvt_mul_dout),
    .if_empty_n(str_cvt_mul_empty_n),
    .if_read(mul_U0_str_cvt_mul_read)
);

k_conv2D_fifo_w128_d4_S str_mul_add_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mul_U0_str_mul_add_din),
    .if_full_n(str_mul_add_full_n),
    .if_write(mul_U0_str_mul_add_write),
    .if_dout(str_mul_add_dout),
    .if_empty_n(str_mul_add_empty_n),
    .if_read(add_U0_str_mul_add_read)
);

k_conv2D_start_for_padding_U0 start_for_padding_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_padding_U0_din),
    .if_full_n(start_for_padding_U0_full_n),
    .if_write(direct_conv_entry5_U0_start_write),
    .if_dout(start_for_padding_U0_dout),
    .if_empty_n(start_for_padding_U0_empty_n),
    .if_read(padding_U0_ap_ready)
);

k_conv2D_start_for_cvt_U0 start_for_cvt_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_cvt_U0_din),
    .if_full_n(start_for_cvt_U0_full_n),
    .if_write(padding_U0_start_write),
    .if_dout(start_for_cvt_U0_dout),
    .if_empty_n(start_for_cvt_U0_empty_n),
    .if_read(cvt_U0_ap_ready)
);

k_conv2D_start_for_mul_U0 start_for_mul_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_mul_U0_din),
    .if_full_n(start_for_mul_U0_full_n),
    .if_write(cvt_U0_start_write),
    .if_dout(start_for_mul_U0_dout),
    .if_empty_n(start_for_mul_U0_empty_n),
    .if_read(mul_U0_ap_ready)
);

k_conv2D_start_for_add_U0 start_for_add_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_add_U0_din),
    .if_full_n(start_for_add_U0_full_n),
    .if_write(mul_U0_start_write),
    .if_dout(start_for_add_U0_dout),
    .if_empty_n(start_for_add_U0_empty_n),
    .if_read(add_U0_ap_ready)
);

assign add_U0_ap_continue = ap_continue;

assign add_U0_ap_start = start_for_add_U0_empty_n;

assign add_U0_start_full_n = 1'b1;

assign add_U0_start_write = 1'b0;

assign ap_done = add_U0_ap_done;

assign ap_idle = (padding_U0_ap_idle & mul_U0_ap_idle & direct_conv_entry5_U0_ap_idle & cvt_U0_ap_idle & add_U0_ap_idle);

assign ap_ready = direct_conv_entry5_U0_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = add_U0_ap_done;

assign ap_sync_ready = direct_conv_entry5_U0_ap_ready;

assign cvt_U0_ap_continue = 1'b1;

assign cvt_U0_ap_start = start_for_cvt_U0_empty_n;

assign direct_conv_entry5_U0_ap_continue = 1'b1;

assign direct_conv_entry5_U0_ap_start = ap_start;

assign mul_U0_ap_continue = 1'b1;

assign mul_U0_ap_start = start_for_mul_U0_empty_n;

assign out_conv_din = add_U0_out_conv_din;

assign out_conv_write = add_U0_out_conv_write;

assign out_read_bias_read = add_U0_out_read_bias_read;

assign out_read_data_1_read = padding_U0_out_read_data_1_read;

assign out_read_kernel_read = mul_U0_out_read_kernel_read;

assign padding_U0_ap_continue = 1'b1;

assign padding_U0_ap_start = start_for_padding_U0_empty_n;

assign start_for_add_U0_din = 1'b1;

assign start_for_cvt_U0_din = 1'b1;

assign start_for_mul_U0_din = 1'b1;

assign start_for_padding_U0_din = 1'b1;

endmodule //k_conv2D_direct_conv
