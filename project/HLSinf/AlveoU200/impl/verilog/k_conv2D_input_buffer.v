// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k_conv2D_input_buffer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        enable_upper_padding,
        rows,
        enable_lower_padding,
        W,
        I_ITER,
        I,
        o_iter_dout,
        o_iter_empty_n,
        o_iter_read,
        o_iter_last,
        o_iter_first,
        o_iter_out_din,
        o_iter_out_full_n,
        o_iter_out_write,
        out_read_data_dout,
        out_read_data_empty_n,
        out_read_data_read,
        out_read_data_1_din,
        out_read_data_1_full_n,
        out_read_data_1_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_pp0_stage0 = 8'd64;
parameter    ap_ST_fsm_state10 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] enable_upper_padding;
input  [31:0] rows;
input  [31:0] enable_lower_padding;
input  [31:0] W;
input  [31:0] I_ITER;
input  [31:0] I;
input  [30:0] o_iter_dout;
input   o_iter_empty_n;
output   o_iter_read;
input  [31:0] o_iter_last;
input  [31:0] o_iter_first;
output  [30:0] o_iter_out_din;
input   o_iter_out_full_n;
output   o_iter_out_write;
input  [127:0] out_read_data_dout;
input   out_read_data_empty_n;
output   out_read_data_read;
output  [127:0] out_read_data_1_din;
input   out_read_data_1_full_n;
output   out_read_data_1_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg o_iter_read;
reg o_iter_out_write;
reg out_read_data_read;
reg[127:0] out_read_data_1_din;
reg out_read_data_1_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    o_iter_blk_n;
wire    ap_CS_fsm_state6;
reg    o_iter_out_blk_n;
reg    out_read_data_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] and_ln169_reg_468;
reg    out_read_data_1_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] p_reg_204;
wire    ap_CS_fsm_state2;
wire  signed [31:0] grp_fu_251_p2;
wire  signed [30:0] div_i_fu_304_p3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_315_p2;
wire   [31:0] grp_fu_320_p2;
wire   [0:0] and_ln168_1_fu_354_p2;
reg   [0:0] and_ln168_1_reg_464;
wire   [0:0] and_ln169_fu_366_p2;
wire   [31:0] add_ln88_fu_372_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage0_iter0;
reg    ap_block_state8_pp0_stage0_iter1;
reg    ap_block_state9_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln88_fu_378_p2;
wire   [63:0] zext_ln88_fu_383_p1;
reg   [63:0] zext_ln88_reg_481;
reg   [63:0] zext_ln88_reg_481_pp0_iter1_reg;
reg    ap_block_state6;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
wire   [15:0] buffer_i_i_i_address0;
reg    buffer_i_i_i_ce0;
reg    buffer_i_i_i_we0;
wire   [15:0] buffer_i_i_i_address1;
reg    buffer_i_i_i_ce1;
wire   [127:0] buffer_i_i_i_q1;
reg   [127:0] px_buff_07_i_i_i_fu_94;
reg   [127:0] tmp_fu_98;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] cmp10_i_fu_215_p2;
wire   [0:0] cmp11_i_fu_225_p2;
wire   [1:0] cmp10_i_cast_fu_221_p1;
wire   [1:0] cmp11_i_cast_fu_231_p1;
wire   [1:0] tmp1_fu_235_p2;
wire   [31:0] tmp1_cast_fu_241_p1;
wire  signed [31:0] grp_fu_251_p0;
wire   [31:0] p_neg9_i_fu_264_p2;
wire   [29:0] p_lshr10_cast_cast_i_fu_270_p4;
wire   [30:0] p_lshr10_cast_cast_i_cast_fu_280_p1;
wire   [29:0] p_lshr_f12_cast_cast_i_fu_290_p4;
wire   [0:0] tmp_9_fu_256_p3;
wire   [30:0] p_neg_t11_i_fu_284_p2;
wire   [30:0] p_lshr_f12_cast_cast_i_cast_fu_300_p1;
wire   [31:0] sub_ln87_fu_336_p2;
wire   [0:0] icmp_ln168_fu_330_p2;
wire   [0:0] cmp21_i_fu_342_p2;
wire   [0:0] and_ln168_fu_348_p2;
wire   [0:0] cmp18_i_fu_325_p2;
wire   [0:0] icmp_ln169_fu_360_p2;
reg    grp_fu_320_ce;
wire    ap_CS_fsm_state10;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

k_conv2D_input_buffer_buffer_i_i_i #(
    .DataWidth( 128 ),
    .AddressRange( 65536 ),
    .AddressWidth( 16 ))
buffer_i_i_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer_i_i_i_address0),
    .ce0(buffer_i_i_i_ce0),
    .we0(buffer_i_i_i_we0),
    .d0(tmp_fu_98),
    .address1(buffer_i_i_i_address1),
    .ce1(buffer_i_i_i_ce1),
    .q1(buffer_i_i_i_q1)
);

k_conv2D_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_251_p0),
    .din1(W),
    .ce(1'b1),
    .dout(grp_fu_251_p2)
);

k_conv2D_mul_32s_31s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 32 ))
mul_32s_31s_32_2_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_251_p2),
    .din1(div_i_fu_304_p3),
    .ce(1'b1),
    .dout(grp_fu_315_p2)
);

k_conv2D_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_251_p2),
    .din1(I_ITER),
    .ce(grp_fu_320_ce),
    .dout(grp_fu_320_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state7))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((o_iter_out_full_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state7)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((o_iter_out_full_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_fu_378_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        p_reg_204 <= add_ln88_fu_372_p2;
    end else if ((~((o_iter_out_full_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        p_reg_204 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        and_ln168_1_reg_464 <= and_ln168_1_fu_354_p2;
        and_ln169_reg_468 <= and_ln169_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln169_reg_468) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        px_buff_07_i_i_i_fu_94 <= buffer_i_i_i_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln169_reg_468) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_fu_98 <= out_read_data_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln88_fu_378_p2 == 1'd0))) begin
        zext_ln88_reg_481[31 : 0] <= zext_ln88_fu_383_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln88_reg_481_pp0_iter1_reg[31 : 0] <= zext_ln88_reg_481[31 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln88_fu_378_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_i_i_i_ce0 = 1'b1;
    end else begin
        buffer_i_i_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        buffer_i_i_i_ce1 = 1'b1;
    end else begin
        buffer_i_i_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln168_1_reg_464) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buffer_i_i_i_we0 = 1'b1;
    end else begin
        buffer_i_i_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (~((o_iter_out_full_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6)))) begin
        grp_fu_320_ce = 1'b1;
    end else begin
        grp_fu_320_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        o_iter_blk_n = o_iter_empty_n;
    end else begin
        o_iter_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        o_iter_out_blk_n = o_iter_out_full_n;
    end else begin
        o_iter_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((o_iter_out_full_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        o_iter_out_write = 1'b1;
    end else begin
        o_iter_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((o_iter_out_full_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        o_iter_read = 1'b1;
    end else begin
        o_iter_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln169_reg_468) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd0 == and_ln169_reg_468) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_read_data_1_blk_n = out_read_data_1_full_n;
    end else begin
        out_read_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((1'd1 == and_ln169_reg_468)) begin
            out_read_data_1_din = px_buff_07_i_i_i_fu_94;
        end else if ((1'd0 == and_ln169_reg_468)) begin
            out_read_data_1_din = tmp_fu_98;
        end else begin
            out_read_data_1_din = 'bx;
        end
    end else begin
        out_read_data_1_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == and_ln169_reg_468) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'd0 == and_ln169_reg_468) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        out_read_data_1_write = 1'b1;
    end else begin
        out_read_data_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln169_reg_468) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_read_data_blk_n = out_read_data_empty_n;
    end else begin
        out_read_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'd0 == and_ln169_reg_468) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_read_data_read = 1'b1;
    end else begin
        out_read_data_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if ((~((o_iter_out_full_n == 1'b0) | (o_iter_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln88_fu_378_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln88_fu_378_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln88_fu_372_p2 = (p_reg_204 + 32'd1);

assign and_ln168_1_fu_354_p2 = (cmp18_i_fu_325_p2 & and_ln168_fu_348_p2);

assign and_ln168_fu_348_p2 = (icmp_ln168_fu_330_p2 & cmp21_i_fu_342_p2);

assign and_ln169_fu_366_p2 = (icmp_ln169_fu_360_p2 & cmp18_i_fu_325_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'd1 == and_ln169_reg_468) & (out_read_data_1_full_n == 1'b0)) | ((1'd0 == and_ln169_reg_468) & (out_read_data_1_full_n == 1'b0)))) | ((1'd0 == and_ln169_reg_468) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_read_data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'd1 == and_ln169_reg_468) & (out_read_data_1_full_n == 1'b0)) | ((1'd0 == and_ln169_reg_468) & (out_read_data_1_full_n == 1'b0)))) | ((1'd0 == and_ln169_reg_468) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_read_data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((1'd1 == and_ln169_reg_468) & (out_read_data_1_full_n == 1'b0)) | ((1'd0 == and_ln169_reg_468) & (out_read_data_1_full_n == 1'b0)))) | ((1'd0 == and_ln169_reg_468) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_read_data_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((o_iter_out_full_n == 1'b0) | (o_iter_empty_n == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter1 = ((1'd0 == and_ln169_reg_468) & (out_read_data_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state9_pp0_stage0_iter2 = (((1'd1 == and_ln169_reg_468) & (out_read_data_1_full_n == 1'b0)) | ((1'd0 == and_ln169_reg_468) & (out_read_data_1_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign buffer_i_i_i_address0 = zext_ln88_reg_481_pp0_iter1_reg;

assign buffer_i_i_i_address1 = zext_ln88_fu_383_p1;

assign cmp10_i_cast_fu_221_p1 = cmp10_i_fu_215_p2;

assign cmp10_i_fu_215_p2 = ((enable_upper_padding == 32'd0) ? 1'b1 : 1'b0);

assign cmp11_i_cast_fu_231_p1 = cmp11_i_fu_225_p2;

assign cmp11_i_fu_225_p2 = ((enable_lower_padding == 32'd0) ? 1'b1 : 1'b0);

assign cmp18_i_fu_325_p2 = (($signed(grp_fu_315_p2) < $signed(32'd65537)) ? 1'b1 : 1'b0);

assign cmp21_i_fu_342_p2 = (($signed(sub_ln87_fu_336_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign div_i_fu_304_p3 = ((tmp_9_fu_256_p3[0:0] == 1'b1) ? p_neg_t11_i_fu_284_p2 : p_lshr_f12_cast_cast_i_cast_fu_300_p1);

assign grp_fu_251_p0 = (tmp1_cast_fu_241_p1 + rows);

assign icmp_ln168_fu_330_p2 = ((o_iter_dout == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_360_p2 = ((o_iter_dout != 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_378_p2 = ((p_reg_204 == grp_fu_320_p2) ? 1'b1 : 1'b0);

assign o_iter_out_din = o_iter_dout;

assign p_lshr10_cast_cast_i_cast_fu_280_p1 = p_lshr10_cast_cast_i_fu_270_p4;

assign p_lshr10_cast_cast_i_fu_270_p4 = {{p_neg9_i_fu_264_p2[31:2]}};

assign p_lshr_f12_cast_cast_i_cast_fu_300_p1 = p_lshr_f12_cast_cast_i_fu_290_p4;

assign p_lshr_f12_cast_cast_i_fu_290_p4 = {{I[31:2]}};

assign p_neg9_i_fu_264_p2 = (32'd0 - I);

assign p_neg_t11_i_fu_284_p2 = (31'd0 - p_lshr10_cast_cast_i_cast_fu_280_p1);

assign sub_ln87_fu_336_p2 = (o_iter_last - o_iter_first);

assign tmp1_cast_fu_241_p1 = tmp1_fu_235_p2;

assign tmp1_fu_235_p2 = (cmp10_i_cast_fu_221_p1 + cmp11_i_cast_fu_231_p1);

assign tmp_9_fu_256_p3 = I[32'd31];

assign zext_ln88_fu_383_p1 = p_reg_204;

always @ (posedge ap_clk) begin
    zext_ln88_reg_481[63:32] <= 32'b00000000000000000000000000000000;
    zext_ln88_reg_481_pp0_iter1_reg[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //k_conv2D_input_buffer
