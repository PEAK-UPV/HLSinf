// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k_conv2D_relu (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        enable_relu_dout,
        enable_relu_empty_n,
        enable_relu_read,
        H,
        W,
        out_conv_dout,
        out_conv_empty_n,
        out_conv_read,
        out_relu_din,
        out_relu_full_n,
        out_relu_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] enable_relu_dout;
input   enable_relu_empty_n;
output   enable_relu_read;
input  [31:0] H;
input  [31:0] W;
input  [127:0] out_conv_dout;
input   out_conv_empty_n;
output   out_conv_read;
output  [127:0] out_relu_din;
input   out_relu_full_n;
output   out_relu_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg enable_relu_read;
reg out_conv_read;
reg out_relu_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    enable_relu_blk_n;
wire    ap_CS_fsm_state2;
reg    out_conv_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln37_reg_494;
reg    out_relu_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln37_reg_494_pp0_iter3_reg;
reg   [30:0] i_reg_139;
wire   [31:0] grp_fu_170_p2;
wire   [0:0] tobool_i_i_fu_176_p2;
reg   [0:0] tobool_i_i_reg_481;
wire   [30:0] add_ln37_fu_182_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln37_fu_192_p2;
reg   [0:0] icmp_ln37_reg_494_pp0_iter1_reg;
reg   [0:0] icmp_ln37_reg_494_pp0_iter2_reg;
wire   [31:0] trunc_ln42_fu_197_p1;
reg   [31:0] trunc_ln42_reg_498;
reg   [31:0] trunc_ln42_reg_498_pp0_iter2_reg;
reg   [31:0] trunc_ln42_1_reg_504;
reg   [31:0] trunc_ln42_1_reg_504_pp0_iter2_reg;
reg   [31:0] trunc_ln42_2_reg_510;
reg   [31:0] trunc_ln42_2_reg_510_pp0_iter2_reg;
reg   [31:0] trunc_ln42_3_reg_516;
reg   [31:0] trunc_ln42_3_reg_516_pp0_iter2_reg;
wire   [0:0] icmp_ln81_fu_245_p2;
reg   [0:0] icmp_ln81_reg_522;
reg   [0:0] icmp_ln81_reg_522_pp0_iter2_reg;
wire   [0:0] icmp_ln81_1_fu_251_p2;
reg   [0:0] icmp_ln81_1_reg_527;
reg   [0:0] icmp_ln81_1_reg_527_pp0_iter2_reg;
wire   [0:0] icmp_ln81_2_fu_277_p2;
reg   [0:0] icmp_ln81_2_reg_532;
reg   [0:0] icmp_ln81_2_reg_532_pp0_iter2_reg;
wire   [0:0] icmp_ln81_3_fu_283_p2;
reg   [0:0] icmp_ln81_3_reg_537;
reg   [0:0] icmp_ln81_3_reg_537_pp0_iter2_reg;
wire   [0:0] icmp_ln81_4_fu_309_p2;
reg   [0:0] icmp_ln81_4_reg_542;
reg   [0:0] icmp_ln81_4_reg_542_pp0_iter2_reg;
wire   [0:0] icmp_ln81_5_fu_315_p2;
reg   [0:0] icmp_ln81_5_reg_547;
reg   [0:0] icmp_ln81_5_reg_547_pp0_iter2_reg;
wire   [0:0] icmp_ln81_6_fu_341_p2;
reg   [0:0] icmp_ln81_6_reg_552;
reg   [0:0] icmp_ln81_6_reg_552_pp0_iter2_reg;
wire   [0:0] icmp_ln81_7_fu_347_p2;
reg   [0:0] icmp_ln81_7_reg_557;
reg   [0:0] icmp_ln81_7_reg_557_pp0_iter2_reg;
wire   [31:0] select_ln174_fu_429_p3;
reg   [31:0] select_ln174_reg_582;
wire   [31:0] select_ln174_1_fu_436_p3;
reg   [31:0] select_ln174_1_reg_587;
wire   [31:0] select_ln174_2_fu_443_p3;
reg   [31:0] select_ln174_2_reg_592;
wire   [31:0] select_ln174_3_fu_450_p3;
reg   [31:0] select_ln174_3_reg_597;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_150_p0;
wire   [31:0] grp_fu_155_p0;
wire   [31:0] grp_fu_160_p0;
wire   [31:0] grp_fu_165_p0;
wire   [31:0] zext_ln23_fu_188_p1;
wire   [7:0] tmp_1_fu_231_p4;
wire   [22:0] trunc_ln81_fu_241_p1;
wire   [7:0] tmp_3_fu_257_p4;
wire   [22:0] trunc_ln81_1_fu_267_p4;
wire   [7:0] tmp_5_fu_289_p4;
wire   [22:0] trunc_ln81_2_fu_299_p4;
wire   [7:0] tmp_7_fu_321_p4;
wire   [22:0] trunc_ln81_3_fu_331_p4;
wire   [0:0] or_ln81_fu_369_p2;
wire   [0:0] grp_fu_150_p2;
wire   [0:0] and_ln81_4_fu_373_p2;
wire   [0:0] or_ln81_1_fu_384_p2;
wire   [0:0] grp_fu_155_p2;
wire   [0:0] and_ln81_5_fu_388_p2;
wire   [0:0] or_ln81_2_fu_399_p2;
wire   [0:0] grp_fu_160_p2;
wire   [0:0] and_ln81_6_fu_403_p2;
wire   [0:0] or_ln81_3_fu_414_p2;
wire   [0:0] grp_fu_165_p2;
wire   [0:0] and_ln81_7_fu_418_p2;
wire   [0:0] and_ln81_fu_379_p2;
wire   [0:0] and_ln81_1_fu_394_p2;
wire   [0:0] and_ln81_2_fu_409_p2;
wire   [0:0] and_ln81_3_fu_424_p2;
reg    grp_fu_150_ce;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_155_ce;
reg    grp_fu_160_ce;
reg    grp_fu_165_ce;
reg    grp_fu_170_ce;
wire    ap_CS_fsm_state8;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

k_conv2D_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U430(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_150_p0),
    .din1(32'd0),
    .ce(grp_fu_150_ce),
    .opcode(5'd4),
    .dout(grp_fu_150_p2)
);

k_conv2D_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U431(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_155_p0),
    .din1(32'd0),
    .ce(grp_fu_155_ce),
    .opcode(5'd4),
    .dout(grp_fu_155_p2)
);

k_conv2D_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U432(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_160_p0),
    .din1(32'd0),
    .ce(grp_fu_160_ce),
    .opcode(5'd4),
    .dout(grp_fu_160_p2)
);

k_conv2D_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U433(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_165_p0),
    .din1(32'd0),
    .ce(grp_fu_165_ce),
    .opcode(5'd4),
    .dout(grp_fu_165_p2)
);

k_conv2D_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U434(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(W),
    .din1(H),
    .ce(grp_fu_170_ce),
    .dout(grp_fu_170_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((enable_relu_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((enable_relu_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln37_fu_192_p2 == 1'd1))) begin
        i_reg_139 <= add_ln37_fu_182_p2;
    end else if (((enable_relu_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_139 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln37_reg_494 <= icmp_ln37_fu_192_p2;
        icmp_ln37_reg_494_pp0_iter1_reg <= icmp_ln37_reg_494;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln37_reg_494_pp0_iter2_reg <= icmp_ln37_reg_494_pp0_iter1_reg;
        icmp_ln37_reg_494_pp0_iter3_reg <= icmp_ln37_reg_494_pp0_iter2_reg;
        icmp_ln81_1_reg_527_pp0_iter2_reg <= icmp_ln81_1_reg_527;
        icmp_ln81_2_reg_532_pp0_iter2_reg <= icmp_ln81_2_reg_532;
        icmp_ln81_3_reg_537_pp0_iter2_reg <= icmp_ln81_3_reg_537;
        icmp_ln81_4_reg_542_pp0_iter2_reg <= icmp_ln81_4_reg_542;
        icmp_ln81_5_reg_547_pp0_iter2_reg <= icmp_ln81_5_reg_547;
        icmp_ln81_6_reg_552_pp0_iter2_reg <= icmp_ln81_6_reg_552;
        icmp_ln81_7_reg_557_pp0_iter2_reg <= icmp_ln81_7_reg_557;
        icmp_ln81_reg_522_pp0_iter2_reg <= icmp_ln81_reg_522;
        trunc_ln42_1_reg_504_pp0_iter2_reg <= trunc_ln42_1_reg_504;
        trunc_ln42_2_reg_510_pp0_iter2_reg <= trunc_ln42_2_reg_510;
        trunc_ln42_3_reg_516_pp0_iter2_reg <= trunc_ln42_3_reg_516;
        trunc_ln42_reg_498_pp0_iter2_reg <= trunc_ln42_reg_498;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_494 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln81_1_reg_527 <= icmp_ln81_1_fu_251_p2;
        icmp_ln81_2_reg_532 <= icmp_ln81_2_fu_277_p2;
        icmp_ln81_3_reg_537 <= icmp_ln81_3_fu_283_p2;
        icmp_ln81_4_reg_542 <= icmp_ln81_4_fu_309_p2;
        icmp_ln81_5_reg_547 <= icmp_ln81_5_fu_315_p2;
        icmp_ln81_6_reg_552 <= icmp_ln81_6_fu_341_p2;
        icmp_ln81_7_reg_557 <= icmp_ln81_7_fu_347_p2;
        icmp_ln81_reg_522 <= icmp_ln81_fu_245_p2;
        trunc_ln42_1_reg_504 <= {{out_conv_dout[63:32]}};
        trunc_ln42_2_reg_510 <= {{out_conv_dout[95:64]}};
        trunc_ln42_3_reg_516 <= {{out_conv_dout[127:96]}};
        trunc_ln42_reg_498 <= trunc_ln42_fu_197_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln37_reg_494_pp0_iter2_reg == 1'd1))) begin
        select_ln174_1_reg_587 <= select_ln174_1_fu_436_p3;
        select_ln174_2_reg_592 <= select_ln174_2_fu_443_p3;
        select_ln174_3_reg_597 <= select_ln174_3_fu_450_p3;
        select_ln174_reg_582 <= select_ln174_fu_429_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tobool_i_i_reg_481 <= tobool_i_i_fu_176_p2;
    end
end

always @ (*) begin
    if ((icmp_ln37_fu_192_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        enable_relu_blk_n = enable_relu_empty_n;
    end else begin
        enable_relu_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((enable_relu_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        enable_relu_read = 1'b1;
    end else begin
        enable_relu_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_150_ce = 1'b1;
    end else begin
        grp_fu_150_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_155_ce = 1'b1;
    end else begin
        grp_fu_155_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_160_ce = 1'b1;
    end else begin
        grp_fu_160_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_165_ce = 1'b1;
    end else begin
        grp_fu_165_ce = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)) | ((enable_relu_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)))) begin
        grp_fu_170_ce = 1'b1;
    end else begin
        grp_fu_170_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_494 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_conv_blk_n = out_conv_empty_n;
    end else begin
        out_conv_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_494 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_conv_read = 1'b1;
    end else begin
        out_conv_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_494_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_relu_blk_n = out_relu_full_n;
    end else begin
        out_relu_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_494_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_relu_write = 1'b1;
    end else begin
        out_relu_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((enable_relu_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln37_fu_192_p2 == 1'd0)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln37_fu_192_p2 == 1'd0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_fu_182_p2 = (i_reg_139 + 31'd1);

assign and_ln81_1_fu_394_p2 = (tobool_i_i_reg_481 & and_ln81_5_fu_388_p2);

assign and_ln81_2_fu_409_p2 = (tobool_i_i_reg_481 & and_ln81_6_fu_403_p2);

assign and_ln81_3_fu_424_p2 = (tobool_i_i_reg_481 & and_ln81_7_fu_418_p2);

assign and_ln81_4_fu_373_p2 = (or_ln81_fu_369_p2 & grp_fu_150_p2);

assign and_ln81_5_fu_388_p2 = (or_ln81_1_fu_384_p2 & grp_fu_155_p2);

assign and_ln81_6_fu_403_p2 = (or_ln81_2_fu_399_p2 & grp_fu_160_p2);

assign and_ln81_7_fu_418_p2 = (or_ln81_3_fu_414_p2 & grp_fu_165_p2);

assign and_ln81_fu_379_p2 = (tobool_i_i_reg_481 & and_ln81_4_fu_373_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((icmp_ln37_reg_494_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (out_relu_full_n == 1'b0)) | ((icmp_ln37_reg_494 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_conv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln37_reg_494_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (out_relu_full_n == 1'b0)) | ((icmp_ln37_reg_494 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_conv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln37_reg_494_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (out_relu_full_n == 1'b0)) | ((icmp_ln37_reg_494 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_conv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln37_reg_494_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (out_relu_full_n == 1'b0)) | ((icmp_ln37_reg_494 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_conv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln37_reg_494 == 1'd1) & (out_conv_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = ((icmp_ln37_reg_494_pp0_iter3_reg == 1'd1) & (out_relu_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_fu_150_p0 = trunc_ln42_reg_498;

assign grp_fu_155_p0 = trunc_ln42_1_reg_504;

assign grp_fu_160_p0 = trunc_ln42_2_reg_510;

assign grp_fu_165_p0 = trunc_ln42_3_reg_516;

assign icmp_ln37_fu_192_p2 = (($signed(zext_ln23_fu_188_p1) < $signed(grp_fu_170_p2)) ? 1'b1 : 1'b0);

assign icmp_ln81_1_fu_251_p2 = ((trunc_ln81_fu_241_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_2_fu_277_p2 = ((tmp_3_fu_257_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln81_3_fu_283_p2 = ((trunc_ln81_1_fu_267_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_4_fu_309_p2 = ((tmp_5_fu_289_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln81_5_fu_315_p2 = ((trunc_ln81_2_fu_299_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_6_fu_341_p2 = ((tmp_7_fu_321_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln81_7_fu_347_p2 = ((trunc_ln81_3_fu_331_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_245_p2 = ((tmp_1_fu_231_p4 != 8'd255) ? 1'b1 : 1'b0);

assign or_ln81_1_fu_384_p2 = (icmp_ln81_3_reg_537_pp0_iter2_reg | icmp_ln81_2_reg_532_pp0_iter2_reg);

assign or_ln81_2_fu_399_p2 = (icmp_ln81_5_reg_547_pp0_iter2_reg | icmp_ln81_4_reg_542_pp0_iter2_reg);

assign or_ln81_3_fu_414_p2 = (icmp_ln81_7_reg_557_pp0_iter2_reg | icmp_ln81_6_reg_552_pp0_iter2_reg);

assign or_ln81_fu_369_p2 = (icmp_ln81_reg_522_pp0_iter2_reg | icmp_ln81_1_reg_527_pp0_iter2_reg);

assign out_relu_din = {{{{select_ln174_3_reg_597}, {select_ln174_2_reg_592}}, {select_ln174_1_reg_587}}, {select_ln174_reg_582}};

assign select_ln174_1_fu_436_p3 = ((and_ln81_1_fu_394_p2[0:0] == 1'b1) ? 32'd0 : trunc_ln42_1_reg_504_pp0_iter2_reg);

assign select_ln174_2_fu_443_p3 = ((and_ln81_2_fu_409_p2[0:0] == 1'b1) ? 32'd0 : trunc_ln42_2_reg_510_pp0_iter2_reg);

assign select_ln174_3_fu_450_p3 = ((and_ln81_3_fu_424_p2[0:0] == 1'b1) ? 32'd0 : trunc_ln42_3_reg_516_pp0_iter2_reg);

assign select_ln174_fu_429_p3 = ((and_ln81_fu_379_p2[0:0] == 1'b1) ? 32'd0 : trunc_ln42_reg_498_pp0_iter2_reg);

assign start_out = real_start;

assign tmp_1_fu_231_p4 = {{out_conv_dout[30:23]}};

assign tmp_3_fu_257_p4 = {{out_conv_dout[62:55]}};

assign tmp_5_fu_289_p4 = {{out_conv_dout[94:87]}};

assign tmp_7_fu_321_p4 = {{out_conv_dout[126:119]}};

assign tobool_i_i_fu_176_p2 = ((enable_relu_dout != 32'd0) ? 1'b1 : 1'b0);

assign trunc_ln42_fu_197_p1 = out_conv_dout[31:0];

assign trunc_ln81_1_fu_267_p4 = {{out_conv_dout[54:32]}};

assign trunc_ln81_2_fu_299_p4 = {{out_conv_dout[86:64]}};

assign trunc_ln81_3_fu_331_p4 = {{out_conv_dout[118:96]}};

assign trunc_ln81_fu_241_p1 = out_conv_dout[22:0];

assign zext_ln23_fu_188_p1 = i_reg_139;

endmodule //k_conv2D_relu
