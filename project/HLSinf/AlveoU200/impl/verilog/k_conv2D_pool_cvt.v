// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k_conv2D_pool_cvt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        H,
        W,
        p_read,
        out_batch_norm_dout,
        out_batch_norm_empty_n,
        out_batch_norm_read,
        stream_pool_din,
        stream_pool_full_n,
        stream_pool_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] H;
input  [31:0] W;
input  [31:0] p_read;
input  [127:0] out_batch_norm_dout;
input   out_batch_norm_empty_n;
output   out_batch_norm_read;
output  [511:0] stream_pool_din;
input   stream_pool_full_n;
output   stream_pool_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_batch_norm_read;
reg[511:0] stream_pool_din;
reg stream_pool_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    out_batch_norm_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln64_reg_984;
reg    stream_pool_blk_n;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] tobool_i_i_reg_975;
reg   [0:0] icmp_ln117_reg_1029;
reg   [0:0] icmp_ln117_reg_1029_pp0_iter3_reg;
reg   [30:0] i_reg_235;
wire   [31:0] grp_fu_264_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] tobool_i_i_fu_285_p2;
wire   [30:0] add_ln64_fu_291_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
reg    ap_predicate_op141_write_state7;
reg    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln64_fu_301_p2;
reg   [0:0] icmp_ln64_reg_984_pp0_iter1_reg;
reg   [0:0] icmp_ln64_reg_984_pp0_iter2_reg;
reg   [127:0] tmp_7_reg_988;
reg   [127:0] tmp_7_reg_988_pp0_iter2_reg;
reg   [127:0] tmp_7_reg_988_pp0_iter3_reg;
wire   [0:0] and_ln84_fu_379_p2;
reg   [0:0] and_ln84_reg_997;
reg   [0:0] and_ln84_reg_997_pp0_iter2_reg;
reg   [0:0] and_ln84_reg_997_pp0_iter3_reg;
wire   [0:0] icmp_ln90_fu_391_p2;
reg   [0:0] icmp_ln90_reg_1003;
reg   [0:0] icmp_ln90_reg_1003_pp0_iter2_reg;
reg   [7:0] buffer0_i_i_addr_reg_1007;
reg   [7:0] buffer1_i_i_addr_reg_1013;
wire   [0:0] icmp_ln101_fu_406_p2;
reg   [0:0] icmp_ln101_reg_1019;
reg   [0:0] icmp_ln101_reg_1019_pp0_iter2_reg;
reg   [0:0] icmp_ln101_reg_1019_pp0_iter3_reg;
wire   [0:0] icmp_ln105_fu_412_p2;
reg   [0:0] icmp_ln105_reg_1024;
reg   [0:0] icmp_ln105_reg_1024_pp0_iter2_reg;
reg   [0:0] icmp_ln105_reg_1024_pp0_iter3_reg;
wire   [0:0] icmp_ln117_fu_518_p2;
reg   [0:0] icmp_ln117_reg_1029_pp0_iter2_reg;
wire   [127:0] buffer0_i_i_q0;
reg    ap_enable_reg_pp0_iter3;
wire   [127:0] buffer1_i_i_q0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_enable_reg_pp0_iter2;
reg    ap_condition_pp0_exit_iter1_state4;
reg    buffer0_i_i_ce0;
reg    buffer0_i_i_ce1;
reg    buffer0_i_i_we1;
reg    buffer1_i_i_ce0;
reg    buffer1_i_i_ce1;
reg    buffer1_i_i_we1;
wire   [127:0] ap_phi_reg_pp0_iter0_pix_b0_reg_246;
reg   [127:0] ap_phi_reg_pp0_iter1_pix_b0_reg_246;
reg   [127:0] ap_phi_reg_pp0_iter2_pix_b0_reg_246;
reg   [127:0] ap_phi_reg_pp0_iter3_pix_b0_reg_246;
reg   [127:0] ap_phi_reg_pp0_iter4_pix_b0_reg_246;
wire   [127:0] ap_phi_reg_pp0_iter0_pix_b1_reg_255;
reg   [127:0] ap_phi_reg_pp0_iter1_pix_b1_reg_255;
reg   [127:0] ap_phi_reg_pp0_iter2_pix_b1_reg_255;
reg   [127:0] ap_phi_reg_pp0_iter3_pix_b1_reg_255;
reg   [127:0] ap_phi_reg_pp0_iter4_pix_b1_reg_255;
wire   [63:0] idxprom_i_i_fu_397_p1;
reg   [31:0] empty_fu_90;
reg   [31:0] empty_81_fu_94;
reg   [31:0] empty_82_fu_98;
reg   [31:0] empty_83_fu_102;
wire   [31:0] trunc_ln119_4_fu_667_p1;
reg   [31:0] empty_84_fu_106;
reg   [31:0] empty_85_fu_110;
reg   [31:0] empty_86_fu_114;
reg   [31:0] empty_87_fu_118;
wire   [31:0] trunc_ln119_fu_633_p1;
reg   [31:0] empty_88_fu_122;
reg   [31:0] empty_89_fu_126;
reg   [31:0] empty_90_fu_130;
reg   [31:0] empty_91_fu_134;
wire   [31:0] trunc_ln118_fu_599_p1;
reg   [31:0] pin_row_fu_138;
wire   [31:0] pin_row_7_fu_502_p3;
reg    ap_block_state1;
reg   [31:0] odd_col_fu_142;
wire   [31:0] odd_col_3_fu_470_p3;
reg   [31:0] pin_col_fu_146;
wire   [31:0] pin_col_2_fu_510_p3;
reg   [127:0] p0_fu_150;
wire   [127:0] p0_2_fu_558_p3;
reg   [127:0] p1_fu_154;
reg   [127:0] p2_fu_158;
wire   [127:0] p2_2_fu_572_p3;
reg   [127:0] p3_fu_162;
wire   [511:0] or_ln174_2_fu_701_p5;
reg    ap_block_pp0_stage0_01001;
wire   [511:0] or_ln174_4_i_i_fu_810_p14;
wire   [31:0] i_cast_fu_297_p1;
wire   [0:0] empty_93_fu_316_p1;
wire   [31:0] p_and_f_fu_331_p3;
wire   [0:0] tmp_fu_323_p3;
wire   [31:0] sub_ln81_fu_339_p2;
wire   [31:0] row_write_fu_345_p3;
wire   [30:0] tmp_5_fu_363_p4;
wire   [0:0] icmp_ln84_fu_357_p2;
wire   [0:0] icmp_ln84_1_fu_373_p2;
wire   [1:0] trunc_ln45_fu_353_p1;
wire   [31:0] add_ln110_fu_424_p2;
wire   [0:0] trunc_ln110_fu_438_p1;
wire   [0:0] empty_92_fu_312_p1;
wire   [0:0] xor_ln110_fu_450_p2;
wire   [31:0] p_and_t4_fu_456_p3;
wire   [0:0] tmp_6_fu_430_p3;
wire   [31:0] sub_ln110_fu_464_p2;
wire   [31:0] p_and_f2_fu_442_p3;
wire   [31:0] pin_col_1_fu_418_p2;
wire  signed [31:0] icmp_ln111_fu_478_p1;
wire   [31:0] pin_row_5_fu_483_p2;
wire  signed [31:0] icmp_ln114_fu_489_p1;
wire   [0:0] icmp_ln114_fu_489_p2;
wire   [0:0] icmp_ln111_fu_478_p2;
wire   [31:0] pin_row_6_fu_494_p3;
wire   [31:0] send_frame_fu_385_p2;
wire   [127:0] p0_1_fu_551_p3;
wire   [127:0] p2_1_fu_565_p3;
reg    grp_fu_264_ce;
wire    ap_CS_fsm_state8;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_171;
reg    ap_condition_166;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

k_conv2D_pool_cvt_buffer0_i_i #(
    .DataWidth( 128 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
buffer0_i_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer0_i_i_addr_reg_1007),
    .ce0(buffer0_i_i_ce0),
    .q0(buffer0_i_i_q0),
    .address1(buffer0_i_i_addr_reg_1007),
    .ce1(buffer0_i_i_ce1),
    .we1(buffer0_i_i_we1),
    .d1(tmp_7_reg_988)
);

k_conv2D_pool_cvt_buffer0_i_i #(
    .DataWidth( 128 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
buffer1_i_i_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buffer1_i_i_addr_reg_1013),
    .ce0(buffer1_i_i_ce0),
    .q0(buffer1_i_i_q0),
    .address1(buffer1_i_i_addr_reg_1013),
    .ce1(buffer1_i_i_ce1),
    .we1(buffer1_i_i_we1),
    .d1(tmp_7_reg_988)
);

k_conv2D_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U456(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(W),
    .din1(H),
    .ce(grp_fu_264_ce),
    .dout(grp_fu_264_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter1_state4)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((1'b1 == ap_condition_166)) begin
            ap_phi_reg_pp0_iter4_pix_b0_reg_246 <= buffer0_i_i_q0;
        end else if ((1'b1 == ap_condition_171)) begin
            ap_phi_reg_pp0_iter4_pix_b0_reg_246 <= tmp_7_reg_988_pp0_iter2_reg;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_pix_b0_reg_246 <= ap_phi_reg_pp0_iter3_pix_b0_reg_246;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((1'b1 == ap_condition_166)) begin
            ap_phi_reg_pp0_iter4_pix_b1_reg_255 <= tmp_7_reg_988_pp0_iter2_reg;
        end else if ((1'b1 == ap_condition_171)) begin
            ap_phi_reg_pp0_iter4_pix_b1_reg_255 <= buffer1_i_i_q0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_pix_b1_reg_255 <= ap_phi_reg_pp0_iter3_pix_b1_reg_255;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_301_p2 == 1'd1))) begin
        i_reg_235 <= add_ln64_fu_291_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_235 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        odd_col_fu_142 <= 32'd0;
    end else if (((tobool_i_i_reg_975 == 1'd0) & (icmp_ln64_reg_984 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        odd_col_fu_142 <= odd_col_3_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pin_col_fu_146 <= 32'd0;
    end else if (((tobool_i_i_reg_975 == 1'd0) & (icmp_ln64_reg_984 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pin_col_fu_146 <= pin_col_2_fu_510_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        pin_row_fu_138 <= 32'd0;
    end else if (((tobool_i_i_reg_975 == 1'd0) & (icmp_ln64_reg_984 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pin_row_fu_138 <= pin_row_7_fu_502_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tobool_i_i_reg_975 == 1'd0) & (icmp_ln64_reg_984 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln84_reg_997 <= and_ln84_fu_379_p2;
        buffer0_i_i_addr_reg_1007 <= idxprom_i_i_fu_397_p1;
        buffer1_i_i_addr_reg_1013 <= idxprom_i_i_fu_397_p1;
        icmp_ln101_reg_1019 <= icmp_ln101_fu_406_p2;
        icmp_ln105_reg_1024 <= icmp_ln105_fu_412_p2;
        icmp_ln117_reg_1029 <= icmp_ln117_fu_518_p2;
        icmp_ln90_reg_1003 <= icmp_ln90_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln84_reg_997_pp0_iter2_reg <= and_ln84_reg_997;
        and_ln84_reg_997_pp0_iter3_reg <= and_ln84_reg_997_pp0_iter2_reg;
        icmp_ln101_reg_1019_pp0_iter2_reg <= icmp_ln101_reg_1019;
        icmp_ln101_reg_1019_pp0_iter3_reg <= icmp_ln101_reg_1019_pp0_iter2_reg;
        icmp_ln105_reg_1024_pp0_iter2_reg <= icmp_ln105_reg_1024;
        icmp_ln105_reg_1024_pp0_iter3_reg <= icmp_ln105_reg_1024_pp0_iter2_reg;
        icmp_ln117_reg_1029_pp0_iter2_reg <= icmp_ln117_reg_1029;
        icmp_ln117_reg_1029_pp0_iter3_reg <= icmp_ln117_reg_1029_pp0_iter2_reg;
        icmp_ln64_reg_984_pp0_iter2_reg <= icmp_ln64_reg_984_pp0_iter1_reg;
        icmp_ln90_reg_1003_pp0_iter2_reg <= icmp_ln90_reg_1003;
        tmp_7_reg_988_pp0_iter2_reg <= tmp_7_reg_988;
        tmp_7_reg_988_pp0_iter3_reg <= tmp_7_reg_988_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_pix_b0_reg_246 <= ap_phi_reg_pp0_iter0_pix_b0_reg_246;
        ap_phi_reg_pp0_iter1_pix_b1_reg_255 <= ap_phi_reg_pp0_iter0_pix_b1_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_pix_b0_reg_246 <= ap_phi_reg_pp0_iter1_pix_b0_reg_246;
        ap_phi_reg_pp0_iter2_pix_b1_reg_255 <= ap_phi_reg_pp0_iter1_pix_b1_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_reg_pp0_iter3_pix_b0_reg_246 <= ap_phi_reg_pp0_iter2_pix_b0_reg_246;
        ap_phi_reg_pp0_iter3_pix_b1_reg_255 <= ap_phi_reg_pp0_iter2_pix_b1_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln117_reg_1029_pp0_iter3_reg == 1'd0) & (tobool_i_i_reg_975 == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_81_fu_94 <= {{ap_phi_reg_pp0_iter4_pix_b1_reg_255[95:64]}};
        empty_82_fu_98 <= {{ap_phi_reg_pp0_iter4_pix_b1_reg_255[63:32]}};
        empty_83_fu_102 <= trunc_ln119_4_fu_667_p1;
        empty_84_fu_106 <= {{p2_2_fu_572_p3[127:96]}};
        empty_85_fu_110 <= {{p2_2_fu_572_p3[95:64]}};
        empty_86_fu_114 <= {{p2_2_fu_572_p3[63:32]}};
        empty_87_fu_118 <= trunc_ln119_fu_633_p1;
        empty_88_fu_122 <= {{ap_phi_reg_pp0_iter4_pix_b0_reg_246[127:96]}};
        empty_89_fu_126 <= {{ap_phi_reg_pp0_iter4_pix_b0_reg_246[95:64]}};
        empty_90_fu_130 <= {{ap_phi_reg_pp0_iter4_pix_b0_reg_246[63:32]}};
        empty_91_fu_134 <= trunc_ln118_fu_599_p1;
        empty_fu_90 <= {{ap_phi_reg_pp0_iter4_pix_b1_reg_255[127:96]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_984 <= icmp_ln64_fu_301_p2;
        icmp_ln64_reg_984_pp0_iter1_reg <= icmp_ln64_reg_984;
    end
end

always @ (posedge ap_clk) begin
    if (((tobool_i_i_reg_975 == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p0_fu_150 <= p0_2_fu_558_p3;
        p1_fu_154 <= ap_phi_reg_pp0_iter4_pix_b0_reg_246;
        p2_fu_158 <= p2_2_fu_572_p3;
        p3_fu_162 <= ap_phi_reg_pp0_iter4_pix_b1_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_984 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_7_reg_988 <= out_batch_norm_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tobool_i_i_reg_975 <= tobool_i_i_fu_285_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_condition_pp0_exit_iter1_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter1_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_fu_301_p2 == 1'd0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer0_i_i_ce0 = 1'b1;
    end else begin
        buffer0_i_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer0_i_i_ce1 = 1'b1;
    end else begin
        buffer0_i_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tobool_i_i_reg_975 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln90_reg_1003 == 1'd1) & (icmp_ln64_reg_984_pp0_iter1_reg == 1'd1))) begin
        buffer0_i_i_we1 = 1'b1;
    end else begin
        buffer0_i_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer1_i_i_ce0 = 1'b1;
    end else begin
        buffer1_i_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        buffer1_i_i_ce1 = 1'b1;
    end else begin
        buffer1_i_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tobool_i_i_reg_975 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln90_reg_1003 == 1'd0) & (icmp_ln64_reg_984_pp0_iter1_reg == 1'd1))) begin
        buffer1_i_i_we1 = 1'b1;
    end else begin
        buffer1_i_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_264_ce = 1'b1;
    end else begin
        grp_fu_264_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_984 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_batch_norm_blk_n = out_batch_norm_empty_n;
    end else begin
        out_batch_norm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_984 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_batch_norm_read = 1'b1;
    end else begin
        out_batch_norm_read = 1'b0;
    end
end

always @ (*) begin
    if ((((tobool_i_i_reg_975 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((icmp_ln117_reg_1029_pp0_iter3_reg == 1'd0) & (tobool_i_i_reg_975 == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        stream_pool_blk_n = stream_pool_full_n;
    end else begin
        stream_pool_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        if ((tobool_i_i_reg_975 == 1'd1)) begin
            stream_pool_din = or_ln174_4_i_i_fu_810_p14;
        end else if ((ap_predicate_op141_write_state7 == 1'b1)) begin
            stream_pool_din = or_ln174_2_fu_701_p5;
        end else begin
            stream_pool_din = 'bx;
        end
    end else begin
        stream_pool_din = 'bx;
    end
end

always @ (*) begin
    if ((((tobool_i_i_reg_975 == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op141_write_state7 == 1'b1)))) begin
        stream_pool_write = 1'b1;
    end else begin
        stream_pool_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0)) & ~((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln110_fu_424_p2 = (odd_col_fu_142 + 32'd1);

assign add_ln64_fu_291_p2 = (i_reg_235 + 31'd1);

assign and_ln84_fu_379_p2 = (icmp_ln84_fu_357_p2 & icmp_ln84_1_fu_373_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (((tobool_i_i_reg_975 == 1'd1) & (stream_pool_full_n == 1'b0)) | ((stream_pool_full_n == 1'b0) & (ap_predicate_op141_write_state7 == 1'b1)))) | ((icmp_ln64_reg_984 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_batch_norm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (((tobool_i_i_reg_975 == 1'd1) & (stream_pool_full_n == 1'b0)) | ((stream_pool_full_n == 1'b0) & (ap_predicate_op141_write_state7 == 1'b1)))) | ((icmp_ln64_reg_984 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_batch_norm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (((tobool_i_i_reg_975 == 1'd1) & (stream_pool_full_n == 1'b0)) | ((stream_pool_full_n == 1'b0) & (ap_predicate_op141_write_state7 == 1'b1)))) | ((icmp_ln64_reg_984 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (out_batch_norm_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln64_reg_984 == 1'd1) & (out_batch_norm_empty_n == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter4 = (((tobool_i_i_reg_975 == 1'd1) & (stream_pool_full_n == 1'b0)) | ((stream_pool_full_n == 1'b0) & (ap_predicate_op141_write_state7 == 1'b1)));
end

always @ (*) begin
    ap_condition_166 = ((tobool_i_i_reg_975 == 1'd0) & (icmp_ln90_reg_1003_pp0_iter2_reg == 1'd0) & (icmp_ln64_reg_984_pp0_iter2_reg == 1'd1));
end

always @ (*) begin
    ap_condition_171 = ((tobool_i_i_reg_975 == 1'd0) & (icmp_ln90_reg_1003_pp0_iter2_reg == 1'd1) & (icmp_ln64_reg_984_pp0_iter2_reg == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_pix_b0_reg_246 = 'bx;

assign ap_phi_reg_pp0_iter0_pix_b1_reg_255 = 'bx;

always @ (*) begin
    ap_predicate_op141_write_state7 = ((icmp_ln117_reg_1029_pp0_iter3_reg == 1'd0) & (tobool_i_i_reg_975 == 1'd0));
end

assign empty_92_fu_312_p1 = odd_col_fu_142[0:0];

assign empty_93_fu_316_p1 = pin_row_fu_138[0:0];

assign i_cast_fu_297_p1 = i_reg_235;

assign icmp_ln101_fu_406_p2 = ((pin_col_fu_146 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_412_p2 = ((pin_col_fu_146 != 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_478_p1 = W;

assign icmp_ln111_fu_478_p2 = ((pin_col_1_fu_418_p2 == icmp_ln111_fu_478_p1) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_489_p1 = H;

assign icmp_ln114_fu_489_p2 = ((pin_row_5_fu_483_p2 == icmp_ln114_fu_489_p1) ? 1'b1 : 1'b0);

assign icmp_ln117_fu_518_p2 = ((send_frame_fu_385_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_301_p2 = (($signed(i_cast_fu_297_p1) < $signed(grp_fu_264_p2)) ? 1'b1 : 1'b0);

assign icmp_ln84_1_fu_373_p2 = (($signed(tmp_5_fu_363_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_357_p2 = (($signed(pin_row_fu_138) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_391_p2 = ((trunc_ln45_fu_353_p1 == 2'd0) ? 1'b1 : 1'b0);

assign idxprom_i_i_fu_397_p1 = pin_col_fu_146;

assign odd_col_3_fu_470_p3 = ((tmp_6_fu_430_p3[0:0] == 1'b1) ? sub_ln110_fu_464_p2 : p_and_f2_fu_442_p3);

assign or_ln174_2_fu_701_p5 = {{{{ap_phi_reg_pp0_iter4_pix_b1_reg_255}, {p2_2_fu_572_p3}}, {ap_phi_reg_pp0_iter4_pix_b0_reg_246}}, {p0_2_fu_558_p3}};

assign or_ln174_4_i_i_fu_810_p14 = {{{{{{{{{{{{{empty_fu_90}, {empty_81_fu_94}}, {empty_82_fu_98}}, {empty_83_fu_102}}, {empty_84_fu_106}}, {empty_85_fu_110}}, {empty_86_fu_114}}, {empty_87_fu_118}}, {empty_88_fu_122}}, {empty_89_fu_126}}, {empty_90_fu_130}}, {empty_91_fu_134}}, {tmp_7_reg_988_pp0_iter3_reg}};

assign p0_1_fu_551_p3 = ((icmp_ln101_reg_1019_pp0_iter3_reg[0:0] == 1'b1) ? ap_phi_reg_pp0_iter4_pix_b0_reg_246 : p0_fu_150);

assign p0_2_fu_558_p3 = ((and_ln84_reg_997_pp0_iter3_reg[0:0] == 1'b1) ? p1_fu_154 : p0_1_fu_551_p3);

assign p2_1_fu_565_p3 = ((icmp_ln105_reg_1024_pp0_iter3_reg[0:0] == 1'b1) ? p2_fu_158 : ap_phi_reg_pp0_iter4_pix_b1_reg_255);

assign p2_2_fu_572_p3 = ((and_ln84_reg_997_pp0_iter3_reg[0:0] == 1'b1) ? p3_fu_162 : p2_1_fu_565_p3);

assign p_and_f2_fu_442_p3 = {{31'd0}, {trunc_ln110_fu_438_p1}};

assign p_and_f_fu_331_p3 = {{31'd0}, {empty_93_fu_316_p1}};

assign p_and_t4_fu_456_p3 = {{31'd0}, {xor_ln110_fu_450_p2}};

assign pin_col_1_fu_418_p2 = (pin_col_fu_146 + 32'd1);

assign pin_col_2_fu_510_p3 = ((icmp_ln111_fu_478_p2[0:0] == 1'b1) ? 32'd0 : pin_col_1_fu_418_p2);

assign pin_row_5_fu_483_p2 = (pin_row_fu_138 + 32'd1);

assign pin_row_6_fu_494_p3 = ((icmp_ln114_fu_489_p2[0:0] == 1'b1) ? 32'd0 : pin_row_5_fu_483_p2);

assign pin_row_7_fu_502_p3 = ((icmp_ln111_fu_478_p2[0:0] == 1'b1) ? pin_row_6_fu_494_p3 : pin_row_fu_138);

assign row_write_fu_345_p3 = ((tmp_fu_323_p3[0:0] == 1'b1) ? sub_ln81_fu_339_p2 : p_and_f_fu_331_p3);

assign send_frame_fu_385_p2 = (row_write_fu_345_p3 & odd_col_fu_142);

assign sub_ln110_fu_464_p2 = (32'd0 - p_and_t4_fu_456_p3);

assign sub_ln81_fu_339_p2 = (32'd0 - p_and_f_fu_331_p3);

assign tmp_5_fu_363_p4 = {{pin_col_fu_146[31:1]}};

assign tmp_6_fu_430_p3 = add_ln110_fu_424_p2[32'd31];

assign tmp_fu_323_p3 = pin_row_fu_138[32'd31];

assign tobool_i_i_fu_285_p2 = ((p_read == 32'd0) ? 1'b1 : 1'b0);

assign trunc_ln110_fu_438_p1 = add_ln110_fu_424_p2[0:0];

assign trunc_ln118_fu_599_p1 = ap_phi_reg_pp0_iter4_pix_b0_reg_246[31:0];

assign trunc_ln119_4_fu_667_p1 = ap_phi_reg_pp0_iter4_pix_b1_reg_255[31:0];

assign trunc_ln119_fu_633_p1 = p2_2_fu_572_p3[31:0];

assign trunc_ln45_fu_353_p1 = row_write_fu_345_p3[1:0];

assign xor_ln110_fu_450_p2 = (empty_92_fu_312_p1 ^ 1'd1);

endmodule //k_conv2D_pool_cvt
