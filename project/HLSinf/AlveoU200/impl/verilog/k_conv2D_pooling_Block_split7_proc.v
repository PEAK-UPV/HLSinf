// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module k_conv2D_pooling_Block_split7_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        enable_avgpooling,
        enable_maxpooling,
        W,
        H,
        cond1_out_out_din,
        cond1_out_out_full_n,
        cond1_out_out_write,
        HO_out_out_din,
        HO_out_out_full_n,
        HO_out_out_write,
        ap_return
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] enable_avgpooling;
input  [31:0] enable_maxpooling;
input  [31:0] W;
input  [31:0] H;
output  [31:0] cond1_out_out_din;
input   cond1_out_out_full_n;
output   cond1_out_out_write;
output  [31:0] HO_out_out_din;
input   HO_out_out_full_n;
output   HO_out_out_write;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg start_write;
reg cond1_out_out_write;
reg HO_out_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    cond1_out_out_blk_n;
wire    ap_CS_fsm_state3;
reg    HO_out_out_blk_n;
wire   [30:0] lshr_ln228_1_fu_88_p4;
wire   [30:0] lshr_ln229_1_fu_104_p4;
wire   [31:0] enable_pooling_fu_114_p2;
wire    ap_CS_fsm_state2;
reg    ap_block_state1;
reg    ap_block_state3;
wire   [31:0] sub_ln228_fu_82_p2;
wire   [31:0] sub_ln229_fu_98_p2;
wire   [31:0] add_ln228_fu_126_p2;
wire   [31:0] zext_ln228_fu_139_p1;
wire   [30:0] lshr_ln228_2_fu_148_p4;
wire   [0:0] tmp_fu_131_p3;
wire   [31:0] sub_ln228_1_fu_142_p2;
wire   [31:0] zext_ln228_1_fu_158_p1;
wire   [31:0] select_ln228_fu_162_p3;
wire   [31:0] add_ln229_fu_176_p2;
wire   [31:0] zext_ln229_fu_189_p1;
wire   [30:0] lshr_ln229_2_fu_198_p4;
wire   [0:0] tmp_4_fu_181_p3;
wire   [31:0] sub_ln229_1_fu_192_p2;
wire   [31:0] zext_ln229_1_fu_208_p1;
wire   [31:0] select_ln229_fu_212_p3;
wire   [0:0] icmp_ln228_fu_120_p2;
wire   [31:0] add_ln228_1_fu_170_p2;
wire   [31:0] add_ln229_1_fu_220_p2;
reg   [2:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((cond1_out_out_full_n == 1'b0) | (1'b0 == HO_out_out_full_n)) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        HO_out_out_blk_n = HO_out_out_full_n;
    end else begin
        HO_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cond1_out_out_full_n == 1'b0) | (1'b0 == HO_out_out_full_n)) & (1'b1 == ap_CS_fsm_state3))) begin
        HO_out_out_write = 1'b1;
    end else begin
        HO_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((cond1_out_out_full_n == 1'b0) | (1'b0 == HO_out_out_full_n)) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        cond1_out_out_blk_n = cond1_out_out_full_n;
    end else begin
        cond1_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((cond1_out_out_full_n == 1'b0) | (1'b0 == HO_out_out_full_n)) & (1'b1 == ap_CS_fsm_state3))) begin
        cond1_out_out_write = 1'b1;
    end else begin
        cond1_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((cond1_out_out_full_n == 1'b0) | (1'b0 == HO_out_out_full_n)) & (1'b1 == ap_CS_fsm_state3))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if ((~((cond1_out_out_full_n == 1'b0) | (1'b0 == HO_out_out_full_n)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HO_out_out_din = ((icmp_ln228_fu_120_p2[0:0] == 1'b1) ? H : add_ln229_1_fu_220_p2);

assign add_ln228_1_fu_170_p2 = (select_ln228_fu_162_p3 + 32'd1);

assign add_ln228_fu_126_p2 = ($signed(W) + $signed(32'd4294967294));

assign add_ln229_1_fu_220_p2 = (select_ln229_fu_212_p3 + 32'd1);

assign add_ln229_fu_176_p2 = ($signed(H) + $signed(32'd4294967294));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = ((cond1_out_out_full_n == 1'b0) | (1'b0 == HO_out_out_full_n));
end

assign ap_ready = internal_ap_ready;

assign ap_return = enable_pooling_fu_114_p2;

assign cond1_out_out_din = ((icmp_ln228_fu_120_p2[0:0] == 1'b1) ? W : add_ln228_1_fu_170_p2);

assign enable_pooling_fu_114_p2 = (enable_maxpooling | enable_avgpooling);

assign icmp_ln228_fu_120_p2 = ((enable_pooling_fu_114_p2 == 32'd0) ? 1'b1 : 1'b0);

assign lshr_ln228_1_fu_88_p4 = {{sub_ln228_fu_82_p2[31:1]}};

assign lshr_ln228_2_fu_148_p4 = {{add_ln228_fu_126_p2[31:1]}};

assign lshr_ln229_1_fu_104_p4 = {{sub_ln229_fu_98_p2[31:1]}};

assign lshr_ln229_2_fu_198_p4 = {{add_ln229_fu_176_p2[31:1]}};

assign select_ln228_fu_162_p3 = ((tmp_fu_131_p3[0:0] == 1'b1) ? sub_ln228_1_fu_142_p2 : zext_ln228_1_fu_158_p1);

assign select_ln229_fu_212_p3 = ((tmp_4_fu_181_p3[0:0] == 1'b1) ? sub_ln229_1_fu_192_p2 : zext_ln229_1_fu_208_p1);

assign start_out = real_start;

assign sub_ln228_1_fu_142_p2 = (32'd0 - zext_ln228_fu_139_p1);

assign sub_ln228_fu_82_p2 = (32'd2 - W);

assign sub_ln229_1_fu_192_p2 = (32'd0 - zext_ln229_fu_189_p1);

assign sub_ln229_fu_98_p2 = (32'd2 - H);

assign tmp_4_fu_181_p3 = add_ln229_fu_176_p2[32'd31];

assign tmp_fu_131_p3 = add_ln228_fu_126_p2[32'd31];

assign zext_ln228_1_fu_158_p1 = lshr_ln228_2_fu_148_p4;

assign zext_ln228_fu_139_p1 = lshr_ln228_1_fu_88_p4;

assign zext_ln229_1_fu_208_p1 = lshr_ln229_2_fu_198_p4;

assign zext_ln229_fu_189_p1 = lshr_ln229_1_fu_104_p4;

endmodule //k_conv2D_pooling_Block_split7_proc
