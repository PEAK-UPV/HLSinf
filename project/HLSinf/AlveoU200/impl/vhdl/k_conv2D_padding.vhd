-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k_conv2D_padding is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    W : IN STD_LOGIC_VECTOR (31 downto 0);
    I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_upper_padding_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_upper_padding_empty_n : IN STD_LOGIC;
    enable_upper_padding_read : OUT STD_LOGIC;
    enable_lower_padding_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_lower_padding_empty_n : IN STD_LOGIC;
    enable_lower_padding_read : OUT STD_LOGIC;
    out_read_data_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    out_read_data_1_empty_n : IN STD_LOGIC;
    out_read_data_1_read : OUT STD_LOGIC;
    str_pad_cvt_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    str_pad_cvt_full_n : IN STD_LOGIC;
    str_pad_cvt_write : OUT STD_LOGIC );
end;


architecture behav of k_conv2D_padding is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal enable_upper_padding_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal enable_lower_padding_blk_n : STD_LOGIC;
    signal out_read_data_1_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln38_reg_475 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_479 : STD_LOGIC_VECTOR (0 downto 0);
    signal str_pad_cvt_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln38_reg_475_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_i_i_reg_125 : STD_LOGIC_VECTOR (30 downto 0);
    signal w_reg_136 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln34_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln34_1_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln314_fu_223_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln314_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln314_1_fu_227_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln314_1_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal add5_i_i_i_i_fu_231_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add11_i_i_i_i_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_fu_241_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op72_read_state7 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln38_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_3_fu_350_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_2_fu_358_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln45_fu_366_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state6 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_empty_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_94_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_94_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_94_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_95_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_95_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_95_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_empty_96_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_empty_96_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_empty_96_reg_191 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln13_fu_247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln41_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal enable1_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal enable2_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_2_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_2_i_i_fu_306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_1_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_1_fu_331_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln51_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_2_fu_342_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_ce : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_163 : BOOLEAN;
    signal ap_condition_215 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component k_conv2D_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    mul_32s_32s_32_2_1_U83 : component k_conv2D_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln34_fu_202_p2,
        din1 => I_ITER,
        ce => ap_const_logic_1,
        dout => grp_fu_208_p2);

    mul_32s_32s_32_2_1_U84 : component k_conv2D_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_208_p2,
        din1 => add_ln34_1_fu_213_p2,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state6)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state6);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_empty_94_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_163)) then
                if (((icmp_ln45_fu_314_p2 = ap_const_lv1_0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_empty_94_reg_169 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_94_reg_169 <= ap_phi_reg_pp0_iter0_empty_94_reg_169;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_95_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_163)) then
                if (((icmp_ln45_fu_314_p2 = ap_const_lv1_0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_empty_95_reg_180 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_95_reg_180 <= ap_phi_reg_pp0_iter0_empty_95_reg_180;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_96_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_163)) then
                if (((icmp_ln45_fu_314_p2 = ap_const_lv1_0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_empty_96_reg_191 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_96_reg_191 <= ap_phi_reg_pp0_iter0_empty_96_reg_191;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_empty_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_163)) then
                if (((icmp_ln45_fu_314_p2 = ap_const_lv1_0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter1_empty_reg_158 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_empty_reg_158 <= ap_phi_reg_pp0_iter0_empty_reg_158;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_empty_94_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_215)) then
                if (((icmp_ln45_reg_479 = ap_const_lv1_1) and (icmp_ln38_reg_475 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter2_empty_94_reg_169 <= out_read_data_1_dout(95 downto 64);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_empty_94_reg_169 <= ap_phi_reg_pp0_iter1_empty_94_reg_169;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_empty_95_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_215)) then
                if (((icmp_ln45_reg_479 = ap_const_lv1_1) and (icmp_ln38_reg_475 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter2_empty_95_reg_180 <= out_read_data_1_dout(63 downto 32);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_empty_95_reg_180 <= ap_phi_reg_pp0_iter1_empty_95_reg_180;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_empty_96_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_215)) then
                if (((icmp_ln45_reg_479 = ap_const_lv1_1) and (icmp_ln38_reg_475 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter2_empty_96_reg_191 <= trunc_ln45_fu_366_p1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_empty_96_reg_191 <= ap_phi_reg_pp0_iter1_empty_96_reg_191;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter2_empty_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_215)) then
                if (((icmp_ln45_reg_479 = ap_const_lv1_1) and (icmp_ln38_reg_475 = ap_const_lv1_1))) then 
                    ap_phi_reg_pp0_iter2_empty_reg_158 <= out_read_data_1_dout(127 downto 96);
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_empty_reg_158 <= ap_phi_reg_pp0_iter1_empty_reg_158;
                end if;
            end if; 
        end if;
    end process;

    h_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                h_reg_147 <= h_3_fu_350_p3;
            elsif ((not(((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                h_reg_147 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    i_i_i_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_i_i_reg_125 <= add_ln38_fu_241_p2;
            elsif ((not(((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_i_i_reg_125 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    w_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                w_reg_136 <= w_2_fu_358_p3;
            elsif ((not(((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_reg_136 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln38_reg_475 <= icmp_ln38_fu_251_p2;
                icmp_ln38_reg_475_pp0_iter1_reg <= icmp_ln38_reg_475;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_1))) then
                icmp_ln45_reg_479 <= icmp_ln45_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                trunc_ln314_1_reg_450 <= trunc_ln314_1_fu_227_p1;
                trunc_ln314_reg_445 <= trunc_ln314_fu_223_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, enable_upper_padding_empty_n, enable_lower_padding_empty_n, ap_CS_fsm_state5, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, icmp_ln38_fu_251_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if ((not(((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln38_fu_251_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add11_i_i_i_i_fu_236_p2 <= std_logic_vector(unsigned(W) + unsigned(ap_const_lv32_1));
    add5_i_i_i_i_fu_231_p2 <= std_logic_vector(unsigned(rows) + unsigned(ap_const_lv32_1));
    add_ln34_1_fu_213_p2 <= std_logic_vector(unsigned(W) + unsigned(ap_const_lv32_2));
    add_ln34_fu_202_p2 <= std_logic_vector(unsigned(rows) + unsigned(ap_const_lv32_2));
    add_ln38_fu_241_p2 <= std_logic_vector(unsigned(i_i_i_reg_125) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(out_read_data_1_empty_n, str_pad_cvt_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln38_reg_475_pp0_iter1_reg, ap_predicate_op72_read_state7)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln38_reg_475_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (str_pad_cvt_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_read_data_1_empty_n = ap_const_logic_0) and (ap_predicate_op72_read_state7 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(out_read_data_1_empty_n, str_pad_cvt_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln38_reg_475_pp0_iter1_reg, ap_predicate_op72_read_state7)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln38_reg_475_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (str_pad_cvt_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_read_data_1_empty_n = ap_const_logic_0) and (ap_predicate_op72_read_state7 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(out_read_data_1_empty_n, str_pad_cvt_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln38_reg_475_pp0_iter1_reg, ap_predicate_op72_read_state7)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln38_reg_475_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (str_pad_cvt_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_read_data_1_empty_n = ap_const_logic_0) and (ap_predicate_op72_read_state7 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(enable_upper_padding_empty_n, enable_lower_padding_empty_n)
    begin
                ap_block_state5 <= ((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter1_assign_proc : process(out_read_data_1_empty_n, ap_predicate_op72_read_state7)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((out_read_data_1_empty_n = ap_const_logic_0) and (ap_predicate_op72_read_state7 = ap_const_boolean_1));
    end process;


    ap_block_state8_pp0_stage0_iter2_assign_proc : process(str_pad_cvt_full_n, icmp_ln38_reg_475_pp0_iter1_reg)
    begin
                ap_block_state8_pp0_stage0_iter2 <= ((icmp_ln38_reg_475_pp0_iter1_reg = ap_const_lv1_1) and (str_pad_cvt_full_n = ap_const_logic_0));
    end process;


    ap_condition_163_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_163 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_215_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_215 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state6_assign_proc : process(icmp_ln38_fu_251_p2)
    begin
        if ((icmp_ln38_fu_251_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_empty_94_reg_169 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_95_reg_180 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_96_reg_191 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_empty_reg_158 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op72_read_state7_assign_proc : process(icmp_ln38_reg_475, icmp_ln45_reg_479)
    begin
                ap_predicate_op72_read_state7 <= ((icmp_ln45_reg_479 = ap_const_lv1_1) and (icmp_ln38_reg_475 = ap_const_lv1_1));
    end process;

    ap_ready <= internal_ap_ready;
    enable1_fu_262_p2 <= (trunc_ln314_reg_445 and icmp_ln41_fu_256_p2);
    enable2_fu_272_p2 <= (trunc_ln314_1_reg_450 and icmp_ln42_fu_267_p2);

    enable_lower_padding_blk_n_assign_proc : process(enable_lower_padding_empty_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            enable_lower_padding_blk_n <= enable_lower_padding_empty_n;
        else 
            enable_lower_padding_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    enable_lower_padding_read_assign_proc : process(enable_upper_padding_empty_n, enable_lower_padding_empty_n, ap_CS_fsm_state5)
    begin
        if ((not(((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            enable_lower_padding_read <= ap_const_logic_1;
        else 
            enable_lower_padding_read <= ap_const_logic_0;
        end if; 
    end process;


    enable_upper_padding_blk_n_assign_proc : process(enable_upper_padding_empty_n, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            enable_upper_padding_blk_n <= enable_upper_padding_empty_n;
        else 
            enable_upper_padding_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    enable_upper_padding_read_assign_proc : process(enable_upper_padding_empty_n, enable_lower_padding_empty_n, ap_CS_fsm_state5)
    begin
        if ((not(((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            enable_upper_padding_read <= ap_const_logic_1;
        else 
            enable_upper_padding_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_219_ce_assign_proc : process(enable_upper_padding_empty_n, enable_lower_padding_empty_n, ap_CS_fsm_state5, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (not(((enable_lower_padding_empty_n = ap_const_logic_0) or (enable_upper_padding_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            grp_fu_219_ce <= ap_const_logic_1;
        else 
            grp_fu_219_ce <= ap_const_logic_0;
        end if; 
    end process;

    h_1_fu_331_p2 <= std_logic_vector(unsigned(h_reg_147) + unsigned(ap_const_lv32_1));
    h_2_fu_342_p3 <= 
        ap_const_lv32_0 when (icmp_ln51_fu_337_p2(0) = '1') else 
        h_1_fu_331_p2;
    h_3_fu_350_p3 <= 
        h_2_fu_342_p3 when (icmp_ln48_fu_326_p2(0) = '1') else 
        h_reg_147;
    icmp_ln38_fu_251_p2 <= "1" when (signed(zext_ln13_fu_247_p1) < signed(grp_fu_219_p2)) else "0";
    icmp_ln41_fu_256_p2 <= "1" when (h_reg_147 = ap_const_lv32_0) else "0";
    icmp_ln42_fu_267_p2 <= "1" when (h_reg_147 = add5_i_i_i_i_fu_231_p2) else "0";
    icmp_ln43_fu_277_p2 <= "1" when (w_reg_136 = ap_const_lv32_0) else "0";
    icmp_ln44_fu_283_p2 <= "1" when (w_reg_136 = add11_i_i_i_i_fu_236_p2) else "0";
    icmp_ln45_fu_314_p2 <= "1" when (or_ln45_2_i_i_fu_306_p3 = ap_const_lv32_0) else "0";
    icmp_ln48_fu_326_p2 <= "1" when (w_1_fu_320_p2 = add_ln34_1_fu_213_p2) else "0";
    icmp_ln51_fu_337_p2 <= "1" when (h_1_fu_331_p2 = add_ln34_fu_202_p2) else "0";

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    or_ln45_1_fu_294_p2 <= (enable2_fu_272_p2 or enable1_fu_262_p2);
    or_ln45_2_fu_300_p2 <= (or_ln45_fu_288_p2 or or_ln45_1_fu_294_p2);
    or_ln45_2_i_i_fu_306_p3 <= (ap_const_lv31_0 & or_ln45_2_fu_300_p2);
    or_ln45_fu_288_p2 <= (icmp_ln44_fu_283_p2 or icmp_ln43_fu_277_p2);

    out_read_data_1_blk_n_assign_proc : process(out_read_data_1_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln38_reg_475, icmp_ln45_reg_479)
    begin
        if (((icmp_ln45_reg_479 = ap_const_lv1_1) and (icmp_ln38_reg_475 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_read_data_1_blk_n <= out_read_data_1_empty_n;
        else 
            out_read_data_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_read_data_1_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op72_read_state7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op72_read_state7 = ap_const_boolean_1))) then 
            out_read_data_1_read <= ap_const_logic_1;
        else 
            out_read_data_1_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    str_pad_cvt_blk_n_assign_proc : process(str_pad_cvt_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln38_reg_475_pp0_iter1_reg)
    begin
        if (((icmp_ln38_reg_475_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            str_pad_cvt_blk_n <= str_pad_cvt_full_n;
        else 
            str_pad_cvt_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    str_pad_cvt_din <= (((ap_phi_reg_pp0_iter2_empty_reg_158 & ap_phi_reg_pp0_iter2_empty_94_reg_169) & ap_phi_reg_pp0_iter2_empty_95_reg_180) & ap_phi_reg_pp0_iter2_empty_96_reg_191);

    str_pad_cvt_write_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln38_reg_475_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln38_reg_475_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            str_pad_cvt_write <= ap_const_logic_1;
        else 
            str_pad_cvt_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln314_1_fu_227_p1 <= enable_lower_padding_dout(1 - 1 downto 0);
    trunc_ln314_fu_223_p1 <= enable_upper_padding_dout(1 - 1 downto 0);
    trunc_ln45_fu_366_p1 <= out_read_data_1_dout(32 - 1 downto 0);
    w_1_fu_320_p2 <= std_logic_vector(unsigned(w_reg_136) + unsigned(ap_const_lv32_1));
    w_2_fu_358_p3 <= 
        ap_const_lv32_0 when (icmp_ln48_fu_326_p2(0) = '1') else 
        w_1_fu_320_p2;
    zext_ln13_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_i_i_reg_125),32));
end behav;
