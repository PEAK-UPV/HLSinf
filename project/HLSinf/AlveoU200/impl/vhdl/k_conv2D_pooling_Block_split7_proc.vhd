-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k_conv2D_pooling_Block_split7_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    enable_avgpooling : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_maxpooling : IN STD_LOGIC_VECTOR (31 downto 0);
    W : IN STD_LOGIC_VECTOR (31 downto 0);
    H : IN STD_LOGIC_VECTOR (31 downto 0);
    cond1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    cond1_out_out_full_n : IN STD_LOGIC;
    cond1_out_out_write : OUT STD_LOGIC;
    HO_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    HO_out_out_full_n : IN STD_LOGIC;
    HO_out_out_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k_conv2D_pooling_Block_split7_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal cond1_out_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal HO_out_out_blk_n : STD_LOGIC;
    signal lshr_ln228_1_fu_88_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal lshr_ln229_1_fu_104_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal enable_pooling_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state3 : BOOLEAN;
    signal sub_ln228_fu_82_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln229_fu_98_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln228_fu_126_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln228_fu_139_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln228_2_fu_148_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_131_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln228_1_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln228_1_fu_158_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln228_fu_162_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln229_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln229_fu_189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln229_2_fu_198_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_4_fu_181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln229_1_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln229_1_fu_208_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln229_fu_212_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln228_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln228_1_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln229_1_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((cond1_out_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = HO_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, cond1_out_out_full_n, HO_out_out_full_n, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((cond1_out_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = HO_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    HO_out_out_blk_n_assign_proc : process(HO_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            HO_out_out_blk_n <= HO_out_out_full_n;
        else 
            HO_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    HO_out_out_din <= 
        H when (icmp_ln228_fu_120_p2(0) = '1') else 
        add_ln229_1_fu_220_p2;

    HO_out_out_write_assign_proc : process(cond1_out_out_full_n, HO_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((cond1_out_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = HO_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            HO_out_out_write <= ap_const_logic_1;
        else 
            HO_out_out_write <= ap_const_logic_0;
        end if; 
    end process;

    add_ln228_1_fu_170_p2 <= std_logic_vector(unsigned(select_ln228_fu_162_p3) + unsigned(ap_const_lv32_1));
    add_ln228_fu_126_p2 <= std_logic_vector(unsigned(W) + unsigned(ap_const_lv32_FFFFFFFE));
    add_ln229_1_fu_220_p2 <= std_logic_vector(unsigned(select_ln229_fu_212_p3) + unsigned(ap_const_lv32_1));
    add_ln229_fu_176_p2 <= std_logic_vector(unsigned(H) + unsigned(ap_const_lv32_FFFFFFFE));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_assign_proc : process(cond1_out_out_full_n, HO_out_out_full_n)
    begin
                ap_block_state3 <= ((cond1_out_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = HO_out_out_full_n));
    end process;


    ap_done_assign_proc : process(ap_done_reg, cond1_out_out_full_n, HO_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((cond1_out_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = HO_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    ap_return <= enable_pooling_fu_114_p2;

    cond1_out_out_blk_n_assign_proc : process(cond1_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cond1_out_out_blk_n <= cond1_out_out_full_n;
        else 
            cond1_out_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    cond1_out_out_din <= 
        W when (icmp_ln228_fu_120_p2(0) = '1') else 
        add_ln228_1_fu_170_p2;

    cond1_out_out_write_assign_proc : process(cond1_out_out_full_n, HO_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((cond1_out_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = HO_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            cond1_out_out_write <= ap_const_logic_1;
        else 
            cond1_out_out_write <= ap_const_logic_0;
        end if; 
    end process;

    enable_pooling_fu_114_p2 <= (enable_maxpooling or enable_avgpooling);
    icmp_ln228_fu_120_p2 <= "1" when (enable_pooling_fu_114_p2 = ap_const_lv32_0) else "0";

    internal_ap_ready_assign_proc : process(cond1_out_out_full_n, HO_out_out_full_n, ap_CS_fsm_state3)
    begin
        if ((not(((cond1_out_out_full_n = ap_const_logic_0) or (ap_const_logic_0 = HO_out_out_full_n))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln228_1_fu_88_p4 <= sub_ln228_fu_82_p2(31 downto 1);
    lshr_ln228_2_fu_148_p4 <= add_ln228_fu_126_p2(31 downto 1);
    lshr_ln229_1_fu_104_p4 <= sub_ln229_fu_98_p2(31 downto 1);
    lshr_ln229_2_fu_198_p4 <= add_ln229_fu_176_p2(31 downto 1);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln228_fu_162_p3 <= 
        sub_ln228_1_fu_142_p2 when (tmp_fu_131_p3(0) = '1') else 
        zext_ln228_1_fu_158_p1;
    select_ln229_fu_212_p3 <= 
        sub_ln229_1_fu_192_p2 when (tmp_4_fu_181_p3(0) = '1') else 
        zext_ln229_1_fu_208_p1;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln228_1_fu_142_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln228_fu_139_p1));
    sub_ln228_fu_82_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) - unsigned(W));
    sub_ln229_1_fu_192_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln229_fu_189_p1));
    sub_ln229_fu_98_p2 <= std_logic_vector(unsigned(ap_const_lv32_2) - unsigned(H));
    tmp_4_fu_181_p3 <= add_ln229_fu_176_p2(31 downto 31);
    tmp_fu_131_p3 <= add_ln228_fu_126_p2(31 downto 31);
    zext_ln228_1_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln228_2_fu_148_p4),32));
    zext_ln228_fu_139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln228_1_fu_88_p4),32));
    zext_ln229_1_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln229_2_fu_198_p4),32));
    zext_ln229_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln229_1_fu_104_p4),32));
end behav;
