-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k_conv2D_input_buffer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    enable_upper_padding : IN STD_LOGIC_VECTOR (31 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_lower_padding : IN STD_LOGIC_VECTOR (31 downto 0);
    W : IN STD_LOGIC_VECTOR (31 downto 0);
    I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
    I : IN STD_LOGIC_VECTOR (31 downto 0);
    o_iter_dout : IN STD_LOGIC_VECTOR (30 downto 0);
    o_iter_empty_n : IN STD_LOGIC;
    o_iter_read : OUT STD_LOGIC;
    o_iter_last : IN STD_LOGIC_VECTOR (31 downto 0);
    o_iter_first : IN STD_LOGIC_VECTOR (31 downto 0);
    o_iter_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
    o_iter_out_full_n : IN STD_LOGIC;
    o_iter_out_write : OUT STD_LOGIC;
    out_read_data_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    out_read_data_empty_n : IN STD_LOGIC;
    out_read_data_read : OUT STD_LOGIC;
    out_read_data_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_read_data_1_full_n : IN STD_LOGIC;
    out_read_data_1_write : OUT STD_LOGIC );
end;


architecture behav of k_conv2D_input_buffer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_10001 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal o_iter_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal o_iter_out_blk_n : STD_LOGIC;
    signal out_read_data_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal and_ln169_reg_468 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_read_data_1_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal p_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_i_fu_304_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_320_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln168_1_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln168_1_reg_464 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln169_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln88_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln88_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln88_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_reg_481 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln88_reg_481_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal buffer_i_i_i_address0 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_i_i_i_ce0 : STD_LOGIC;
    signal buffer_i_i_i_we0 : STD_LOGIC;
    signal buffer_i_i_i_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buffer_i_i_i_ce1 : STD_LOGIC;
    signal buffer_i_i_i_q1 : STD_LOGIC_VECTOR (127 downto 0);
    signal px_buff_07_i_i_i_fu_94 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_fu_98 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal cmp10_i_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp11_i_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp10_i_cast_fu_221_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal cmp11_i_cast_fu_231_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_fu_235_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp1_cast_fu_241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_251_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_neg9_i_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr10_cast_cast_i_fu_270_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_lshr10_cast_cast_i_cast_fu_280_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_f12_cast_cast_i_fu_290_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_9_fu_256_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t11_i_fu_284_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_f12_cast_cast_i_cast_fu_300_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sub_ln87_fu_336_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln168_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp21_i_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln168_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp18_i_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln169_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_320_ce : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component k_conv2D_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k_conv2D_mul_32s_31s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k_conv2D_input_buffer_buffer_i_i_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    buffer_i_i_i_U : component k_conv2D_input_buffer_buffer_i_i_i
    generic map (
        DataWidth => 128,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer_i_i_i_address0,
        ce0 => buffer_i_i_i_ce0,
        we0 => buffer_i_i_i_we0,
        d0 => tmp_fu_98,
        address1 => buffer_i_i_i_address1,
        ce1 => buffer_i_i_i_ce1,
        q1 => buffer_i_i_i_q1);

    mul_32s_32s_32_2_1_U63 : component k_conv2D_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_251_p0,
        din1 => W,
        ce => ap_const_logic_1,
        dout => grp_fu_251_p2);

    mul_32s_31s_32_2_1_U64 : component k_conv2D_mul_32s_31s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 31,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_251_p2,
        din1 => div_i_fu_304_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_315_p2);

    mul_32s_32s_32_2_1_U65 : component k_conv2D_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_251_p2,
        din1 => I_ITER,
        ce => grp_fu_320_ce,
        dout => grp_fu_320_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((o_iter_out_full_n = ap_const_logic_0) or (o_iter_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((o_iter_out_full_n = ap_const_logic_0) or (o_iter_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    p_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln88_fu_378_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                p_reg_204 <= add_ln88_fu_372_p2;
            elsif ((not(((o_iter_out_full_n = ap_const_logic_0) or (o_iter_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_reg_204 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                and_ln168_1_reg_464 <= and_ln168_1_fu_354_p2;
                and_ln169_reg_468 <= and_ln169_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln169_reg_468) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                px_buff_07_i_i_i_fu_94 <= buffer_i_i_i_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln169_reg_468) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_fu_98 <= out_read_data_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln88_fu_378_p2 = ap_const_lv1_0))) then
                    zext_ln88_reg_481(31 downto 0) <= zext_ln88_fu_383_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln88_reg_481_pp0_iter1_reg(31 downto 0) <= zext_ln88_reg_481(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln88_reg_481(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln88_reg_481_pp0_iter1_reg(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, o_iter_empty_n, o_iter_out_full_n, ap_CS_fsm_state6, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, icmp_ln88_fu_378_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if ((not(((o_iter_out_full_n = ap_const_logic_0) or (o_iter_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln88_fu_378_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln88_fu_378_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln88_fu_372_p2 <= std_logic_vector(unsigned(p_reg_204) + unsigned(ap_const_lv32_1));
    and_ln168_1_fu_354_p2 <= (cmp18_i_fu_325_p2 and and_ln168_fu_348_p2);
    and_ln168_fu_348_p2 <= (icmp_ln168_fu_330_p2 and cmp21_i_fu_342_p2);
    and_ln169_fu_366_p2 <= (icmp_ln169_fu_360_p2 and cmp18_i_fu_325_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(out_read_data_empty_n, out_read_data_1_full_n, ap_enable_reg_pp0_iter1, and_ln169_reg_468, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_const_lv1_1 = and_ln169_reg_468) and (out_read_data_1_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = and_ln169_reg_468) and (out_read_data_1_full_n = ap_const_logic_0)))) or ((ap_const_lv1_0 = and_ln169_reg_468) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_read_data_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(out_read_data_empty_n, out_read_data_1_full_n, ap_enable_reg_pp0_iter1, and_ln169_reg_468, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_const_lv1_1 = and_ln169_reg_468) and (out_read_data_1_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = and_ln169_reg_468) and (out_read_data_1_full_n = ap_const_logic_0)))) or ((ap_const_lv1_0 = and_ln169_reg_468) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_read_data_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(out_read_data_empty_n, out_read_data_1_full_n, ap_enable_reg_pp0_iter1, and_ln169_reg_468, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((ap_const_lv1_1 = and_ln169_reg_468) and (out_read_data_1_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = and_ln169_reg_468) and (out_read_data_1_full_n = ap_const_logic_0)))) or ((ap_const_lv1_0 = and_ln169_reg_468) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_read_data_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(o_iter_empty_n, o_iter_out_full_n)
    begin
                ap_block_state6 <= ((o_iter_out_full_n = ap_const_logic_0) or (o_iter_empty_n = ap_const_logic_0));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter1_assign_proc : process(out_read_data_empty_n, and_ln169_reg_468)
    begin
                ap_block_state8_pp0_stage0_iter1 <= ((ap_const_lv1_0 = and_ln169_reg_468) and (out_read_data_empty_n = ap_const_logic_0));
    end process;


    ap_block_state9_pp0_stage0_iter2_assign_proc : process(out_read_data_1_full_n, and_ln169_reg_468)
    begin
                ap_block_state9_pp0_stage0_iter2 <= (((ap_const_lv1_1 = and_ln169_reg_468) and (out_read_data_1_full_n = ap_const_logic_0)) or ((ap_const_lv1_0 = and_ln169_reg_468) and (out_read_data_1_full_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state7_assign_proc : process(icmp_ln88_fu_378_p2)
    begin
        if ((icmp_ln88_fu_378_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buffer_i_i_i_address0 <= zext_ln88_reg_481_pp0_iter1_reg(16 - 1 downto 0);
    buffer_i_i_i_address1 <= zext_ln88_fu_383_p1(16 - 1 downto 0);

    buffer_i_i_i_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_i_i_i_ce0 <= ap_const_logic_1;
        else 
            buffer_i_i_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_i_i_i_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buffer_i_i_i_ce1 <= ap_const_logic_1;
        else 
            buffer_i_i_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer_i_i_i_we0_assign_proc : process(ap_enable_reg_pp0_iter2, and_ln168_1_reg_464, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_1 = and_ln168_1_reg_464) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buffer_i_i_i_we0 <= ap_const_logic_1;
        else 
            buffer_i_i_i_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp10_i_cast_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cmp10_i_fu_215_p2),2));
    cmp10_i_fu_215_p2 <= "1" when (enable_upper_padding = ap_const_lv32_0) else "0";
    cmp11_i_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cmp11_i_fu_225_p2),2));
    cmp11_i_fu_225_p2 <= "1" when (enable_lower_padding = ap_const_lv32_0) else "0";
    cmp18_i_fu_325_p2 <= "1" when (signed(grp_fu_315_p2) < signed(ap_const_lv32_10001)) else "0";
    cmp21_i_fu_342_p2 <= "1" when (signed(sub_ln87_fu_336_p2) > signed(ap_const_lv32_0)) else "0";
    div_i_fu_304_p3 <= 
        p_neg_t11_i_fu_284_p2 when (tmp_9_fu_256_p3(0) = '1') else 
        p_lshr_f12_cast_cast_i_cast_fu_300_p1;
    grp_fu_251_p0 <= std_logic_vector(unsigned(tmp1_cast_fu_241_p1) + unsigned(rows));

    grp_fu_320_ce_assign_proc : process(o_iter_empty_n, o_iter_out_full_n, ap_CS_fsm_state6, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (not(((o_iter_out_full_n = ap_const_logic_0) or (o_iter_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            grp_fu_320_ce <= ap_const_logic_1;
        else 
            grp_fu_320_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln168_fu_330_p2 <= "1" when (o_iter_dout = ap_const_lv31_0) else "0";
    icmp_ln169_fu_360_p2 <= "0" when (o_iter_dout = ap_const_lv31_0) else "1";
    icmp_ln88_fu_378_p2 <= "1" when (p_reg_204 = grp_fu_320_p2) else "0";

    o_iter_blk_n_assign_proc : process(o_iter_empty_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            o_iter_blk_n <= o_iter_empty_n;
        else 
            o_iter_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    o_iter_out_blk_n_assign_proc : process(o_iter_out_full_n, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            o_iter_out_blk_n <= o_iter_out_full_n;
        else 
            o_iter_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    o_iter_out_din <= o_iter_dout;

    o_iter_out_write_assign_proc : process(o_iter_empty_n, o_iter_out_full_n, ap_CS_fsm_state6)
    begin
        if ((not(((o_iter_out_full_n = ap_const_logic_0) or (o_iter_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            o_iter_out_write <= ap_const_logic_1;
        else 
            o_iter_out_write <= ap_const_logic_0;
        end if; 
    end process;


    o_iter_read_assign_proc : process(o_iter_empty_n, o_iter_out_full_n, ap_CS_fsm_state6)
    begin
        if ((not(((o_iter_out_full_n = ap_const_logic_0) or (o_iter_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            o_iter_read <= ap_const_logic_1;
        else 
            o_iter_read <= ap_const_logic_0;
        end if; 
    end process;


    out_read_data_1_blk_n_assign_proc : process(out_read_data_1_full_n, ap_block_pp0_stage0, and_ln169_reg_468, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_lv1_1 = and_ln169_reg_468) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln169_reg_468) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            out_read_data_1_blk_n <= out_read_data_1_full_n;
        else 
            out_read_data_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_read_data_1_din_assign_proc : process(and_ln169_reg_468, ap_enable_reg_pp0_iter2, px_buff_07_i_i_i_fu_94, tmp_fu_98, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((ap_const_lv1_1 = and_ln169_reg_468)) then 
                out_read_data_1_din <= px_buff_07_i_i_i_fu_94;
            elsif ((ap_const_lv1_0 = and_ln169_reg_468)) then 
                out_read_data_1_din <= tmp_fu_98;
            else 
                out_read_data_1_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            out_read_data_1_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_read_data_1_write_assign_proc : process(and_ln169_reg_468, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_lv1_1 = and_ln169_reg_468) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_lv1_0 = and_ln169_reg_468) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            out_read_data_1_write <= ap_const_logic_1;
        else 
            out_read_data_1_write <= ap_const_logic_0;
        end if; 
    end process;


    out_read_data_blk_n_assign_proc : process(out_read_data_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, and_ln169_reg_468)
    begin
        if (((ap_const_lv1_0 = and_ln169_reg_468) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_read_data_blk_n <= out_read_data_empty_n;
        else 
            out_read_data_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_read_data_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, and_ln169_reg_468, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_lv1_0 = and_ln169_reg_468) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_read_data_read <= ap_const_logic_1;
        else 
            out_read_data_read <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr10_cast_cast_i_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr10_cast_cast_i_fu_270_p4),31));
    p_lshr10_cast_cast_i_fu_270_p4 <= p_neg9_i_fu_264_p2(31 downto 2);
    p_lshr_f12_cast_cast_i_cast_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f12_cast_cast_i_fu_290_p4),31));
    p_lshr_f12_cast_cast_i_fu_290_p4 <= I(31 downto 2);
    p_neg9_i_fu_264_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(I));
    p_neg_t11_i_fu_284_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr10_cast_cast_i_cast_fu_280_p1));
    sub_ln87_fu_336_p2 <= std_logic_vector(unsigned(o_iter_last) - unsigned(o_iter_first));
    tmp1_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_235_p2),32));
    tmp1_fu_235_p2 <= std_logic_vector(unsigned(cmp10_i_cast_fu_221_p1) + unsigned(cmp11_i_cast_fu_231_p1));
    tmp_9_fu_256_p3 <= I(31 downto 31);
    zext_ln88_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_reg_204),64));
end behav;
