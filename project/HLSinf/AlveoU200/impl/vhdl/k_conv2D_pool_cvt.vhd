-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k_conv2D_pool_cvt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    H : IN STD_LOGIC_VECTOR (31 downto 0);
    W : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    out_batch_norm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    out_batch_norm_empty_n : IN STD_LOGIC;
    out_batch_norm_read : OUT STD_LOGIC;
    stream_pool_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    stream_pool_full_n : IN STD_LOGIC;
    stream_pool_write : OUT STD_LOGIC );
end;


architecture behav of k_conv2D_pool_cvt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal out_batch_norm_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln64_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_pool_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal tobool_i_i_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_1029 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_1029_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_235 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tobool_i_i_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_fu_291_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_predicate_op141_write_state7 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln64_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_984_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_984_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_988 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_7_reg_988_pp0_iter2_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_7_reg_988_pp0_iter3_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln84_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln84_reg_997 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln84_reg_997_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln84_reg_997_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1003 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1003_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer0_i_i_addr_reg_1007 : STD_LOGIC_VECTOR (7 downto 0);
    signal buffer1_i_i_addr_reg_1013 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln101_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1019 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1019_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1019_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_1024 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_1024_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_1024_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln117_reg_1029_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buffer0_i_i_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal buffer1_i_i_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_condition_pp0_exit_iter1_state4 : STD_LOGIC;
    signal buffer0_i_i_ce0 : STD_LOGIC;
    signal buffer0_i_i_ce1 : STD_LOGIC;
    signal buffer0_i_i_we1 : STD_LOGIC;
    signal buffer1_i_i_ce0 : STD_LOGIC;
    signal buffer1_i_i_ce1 : STD_LOGIC;
    signal buffer1_i_i_we1 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_pix_b0_reg_246 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp0_iter1_pix_b0_reg_246 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp0_iter2_pix_b0_reg_246 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp0_iter3_pix_b0_reg_246 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp0_iter4_pix_b0_reg_246 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp0_iter0_pix_b1_reg_255 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp0_iter1_pix_b1_reg_255 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp0_iter2_pix_b1_reg_255 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp0_iter3_pix_b1_reg_255 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_reg_pp0_iter4_pix_b1_reg_255 : STD_LOGIC_VECTOR (127 downto 0);
    signal idxprom_i_i_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_81_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_82_fu_98 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_83_fu_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln119_4_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_84_fu_106 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_85_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_86_fu_114 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_87_fu_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln119_fu_633_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_88_fu_122 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_89_fu_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_90_fu_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_91_fu_134 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln118_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pin_row_fu_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal pin_row_7_fu_502_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal odd_col_fu_142 : STD_LOGIC_VECTOR (31 downto 0);
    signal odd_col_3_fu_470_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pin_col_fu_146 : STD_LOGIC_VECTOR (31 downto 0);
    signal pin_col_2_fu_510_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p0_fu_150 : STD_LOGIC_VECTOR (127 downto 0);
    signal p0_2_fu_558_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p1_fu_154 : STD_LOGIC_VECTOR (127 downto 0);
    signal p2_fu_158 : STD_LOGIC_VECTOR (127 downto 0);
    signal p2_2_fu_572_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p3_fu_162 : STD_LOGIC_VECTOR (127 downto 0);
    signal or_ln174_2_fu_701_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal or_ln174_4_i_i_fu_810_p14 : STD_LOGIC_VECTOR (511 downto 0);
    signal i_cast_fu_297_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_93_fu_316_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_and_f_fu_331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_323_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln81_fu_339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_write_fu_345_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_363_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln84_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_1_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_fu_353_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln110_fu_424_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln110_fu_438_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_92_fu_312_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln110_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_and_t4_fu_456_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_430_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln110_fu_464_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_and_f2_fu_442_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal pin_col_1_fu_418_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln111_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal pin_row_5_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln114_fu_489_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln114_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pin_row_6_fu_494_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal send_frame_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p0_1_fu_551_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal p2_1_fu_565_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_264_ce : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_171 : BOOLEAN;
    signal ap_condition_166 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component k_conv2D_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k_conv2D_pool_cvt_buffer0_i_i IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    buffer0_i_i_U : component k_conv2D_pool_cvt_buffer0_i_i
    generic map (
        DataWidth => 128,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer0_i_i_addr_reg_1007,
        ce0 => buffer0_i_i_ce0,
        q0 => buffer0_i_i_q0,
        address1 => buffer0_i_i_addr_reg_1007,
        ce1 => buffer0_i_i_ce1,
        we1 => buffer0_i_i_we1,
        d1 => tmp_7_reg_988);

    buffer1_i_i_U : component k_conv2D_pool_cvt_buffer0_i_i
    generic map (
        DataWidth => 128,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buffer1_i_i_addr_reg_1013,
        ce0 => buffer1_i_i_ce0,
        q0 => buffer1_i_i_q0,
        address1 => buffer1_i_i_addr_reg_1013,
        ce1 => buffer1_i_i_ce1,
        we1 => buffer1_i_i_we1,
        d1 => tmp_7_reg_988);

    mul_32s_32s_32_2_1_U456 : component k_conv2D_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => W,
        din1 => H,
        ce => grp_fu_264_ce,
        dout => grp_fu_264_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state4)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter4_pix_b0_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_166)) then 
                    ap_phi_reg_pp0_iter4_pix_b0_reg_246 <= buffer0_i_i_q0;
                elsif ((ap_const_boolean_1 = ap_condition_171)) then 
                    ap_phi_reg_pp0_iter4_pix_b0_reg_246 <= tmp_7_reg_988_pp0_iter2_reg;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_pix_b0_reg_246 <= ap_phi_reg_pp0_iter3_pix_b0_reg_246;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_pix_b1_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                if ((ap_const_boolean_1 = ap_condition_166)) then 
                    ap_phi_reg_pp0_iter4_pix_b1_reg_255 <= tmp_7_reg_988_pp0_iter2_reg;
                elsif ((ap_const_boolean_1 = ap_condition_171)) then 
                    ap_phi_reg_pp0_iter4_pix_b1_reg_255 <= buffer1_i_i_q0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter4_pix_b1_reg_255 <= ap_phi_reg_pp0_iter3_pix_b1_reg_255;
                end if;
            end if; 
        end if;
    end process;

    i_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_fu_301_p2 = ap_const_lv1_1))) then 
                i_reg_235 <= add_ln64_fu_291_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_235 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    odd_col_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                odd_col_fu_142 <= ap_const_lv32_0;
            elsif (((tobool_i_i_reg_975 = ap_const_lv1_0) and (icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                odd_col_fu_142 <= odd_col_3_fu_470_p3;
            end if; 
        end if;
    end process;

    pin_col_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pin_col_fu_146 <= ap_const_lv32_0;
            elsif (((tobool_i_i_reg_975 = ap_const_lv1_0) and (icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                pin_col_fu_146 <= pin_col_2_fu_510_p3;
            end if; 
        end if;
    end process;

    pin_row_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pin_row_fu_138 <= ap_const_lv32_0;
            elsif (((tobool_i_i_reg_975 = ap_const_lv1_0) and (icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                pin_row_fu_138 <= pin_row_7_fu_502_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tobool_i_i_reg_975 = ap_const_lv1_0) and (icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln84_reg_997 <= and_ln84_fu_379_p2;
                buffer0_i_i_addr_reg_1007 <= idxprom_i_i_fu_397_p1(8 - 1 downto 0);
                buffer1_i_i_addr_reg_1013 <= idxprom_i_i_fu_397_p1(8 - 1 downto 0);
                icmp_ln101_reg_1019 <= icmp_ln101_fu_406_p2;
                icmp_ln105_reg_1024 <= icmp_ln105_fu_412_p2;
                icmp_ln117_reg_1029 <= icmp_ln117_fu_518_p2;
                icmp_ln90_reg_1003 <= icmp_ln90_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln84_reg_997_pp0_iter2_reg <= and_ln84_reg_997;
                and_ln84_reg_997_pp0_iter3_reg <= and_ln84_reg_997_pp0_iter2_reg;
                icmp_ln101_reg_1019_pp0_iter2_reg <= icmp_ln101_reg_1019;
                icmp_ln101_reg_1019_pp0_iter3_reg <= icmp_ln101_reg_1019_pp0_iter2_reg;
                icmp_ln105_reg_1024_pp0_iter2_reg <= icmp_ln105_reg_1024;
                icmp_ln105_reg_1024_pp0_iter3_reg <= icmp_ln105_reg_1024_pp0_iter2_reg;
                icmp_ln117_reg_1029_pp0_iter2_reg <= icmp_ln117_reg_1029;
                icmp_ln117_reg_1029_pp0_iter3_reg <= icmp_ln117_reg_1029_pp0_iter2_reg;
                icmp_ln64_reg_984_pp0_iter2_reg <= icmp_ln64_reg_984_pp0_iter1_reg;
                icmp_ln90_reg_1003_pp0_iter2_reg <= icmp_ln90_reg_1003;
                tmp_7_reg_988_pp0_iter2_reg <= tmp_7_reg_988;
                tmp_7_reg_988_pp0_iter3_reg <= tmp_7_reg_988_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_pix_b0_reg_246 <= ap_phi_reg_pp0_iter0_pix_b0_reg_246;
                ap_phi_reg_pp0_iter1_pix_b1_reg_255 <= ap_phi_reg_pp0_iter0_pix_b1_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_pix_b0_reg_246 <= ap_phi_reg_pp0_iter1_pix_b0_reg_246;
                ap_phi_reg_pp0_iter2_pix_b1_reg_255 <= ap_phi_reg_pp0_iter1_pix_b1_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_pix_b0_reg_246 <= ap_phi_reg_pp0_iter2_pix_b0_reg_246;
                ap_phi_reg_pp0_iter3_pix_b1_reg_255 <= ap_phi_reg_pp0_iter2_pix_b1_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln117_reg_1029_pp0_iter3_reg = ap_const_lv1_0) and (tobool_i_i_reg_975 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_81_fu_94 <= ap_phi_reg_pp0_iter4_pix_b1_reg_255(95 downto 64);
                empty_82_fu_98 <= ap_phi_reg_pp0_iter4_pix_b1_reg_255(63 downto 32);
                empty_83_fu_102 <= trunc_ln119_4_fu_667_p1;
                empty_84_fu_106 <= p2_2_fu_572_p3(127 downto 96);
                empty_85_fu_110 <= p2_2_fu_572_p3(95 downto 64);
                empty_86_fu_114 <= p2_2_fu_572_p3(63 downto 32);
                empty_87_fu_118 <= trunc_ln119_fu_633_p1;
                empty_88_fu_122 <= ap_phi_reg_pp0_iter4_pix_b0_reg_246(127 downto 96);
                empty_89_fu_126 <= ap_phi_reg_pp0_iter4_pix_b0_reg_246(95 downto 64);
                empty_90_fu_130 <= ap_phi_reg_pp0_iter4_pix_b0_reg_246(63 downto 32);
                empty_91_fu_134 <= trunc_ln118_fu_599_p1;
                empty_fu_90 <= ap_phi_reg_pp0_iter4_pix_b1_reg_255(127 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln64_reg_984 <= icmp_ln64_fu_301_p2;
                icmp_ln64_reg_984_pp0_iter1_reg <= icmp_ln64_reg_984;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tobool_i_i_reg_975 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p0_fu_150 <= p0_2_fu_558_p3;
                p1_fu_154 <= ap_phi_reg_pp0_iter4_pix_b0_reg_246;
                p2_fu_158 <= p2_2_fu_572_p3;
                p3_fu_162 <= ap_phi_reg_pp0_iter4_pix_b1_reg_255;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_7_reg_988 <= out_batch_norm_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tobool_i_i_reg_975 <= tobool_i_i_fu_285_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln110_fu_424_p2 <= std_logic_vector(unsigned(odd_col_fu_142) + unsigned(ap_const_lv32_1));
    add_ln64_fu_291_p2 <= std_logic_vector(unsigned(i_reg_235) + unsigned(ap_const_lv31_1));
    and_ln84_fu_379_p2 <= (icmp_ln84_fu_357_p2 and icmp_ln84_1_fu_373_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(out_batch_norm_empty_n, stream_pool_full_n, ap_enable_reg_pp0_iter1, icmp_ln64_reg_984, ap_enable_reg_pp0_iter4, tobool_i_i_reg_975, ap_predicate_op141_write_state7)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((tobool_i_i_reg_975 = ap_const_lv1_1) and (stream_pool_full_n = ap_const_logic_0)) or ((stream_pool_full_n = ap_const_logic_0) and (ap_predicate_op141_write_state7 = ap_const_boolean_1)))) or ((icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_batch_norm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(out_batch_norm_empty_n, stream_pool_full_n, ap_enable_reg_pp0_iter1, icmp_ln64_reg_984, ap_enable_reg_pp0_iter4, tobool_i_i_reg_975, ap_predicate_op141_write_state7)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((tobool_i_i_reg_975 = ap_const_lv1_1) and (stream_pool_full_n = ap_const_logic_0)) or ((stream_pool_full_n = ap_const_logic_0) and (ap_predicate_op141_write_state7 = ap_const_boolean_1)))) or ((icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_batch_norm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(out_batch_norm_empty_n, stream_pool_full_n, ap_enable_reg_pp0_iter1, icmp_ln64_reg_984, ap_enable_reg_pp0_iter4, tobool_i_i_reg_975, ap_predicate_op141_write_state7)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (((tobool_i_i_reg_975 = ap_const_lv1_1) and (stream_pool_full_n = ap_const_logic_0)) or ((stream_pool_full_n = ap_const_logic_0) and (ap_predicate_op141_write_state7 = ap_const_boolean_1)))) or ((icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_batch_norm_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(out_batch_norm_empty_n, icmp_ln64_reg_984)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((icmp_ln64_reg_984 = ap_const_lv1_1) and (out_batch_norm_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_pp0_stage0_iter4_assign_proc : process(stream_pool_full_n, tobool_i_i_reg_975, ap_predicate_op141_write_state7)
    begin
                ap_block_state7_pp0_stage0_iter4 <= (((tobool_i_i_reg_975 = ap_const_lv1_1) and (stream_pool_full_n = ap_const_logic_0)) or ((stream_pool_full_n = ap_const_logic_0) and (ap_predicate_op141_write_state7 = ap_const_boolean_1)));
    end process;


    ap_condition_166_assign_proc : process(tobool_i_i_reg_975, icmp_ln64_reg_984_pp0_iter2_reg, icmp_ln90_reg_1003_pp0_iter2_reg)
    begin
                ap_condition_166 <= ((tobool_i_i_reg_975 = ap_const_lv1_0) and (icmp_ln90_reg_1003_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln64_reg_984_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_condition_171_assign_proc : process(tobool_i_i_reg_975, icmp_ln64_reg_984_pp0_iter2_reg, icmp_ln90_reg_1003_pp0_iter2_reg)
    begin
                ap_condition_171 <= ((tobool_i_i_reg_975 = ap_const_lv1_0) and (icmp_ln90_reg_1003_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln64_reg_984_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter1_state4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln64_fu_301_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_fu_301_p2 = ap_const_lv1_0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_pix_b0_reg_246 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_pix_b1_reg_255 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op141_write_state7_assign_proc : process(tobool_i_i_reg_975, icmp_ln117_reg_1029_pp0_iter3_reg)
    begin
                ap_predicate_op141_write_state7 <= ((icmp_ln117_reg_1029_pp0_iter3_reg = ap_const_lv1_0) and (tobool_i_i_reg_975 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    buffer0_i_i_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buffer0_i_i_ce0 <= ap_const_logic_1;
        else 
            buffer0_i_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer0_i_i_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buffer0_i_i_ce1 <= ap_const_logic_1;
        else 
            buffer0_i_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer0_i_i_we1_assign_proc : process(tobool_i_i_reg_975, ap_block_pp0_stage0_11001, icmp_ln64_reg_984_pp0_iter1_reg, icmp_ln90_reg_1003, ap_enable_reg_pp0_iter2)
    begin
        if (((tobool_i_i_reg_975 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln90_reg_1003 = ap_const_lv1_1) and (icmp_ln64_reg_984_pp0_iter1_reg = ap_const_lv1_1))) then 
            buffer0_i_i_we1 <= ap_const_logic_1;
        else 
            buffer0_i_i_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer1_i_i_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buffer1_i_i_ce0 <= ap_const_logic_1;
        else 
            buffer1_i_i_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buffer1_i_i_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            buffer1_i_i_ce1 <= ap_const_logic_1;
        else 
            buffer1_i_i_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buffer1_i_i_we1_assign_proc : process(tobool_i_i_reg_975, ap_block_pp0_stage0_11001, icmp_ln64_reg_984_pp0_iter1_reg, icmp_ln90_reg_1003, ap_enable_reg_pp0_iter2)
    begin
        if (((tobool_i_i_reg_975 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln90_reg_1003 = ap_const_lv1_0) and (icmp_ln64_reg_984_pp0_iter1_reg = ap_const_lv1_1))) then 
            buffer1_i_i_we1 <= ap_const_logic_1;
        else 
            buffer1_i_i_we1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_92_fu_312_p1 <= odd_col_fu_142(1 - 1 downto 0);
    empty_93_fu_316_p1 <= pin_row_fu_138(1 - 1 downto 0);

    grp_fu_264_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_264_ce <= ap_const_logic_1;
        else 
            grp_fu_264_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_cast_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_235),32));
    icmp_ln101_fu_406_p2 <= "1" when (pin_col_fu_146 = ap_const_lv32_0) else "0";
    icmp_ln105_fu_412_p2 <= "0" when (pin_col_fu_146 = ap_const_lv32_0) else "1";
    icmp_ln111_fu_478_p1 <= W;
    icmp_ln111_fu_478_p2 <= "1" when (pin_col_1_fu_418_p2 = icmp_ln111_fu_478_p1) else "0";
    icmp_ln114_fu_489_p1 <= H;
    icmp_ln114_fu_489_p2 <= "1" when (pin_row_5_fu_483_p2 = icmp_ln114_fu_489_p1) else "0";
    icmp_ln117_fu_518_p2 <= "1" when (send_frame_fu_385_p2 = ap_const_lv32_0) else "0";
    icmp_ln64_fu_301_p2 <= "1" when (signed(i_cast_fu_297_p1) < signed(grp_fu_264_p2)) else "0";
    icmp_ln84_1_fu_373_p2 <= "1" when (signed(tmp_5_fu_363_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln84_fu_357_p2 <= "1" when (signed(pin_row_fu_138) > signed(ap_const_lv32_0)) else "0";
    icmp_ln90_fu_391_p2 <= "1" when (trunc_ln45_fu_353_p1 = ap_const_lv2_0) else "0";
    idxprom_i_i_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pin_col_fu_146),64));
    odd_col_3_fu_470_p3 <= 
        sub_ln110_fu_464_p2 when (tmp_6_fu_430_p3(0) = '1') else 
        p_and_f2_fu_442_p3;
    or_ln174_2_fu_701_p5 <= (((ap_phi_reg_pp0_iter4_pix_b1_reg_255 & p2_2_fu_572_p3) & ap_phi_reg_pp0_iter4_pix_b0_reg_246) & p0_2_fu_558_p3);
    or_ln174_4_i_i_fu_810_p14 <= ((((((((((((empty_fu_90 & empty_81_fu_94) & empty_82_fu_98) & empty_83_fu_102) & empty_84_fu_106) & empty_85_fu_110) & empty_86_fu_114) & empty_87_fu_118) & empty_88_fu_122) & empty_89_fu_126) & empty_90_fu_130) & empty_91_fu_134) & tmp_7_reg_988_pp0_iter3_reg);

    out_batch_norm_blk_n_assign_proc : process(out_batch_norm_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln64_reg_984)
    begin
        if (((icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_batch_norm_blk_n <= out_batch_norm_empty_n;
        else 
            out_batch_norm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_batch_norm_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln64_reg_984, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln64_reg_984 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_batch_norm_read <= ap_const_logic_1;
        else 
            out_batch_norm_read <= ap_const_logic_0;
        end if; 
    end process;

    p0_1_fu_551_p3 <= 
        ap_phi_reg_pp0_iter4_pix_b0_reg_246 when (icmp_ln101_reg_1019_pp0_iter3_reg(0) = '1') else 
        p0_fu_150;
    p0_2_fu_558_p3 <= 
        p1_fu_154 when (and_ln84_reg_997_pp0_iter3_reg(0) = '1') else 
        p0_1_fu_551_p3;
    p2_1_fu_565_p3 <= 
        p2_fu_158 when (icmp_ln105_reg_1024_pp0_iter3_reg(0) = '1') else 
        ap_phi_reg_pp0_iter4_pix_b1_reg_255;
    p2_2_fu_572_p3 <= 
        p3_fu_162 when (and_ln84_reg_997_pp0_iter3_reg(0) = '1') else 
        p2_1_fu_565_p3;
    p_and_f2_fu_442_p3 <= (ap_const_lv31_0 & trunc_ln110_fu_438_p1);
    p_and_f_fu_331_p3 <= (ap_const_lv31_0 & empty_93_fu_316_p1);
    p_and_t4_fu_456_p3 <= (ap_const_lv31_0 & xor_ln110_fu_450_p2);
    pin_col_1_fu_418_p2 <= std_logic_vector(unsigned(pin_col_fu_146) + unsigned(ap_const_lv32_1));
    pin_col_2_fu_510_p3 <= 
        ap_const_lv32_0 when (icmp_ln111_fu_478_p2(0) = '1') else 
        pin_col_1_fu_418_p2;
    pin_row_5_fu_483_p2 <= std_logic_vector(unsigned(pin_row_fu_138) + unsigned(ap_const_lv32_1));
    pin_row_6_fu_494_p3 <= 
        ap_const_lv32_0 when (icmp_ln114_fu_489_p2(0) = '1') else 
        pin_row_5_fu_483_p2;
    pin_row_7_fu_502_p3 <= 
        pin_row_6_fu_494_p3 when (icmp_ln111_fu_478_p2(0) = '1') else 
        pin_row_fu_138;
    row_write_fu_345_p3 <= 
        sub_ln81_fu_339_p2 when (tmp_fu_323_p3(0) = '1') else 
        p_and_f_fu_331_p3;
    send_frame_fu_385_p2 <= (row_write_fu_345_p3 and odd_col_fu_142);

    stream_pool_blk_n_assign_proc : process(stream_pool_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, tobool_i_i_reg_975, icmp_ln117_reg_1029_pp0_iter3_reg)
    begin
        if ((((tobool_i_i_reg_975 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln117_reg_1029_pp0_iter3_reg = ap_const_lv1_0) and (tobool_i_i_reg_975 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            stream_pool_blk_n <= stream_pool_full_n;
        else 
            stream_pool_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_pool_din_assign_proc : process(ap_enable_reg_pp0_iter4, tobool_i_i_reg_975, ap_predicate_op141_write_state7, or_ln174_2_fu_701_p5, ap_block_pp0_stage0_01001, or_ln174_4_i_i_fu_810_p14)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then
            if ((tobool_i_i_reg_975 = ap_const_lv1_1)) then 
                stream_pool_din <= or_ln174_4_i_i_fu_810_p14;
            elsif ((ap_predicate_op141_write_state7 = ap_const_boolean_1)) then 
                stream_pool_din <= or_ln174_2_fu_701_p5;
            else 
                stream_pool_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            stream_pool_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    stream_pool_write_assign_proc : process(ap_enable_reg_pp0_iter4, tobool_i_i_reg_975, ap_predicate_op141_write_state7, ap_block_pp0_stage0_11001)
    begin
        if ((((tobool_i_i_reg_975 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op141_write_state7 = ap_const_boolean_1)))) then 
            stream_pool_write <= ap_const_logic_1;
        else 
            stream_pool_write <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln110_fu_464_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_t4_fu_456_p3));
    sub_ln81_fu_339_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_and_f_fu_331_p3));
    tmp_5_fu_363_p4 <= pin_col_fu_146(31 downto 1);
    tmp_6_fu_430_p3 <= add_ln110_fu_424_p2(31 downto 31);
    tmp_fu_323_p3 <= pin_row_fu_138(31 downto 31);
    tobool_i_i_fu_285_p2 <= "1" when (p_read = ap_const_lv32_0) else "0";
    trunc_ln110_fu_438_p1 <= add_ln110_fu_424_p2(1 - 1 downto 0);
    trunc_ln118_fu_599_p1 <= ap_phi_reg_pp0_iter4_pix_b0_reg_246(32 - 1 downto 0);
    trunc_ln119_4_fu_667_p1 <= ap_phi_reg_pp0_iter4_pix_b1_reg_255(32 - 1 downto 0);
    trunc_ln119_fu_633_p1 <= p2_2_fu_572_p3(32 - 1 downto 0);
    trunc_ln45_fu_353_p1 <= row_write_fu_345_p3(2 - 1 downto 0);
    xor_ln110_fu_450_p2 <= (empty_92_fu_312_p1 xor ap_const_lv1_1);
end behav;
