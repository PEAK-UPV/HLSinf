-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k_conv2D_dataflow_in_loop_o_iter_loop is
port (
    o_iter : IN STD_LOGIC_VECTOR (30 downto 0);
    o_iter_first : IN STD_LOGIC_VECTOR (31 downto 0);
    global_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_upper_padding : IN STD_LOGIC_VECTOR (31 downto 0);
    W : IN STD_LOGIC_VECTOR (31 downto 0);
    H : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ptr_bias : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
    I : IN STD_LOGIC_VECTOR (31 downto 0);
    ptr_kernel : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_lower_padding : IN STD_LOGIC_VECTOR (31 downto 0);
    ptr_data : IN STD_LOGIC_VECTOR (63 downto 0);
    o_iter_last : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_relu : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_maxpooling : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_avgpooling : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    ptr_out : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    o_iter_ap_vld : IN STD_LOGIC;
    global_offset_ap_vld : IN STD_LOGIC;
    ptr_bias_ap_vld : IN STD_LOGIC;
    ptr_kernel_ap_vld : IN STD_LOGIC;
    ptr_data_ap_vld : IN STD_LOGIC;
    enable_relu_ap_vld : IN STD_LOGIC;
    ptr_out_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    o_iter_first_ap_vld : IN STD_LOGIC;
    I_ITER_ap_vld : IN STD_LOGIC;
    I_ap_vld : IN STD_LOGIC;
    enable_upper_padding_ap_vld : IN STD_LOGIC;
    rows_ap_vld : IN STD_LOGIC;
    enable_lower_padding_ap_vld : IN STD_LOGIC;
    W_ap_vld : IN STD_LOGIC;
    o_iter_last_ap_vld : IN STD_LOGIC;
    H_ap_vld : IN STD_LOGIC;
    enable_maxpooling_ap_vld : IN STD_LOGIC;
    enable_avgpooling_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of k_conv2D_dataflow_in_loop_o_iter_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_start_out : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_start_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_o_iter_out_din : STD_LOGIC_VECTOR (30 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry8_U0_o_iter_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_global_offset_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry8_U0_global_offset_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ptr_bias_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ptr_bias_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ptr_kernel_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ptr_kernel_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ptr_data_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ptr_data_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_enable_relu_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry8_U0_enable_relu_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ptr_out_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry8_U0_ptr_out_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ap_continue : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_start_out : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_start_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_read : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_read : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_bias_read : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_kernel_read : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_data_read : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_enable_relu_read : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_out_read : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out_din : STD_LOGIC_VECTOR (30 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out1_din : STD_LOGIC_VECTOR (30 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out1_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out2_din : STD_LOGIC_VECTOR (30 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out2_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out3_din : STD_LOGIC_VECTOR (30 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out3_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out4_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out4_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_bias_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_bias_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_kernel_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_kernel_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_data_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_data_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_enable_relu_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_enable_relu_out_write : STD_LOGIC;
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_out_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dataflow_in_loop_o_iter_loop_entry25_U0_ptr_out_out_write : STD_LOGIC;
    signal read_bias_U0_ap_start : STD_LOGIC;
    signal read_bias_U0_ap_done : STD_LOGIC;
    signal read_bias_U0_ap_continue : STD_LOGIC;
    signal read_bias_U0_ap_idle : STD_LOGIC;
    signal read_bias_U0_ap_ready : STD_LOGIC;
    signal read_bias_U0_start_out : STD_LOGIC;
    signal read_bias_U0_start_write : STD_LOGIC;
    signal read_bias_U0_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal read_bias_U0_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_bias_U0_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_bias_U0_m_axi_gmem2_WVALID : STD_LOGIC;
    signal read_bias_U0_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal read_bias_U0_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal read_bias_U0_m_axi_gmem2_WLAST : STD_LOGIC;
    signal read_bias_U0_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_bias_U0_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal read_bias_U0_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_bias_U0_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_bias_U0_m_axi_gmem2_RREADY : STD_LOGIC;
    signal read_bias_U0_m_axi_gmem2_BREADY : STD_LOGIC;
    signal read_bias_U0_o_iter_read : STD_LOGIC;
    signal read_bias_U0_ptr_bias_read : STD_LOGIC;
    signal read_bias_U0_out_read_bias_din : STD_LOGIC_VECTOR (127 downto 0);
    signal read_bias_U0_out_read_bias_write : STD_LOGIC;
    signal read_kernel_U0_ap_start : STD_LOGIC;
    signal read_kernel_U0_ap_done : STD_LOGIC;
    signal read_kernel_U0_ap_continue : STD_LOGIC;
    signal read_kernel_U0_ap_idle : STD_LOGIC;
    signal read_kernel_U0_ap_ready : STD_LOGIC;
    signal read_kernel_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal read_kernel_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_kernel_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_kernel_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal read_kernel_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal read_kernel_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal read_kernel_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal read_kernel_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_kernel_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal read_kernel_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_kernel_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_kernel_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal read_kernel_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal read_kernel_U0_o_iter_read : STD_LOGIC;
    signal read_kernel_U0_ptr_kernel_read : STD_LOGIC;
    signal read_kernel_U0_out_read_kernel_din : STD_LOGIC_VECTOR (4607 downto 0);
    signal read_kernel_U0_out_read_kernel_write : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_ap_start : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_ap_done : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_ap_continue : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_ap_idle : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_ap_ready : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_start_out : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_start_write : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_global_offset_read : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_ptr_data_read : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_o_iter_read : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_o_iter_out_din : STD_LOGIC_VECTOR (30 downto 0);
    signal read_data_channels_gihwcpi_U0_o_iter_out_write : STD_LOGIC;
    signal read_data_channels_gihwcpi_U0_out_read_data_din : STD_LOGIC_VECTOR (127 downto 0);
    signal read_data_channels_gihwcpi_U0_out_read_data_write : STD_LOGIC;
    signal input_buffer_U0_ap_start : STD_LOGIC;
    signal input_buffer_U0_ap_done : STD_LOGIC;
    signal input_buffer_U0_ap_continue : STD_LOGIC;
    signal input_buffer_U0_ap_idle : STD_LOGIC;
    signal input_buffer_U0_ap_ready : STD_LOGIC;
    signal input_buffer_U0_o_iter_read : STD_LOGIC;
    signal input_buffer_U0_o_iter_out_din : STD_LOGIC_VECTOR (30 downto 0);
    signal input_buffer_U0_o_iter_out_write : STD_LOGIC;
    signal input_buffer_U0_out_read_data_read : STD_LOGIC;
    signal input_buffer_U0_out_read_data_1_din : STD_LOGIC_VECTOR (127 downto 0);
    signal input_buffer_U0_out_read_data_1_write : STD_LOGIC;
    signal direct_conv_U0_out_read_data_1_read : STD_LOGIC;
    signal direct_conv_U0_out_read_kernel_read : STD_LOGIC;
    signal direct_conv_U0_out_read_bias_read : STD_LOGIC;
    signal direct_conv_U0_out_conv_din : STD_LOGIC_VECTOR (127 downto 0);
    signal direct_conv_U0_out_conv_write : STD_LOGIC;
    signal direct_conv_U0_ap_start : STD_LOGIC;
    signal direct_conv_U0_ap_done : STD_LOGIC;
    signal direct_conv_U0_ap_ready : STD_LOGIC;
    signal direct_conv_U0_ap_idle : STD_LOGIC;
    signal direct_conv_U0_ap_continue : STD_LOGIC;
    signal relu_U0_ap_start : STD_LOGIC;
    signal relu_U0_ap_done : STD_LOGIC;
    signal relu_U0_ap_continue : STD_LOGIC;
    signal relu_U0_ap_idle : STD_LOGIC;
    signal relu_U0_ap_ready : STD_LOGIC;
    signal relu_U0_start_out : STD_LOGIC;
    signal relu_U0_start_write : STD_LOGIC;
    signal relu_U0_enable_relu_read : STD_LOGIC;
    signal relu_U0_out_conv_read : STD_LOGIC;
    signal relu_U0_out_relu_din : STD_LOGIC_VECTOR (127 downto 0);
    signal relu_U0_out_relu_write : STD_LOGIC;
    signal batch_norm_U0_ap_start : STD_LOGIC;
    signal batch_norm_U0_ap_done : STD_LOGIC;
    signal batch_norm_U0_ap_continue : STD_LOGIC;
    signal batch_norm_U0_ap_idle : STD_LOGIC;
    signal batch_norm_U0_ap_ready : STD_LOGIC;
    signal batch_norm_U0_start_out : STD_LOGIC;
    signal batch_norm_U0_start_write : STD_LOGIC;
    signal batch_norm_U0_out_relu_read : STD_LOGIC;
    signal batch_norm_U0_out_batch_norm_din : STD_LOGIC_VECTOR (127 downto 0);
    signal batch_norm_U0_out_batch_norm_write : STD_LOGIC;
    signal pooling_U0_out_batch_norm_read : STD_LOGIC;
    signal pooling_U0_out_pooling_din : STD_LOGIC_VECTOR (127 downto 0);
    signal pooling_U0_out_pooling_write : STD_LOGIC;
    signal pooling_U0_ap_start : STD_LOGIC;
    signal pooling_U0_ap_done : STD_LOGIC;
    signal pooling_U0_ap_ready : STD_LOGIC;
    signal pooling_U0_ap_idle : STD_LOGIC;
    signal pooling_U0_ap_continue : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_ap_start : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_ap_done : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_ap_continue : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_ap_idle : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_ap_ready : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWVALID : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_WVALID : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_WLAST : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARVALID : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_RREADY : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_m_axi_gmem3_BREADY : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_o_iter_read : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_ptr_out_read : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_out_pooling_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal o_iter_c4_full_n : STD_LOGIC;
    signal o_iter_c4_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal o_iter_c4_empty_n : STD_LOGIC;
    signal global_offset_c5_full_n : STD_LOGIC;
    signal global_offset_c5_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal global_offset_c5_empty_n : STD_LOGIC;
    signal ptr_bias_c6_full_n : STD_LOGIC;
    signal ptr_bias_c6_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_bias_c6_empty_n : STD_LOGIC;
    signal ptr_kernel_c7_full_n : STD_LOGIC;
    signal ptr_kernel_c7_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_kernel_c7_empty_n : STD_LOGIC;
    signal ptr_data_c8_full_n : STD_LOGIC;
    signal ptr_data_c8_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_data_c8_empty_n : STD_LOGIC;
    signal enable_relu_c9_full_n : STD_LOGIC;
    signal enable_relu_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_relu_c9_empty_n : STD_LOGIC;
    signal ptr_out_c10_full_n : STD_LOGIC;
    signal ptr_out_c10_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_out_c10_empty_n : STD_LOGIC;
    signal o_iter_c1_full_n : STD_LOGIC;
    signal o_iter_c1_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal o_iter_c1_empty_n : STD_LOGIC;
    signal o_iter_c2_full_n : STD_LOGIC;
    signal o_iter_c2_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal o_iter_c2_empty_n : STD_LOGIC;
    signal o_iter_c3_full_n : STD_LOGIC;
    signal o_iter_c3_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal o_iter_c3_empty_n : STD_LOGIC;
    signal global_offset_c4_full_n : STD_LOGIC;
    signal global_offset_c4_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal global_offset_c4_empty_n : STD_LOGIC;
    signal ptr_bias_c_full_n : STD_LOGIC;
    signal ptr_bias_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_bias_c_empty_n : STD_LOGIC;
    signal ptr_kernel_c_full_n : STD_LOGIC;
    signal ptr_kernel_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_kernel_c_empty_n : STD_LOGIC;
    signal ptr_data_c_full_n : STD_LOGIC;
    signal ptr_data_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_data_c_empty_n : STD_LOGIC;
    signal enable_relu_c_full_n : STD_LOGIC;
    signal enable_relu_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_relu_c_empty_n : STD_LOGIC;
    signal ptr_out_c_full_n : STD_LOGIC;
    signal ptr_out_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal ptr_out_c_empty_n : STD_LOGIC;
    signal out_read_bias_full_n : STD_LOGIC;
    signal out_read_bias_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal out_read_bias_empty_n : STD_LOGIC;
    signal out_read_kernel_full_n : STD_LOGIC;
    signal out_read_kernel_dout : STD_LOGIC_VECTOR (4607 downto 0);
    signal out_read_kernel_empty_n : STD_LOGIC;
    signal o_iter_c5_full_n : STD_LOGIC;
    signal o_iter_c5_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal o_iter_c5_empty_n : STD_LOGIC;
    signal out_read_data_full_n : STD_LOGIC;
    signal out_read_data_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal out_read_data_empty_n : STD_LOGIC;
    signal o_iter_c6_full_n : STD_LOGIC;
    signal o_iter_c6_dout : STD_LOGIC_VECTOR (30 downto 0);
    signal o_iter_c6_empty_n : STD_LOGIC;
    signal out_read_data_1_full_n : STD_LOGIC;
    signal out_read_data_1_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal out_read_data_1_empty_n : STD_LOGIC;
    signal out_conv_full_n : STD_LOGIC;
    signal out_conv_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal out_conv_empty_n : STD_LOGIC;
    signal out_relu_full_n : STD_LOGIC;
    signal out_relu_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal out_relu_empty_n : STD_LOGIC;
    signal out_batch_norm_full_n : STD_LOGIC;
    signal out_batch_norm_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal out_batch_norm_empty_n : STD_LOGIC;
    signal out_pooling_full_n : STD_LOGIC;
    signal out_pooling_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal out_pooling_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_bias_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_bias_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_kernel_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_kernel_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_data_channels_gihwcpi_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_data_channels_gihwcpi_U0_ap_ready : STD_LOGIC;
    signal start_for_dataflow_in_loop_o_iter_loop_entry25_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dataflow_in_loop_o_iter_loop_entry25_U0_full_n : STD_LOGIC;
    signal start_for_dataflow_in_loop_o_iter_loop_entry25_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dataflow_in_loop_o_iter_loop_entry25_U0_empty_n : STD_LOGIC;
    signal start_for_relu_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_U0_full_n : STD_LOGIC;
    signal start_for_relu_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_relu_U0_empty_n : STD_LOGIC;
    signal start_for_write_data_channels_gihwcpi_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_data_channels_gihwcpi_U0_full_n : STD_LOGIC;
    signal start_for_write_data_channels_gihwcpi_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_data_channels_gihwcpi_U0_empty_n : STD_LOGIC;
    signal start_for_direct_conv_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_direct_conv_U0_full_n : STD_LOGIC;
    signal start_for_direct_conv_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_direct_conv_U0_empty_n : STD_LOGIC;
    signal read_kernel_U0_start_full_n : STD_LOGIC;
    signal read_kernel_U0_start_write : STD_LOGIC;
    signal start_for_input_buffer_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_input_buffer_U0_full_n : STD_LOGIC;
    signal start_for_input_buffer_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_input_buffer_U0_empty_n : STD_LOGIC;
    signal input_buffer_U0_start_full_n : STD_LOGIC;
    signal input_buffer_U0_start_write : STD_LOGIC;
    signal direct_conv_U0_start_full_n : STD_LOGIC;
    signal direct_conv_U0_start_write : STD_LOGIC;
    signal start_for_batch_norm_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_batch_norm_U0_full_n : STD_LOGIC;
    signal start_for_batch_norm_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_batch_norm_U0_empty_n : STD_LOGIC;
    signal start_for_pooling_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pooling_U0_full_n : STD_LOGIC;
    signal start_for_pooling_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pooling_U0_empty_n : STD_LOGIC;
    signal pooling_U0_start_full_n : STD_LOGIC;
    signal pooling_U0_start_write : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_start_full_n : STD_LOGIC;
    signal write_data_channels_gihwcpi_U0_start_write : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component k_conv2D_dataflow_in_loop_o_iter_loop_entry8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        o_iter : IN STD_LOGIC_VECTOR (30 downto 0);
        global_offset : IN STD_LOGIC_VECTOR (31 downto 0);
        ptr_bias : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_kernel : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_data : IN STD_LOGIC_VECTOR (63 downto 0);
        enable_relu : IN STD_LOGIC_VECTOR (31 downto 0);
        ptr_out : IN STD_LOGIC_VECTOR (63 downto 0);
        o_iter_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        o_iter_out_full_n : IN STD_LOGIC;
        o_iter_out_write : OUT STD_LOGIC;
        global_offset_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        global_offset_out_full_n : IN STD_LOGIC;
        global_offset_out_write : OUT STD_LOGIC;
        ptr_bias_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ptr_bias_out_full_n : IN STD_LOGIC;
        ptr_bias_out_write : OUT STD_LOGIC;
        ptr_kernel_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ptr_kernel_out_full_n : IN STD_LOGIC;
        ptr_kernel_out_write : OUT STD_LOGIC;
        ptr_data_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ptr_data_out_full_n : IN STD_LOGIC;
        ptr_data_out_write : OUT STD_LOGIC;
        enable_relu_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        enable_relu_out_full_n : IN STD_LOGIC;
        enable_relu_out_write : OUT STD_LOGIC;
        ptr_out_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ptr_out_out_full_n : IN STD_LOGIC;
        ptr_out_out_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_dataflow_in_loop_o_iter_loop_entry25 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        o_iter_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        o_iter_empty_n : IN STD_LOGIC;
        o_iter_read : OUT STD_LOGIC;
        global_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        global_offset_empty_n : IN STD_LOGIC;
        global_offset_read : OUT STD_LOGIC;
        ptr_bias_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_bias_empty_n : IN STD_LOGIC;
        ptr_bias_read : OUT STD_LOGIC;
        ptr_kernel_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_kernel_empty_n : IN STD_LOGIC;
        ptr_kernel_read : OUT STD_LOGIC;
        ptr_data_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_data_empty_n : IN STD_LOGIC;
        ptr_data_read : OUT STD_LOGIC;
        enable_relu_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_relu_empty_n : IN STD_LOGIC;
        enable_relu_read : OUT STD_LOGIC;
        ptr_out_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_out_empty_n : IN STD_LOGIC;
        ptr_out_read : OUT STD_LOGIC;
        o_iter_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        o_iter_out_full_n : IN STD_LOGIC;
        o_iter_out_write : OUT STD_LOGIC;
        o_iter_out1_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        o_iter_out1_full_n : IN STD_LOGIC;
        o_iter_out1_write : OUT STD_LOGIC;
        o_iter_out2_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        o_iter_out2_full_n : IN STD_LOGIC;
        o_iter_out2_write : OUT STD_LOGIC;
        o_iter_out3_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        o_iter_out3_full_n : IN STD_LOGIC;
        o_iter_out3_write : OUT STD_LOGIC;
        global_offset_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        global_offset_out_full_n : IN STD_LOGIC;
        global_offset_out_write : OUT STD_LOGIC;
        global_offset_out4_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        global_offset_out4_full_n : IN STD_LOGIC;
        global_offset_out4_write : OUT STD_LOGIC;
        ptr_bias_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ptr_bias_out_full_n : IN STD_LOGIC;
        ptr_bias_out_write : OUT STD_LOGIC;
        ptr_kernel_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ptr_kernel_out_full_n : IN STD_LOGIC;
        ptr_kernel_out_write : OUT STD_LOGIC;
        ptr_data_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ptr_data_out_full_n : IN STD_LOGIC;
        ptr_data_out_write : OUT STD_LOGIC;
        enable_relu_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        enable_relu_out_full_n : IN STD_LOGIC;
        enable_relu_out_write : OUT STD_LOGIC;
        ptr_out_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        ptr_out_out_full_n : IN STD_LOGIC;
        ptr_out_out_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_read_bias IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        o_iter_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        o_iter_empty_n : IN STD_LOGIC;
        o_iter_read : OUT STD_LOGIC;
        o_iter_first : IN STD_LOGIC_VECTOR (31 downto 0);
        ptr_bias_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_bias_empty_n : IN STD_LOGIC;
        ptr_bias_read : OUT STD_LOGIC;
        out_read_bias_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_read_bias_full_n : IN STD_LOGIC;
        out_read_bias_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_read_kernel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
        I : IN STD_LOGIC_VECTOR (31 downto 0);
        o_iter_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        o_iter_empty_n : IN STD_LOGIC;
        o_iter_read : OUT STD_LOGIC;
        o_iter_first : IN STD_LOGIC_VECTOR (31 downto 0);
        ptr_kernel_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_kernel_empty_n : IN STD_LOGIC;
        ptr_kernel_read : OUT STD_LOGIC;
        out_read_kernel_din : OUT STD_LOGIC_VECTOR (4607 downto 0);
        out_read_kernel_full_n : IN STD_LOGIC;
        out_read_kernel_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_read_data_channels_gihwcpi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        enable_upper_padding : IN STD_LOGIC_VECTOR (31 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_lower_padding : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
        global_offset_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        global_offset_empty_n : IN STD_LOGIC;
        global_offset_read : OUT STD_LOGIC;
        ptr_data_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_data_empty_n : IN STD_LOGIC;
        ptr_data_read : OUT STD_LOGIC;
        o_iter_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        o_iter_empty_n : IN STD_LOGIC;
        o_iter_read : OUT STD_LOGIC;
        I : IN STD_LOGIC_VECTOR (31 downto 0);
        o_iter_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        o_iter_out_full_n : IN STD_LOGIC;
        o_iter_out_write : OUT STD_LOGIC;
        out_read_data_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_read_data_full_n : IN STD_LOGIC;
        out_read_data_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_input_buffer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        enable_upper_padding : IN STD_LOGIC_VECTOR (31 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_lower_padding : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
        I : IN STD_LOGIC_VECTOR (31 downto 0);
        o_iter_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        o_iter_empty_n : IN STD_LOGIC;
        o_iter_read : OUT STD_LOGIC;
        o_iter_last : IN STD_LOGIC_VECTOR (31 downto 0);
        o_iter_first : IN STD_LOGIC_VECTOR (31 downto 0);
        o_iter_out_din : OUT STD_LOGIC_VECTOR (30 downto 0);
        o_iter_out_full_n : IN STD_LOGIC;
        o_iter_out_write : OUT STD_LOGIC;
        out_read_data_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_read_data_empty_n : IN STD_LOGIC;
        out_read_data_read : OUT STD_LOGIC;
        out_read_data_1_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_read_data_1_full_n : IN STD_LOGIC;
        out_read_data_1_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_direct_conv IS
    port (
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_upper_padding : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_lower_padding : IN STD_LOGIC_VECTOR (31 downto 0);
        out_read_data_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_read_data_1_empty_n : IN STD_LOGIC;
        out_read_data_1_read : OUT STD_LOGIC;
        out_read_kernel_dout : IN STD_LOGIC_VECTOR (4607 downto 0);
        out_read_kernel_empty_n : IN STD_LOGIC;
        out_read_kernel_read : OUT STD_LOGIC;
        out_read_bias_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_read_bias_empty_n : IN STD_LOGIC;
        out_read_bias_read : OUT STD_LOGIC;
        out_conv_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_conv_full_n : IN STD_LOGIC;
        out_conv_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        enable_upper_padding_ap_vld : IN STD_LOGIC;
        enable_lower_padding_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        rows_ap_vld : IN STD_LOGIC;
        W_ap_vld : IN STD_LOGIC;
        I_ITER_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component k_conv2D_relu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        enable_relu_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_relu_empty_n : IN STD_LOGIC;
        enable_relu_read : OUT STD_LOGIC;
        H : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        out_conv_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_conv_empty_n : IN STD_LOGIC;
        out_conv_read : OUT STD_LOGIC;
        out_relu_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_relu_full_n : IN STD_LOGIC;
        out_relu_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_batch_norm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        H : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        out_relu_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_relu_empty_n : IN STD_LOGIC;
        out_relu_read : OUT STD_LOGIC;
        out_batch_norm_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_batch_norm_full_n : IN STD_LOGIC;
        out_batch_norm_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_pooling IS
    port (
        H : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_maxpooling : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_avgpooling : IN STD_LOGIC_VECTOR (31 downto 0);
        out_batch_norm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_batch_norm_empty_n : IN STD_LOGIC;
        out_batch_norm_read : OUT STD_LOGIC;
        out_pooling_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_pooling_full_n : IN STD_LOGIC;
        out_pooling_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        enable_avgpooling_ap_vld : IN STD_LOGIC;
        enable_maxpooling_ap_vld : IN STD_LOGIC;
        W_ap_vld : IN STD_LOGIC;
        H_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component k_conv2D_write_data_channels_gihwcpi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem3_AWVALID : OUT STD_LOGIC;
        m_axi_gmem3_AWREADY : IN STD_LOGIC;
        m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WVALID : OUT STD_LOGIC;
        m_axi_gmem3_WREADY : IN STD_LOGIC;
        m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem3_WLAST : OUT STD_LOGIC;
        m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARVALID : OUT STD_LOGIC;
        m_axi_gmem3_ARREADY : IN STD_LOGIC;
        m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RVALID : IN STD_LOGIC;
        m_axi_gmem3_RREADY : OUT STD_LOGIC;
        m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem3_RLAST : IN STD_LOGIC;
        m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BVALID : IN STD_LOGIC;
        m_axi_gmem3_BREADY : OUT STD_LOGIC;
        m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        enable_avgpooling : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_maxpooling : IN STD_LOGIC_VECTOR (31 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        o_iter_dout : IN STD_LOGIC_VECTOR (30 downto 0);
        o_iter_empty_n : IN STD_LOGIC;
        o_iter_read : OUT STD_LOGIC;
        o_iter_first : IN STD_LOGIC_VECTOR (31 downto 0);
        ptr_out_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        ptr_out_empty_n : IN STD_LOGIC;
        ptr_out_read : OUT STD_LOGIC;
        out_pooling_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_pooling_empty_n : IN STD_LOGIC;
        out_pooling_read : OUT STD_LOGIC );
    end component;


    component k_conv2D_fifo_w31_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (30 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (30 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w32_d2_S_x0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w32_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w64_d8_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w128_d4_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w4608_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (4607 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (4607 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w31_d6_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (30 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (30 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_dataflow_in_loop_o_iter_loop_entry25_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_relu_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_write_data_channels_gihwcpi_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_direct_conv_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_input_buffer_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_batch_norm_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_pooling_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_o_iter_loop_entry8_U0 : component k_conv2D_dataflow_in_loop_o_iter_loop_entry8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_o_iter_loop_entry8_U0_ap_start,
        start_full_n => start_for_dataflow_in_loop_o_iter_loop_entry25_U0_full_n,
        ap_done => dataflow_in_loop_o_iter_loop_entry8_U0_ap_done,
        ap_continue => dataflow_in_loop_o_iter_loop_entry8_U0_ap_continue,
        ap_idle => dataflow_in_loop_o_iter_loop_entry8_U0_ap_idle,
        ap_ready => dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready,
        start_out => dataflow_in_loop_o_iter_loop_entry8_U0_start_out,
        start_write => dataflow_in_loop_o_iter_loop_entry8_U0_start_write,
        o_iter => o_iter,
        global_offset => global_offset,
        ptr_bias => ptr_bias,
        ptr_kernel => ptr_kernel,
        ptr_data => ptr_data,
        enable_relu => enable_relu,
        ptr_out => ptr_out,
        o_iter_out_din => dataflow_in_loop_o_iter_loop_entry8_U0_o_iter_out_din,
        o_iter_out_full_n => o_iter_c4_full_n,
        o_iter_out_write => dataflow_in_loop_o_iter_loop_entry8_U0_o_iter_out_write,
        global_offset_out_din => dataflow_in_loop_o_iter_loop_entry8_U0_global_offset_out_din,
        global_offset_out_full_n => global_offset_c5_full_n,
        global_offset_out_write => dataflow_in_loop_o_iter_loop_entry8_U0_global_offset_out_write,
        ptr_bias_out_din => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_bias_out_din,
        ptr_bias_out_full_n => ptr_bias_c6_full_n,
        ptr_bias_out_write => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_bias_out_write,
        ptr_kernel_out_din => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_kernel_out_din,
        ptr_kernel_out_full_n => ptr_kernel_c7_full_n,
        ptr_kernel_out_write => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_kernel_out_write,
        ptr_data_out_din => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_data_out_din,
        ptr_data_out_full_n => ptr_data_c8_full_n,
        ptr_data_out_write => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_data_out_write,
        enable_relu_out_din => dataflow_in_loop_o_iter_loop_entry8_U0_enable_relu_out_din,
        enable_relu_out_full_n => enable_relu_c9_full_n,
        enable_relu_out_write => dataflow_in_loop_o_iter_loop_entry8_U0_enable_relu_out_write,
        ptr_out_out_din => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_out_out_din,
        ptr_out_out_full_n => ptr_out_c10_full_n,
        ptr_out_out_write => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_out_out_write);

    dataflow_in_loop_o_iter_loop_entry25_U0 : component k_conv2D_dataflow_in_loop_o_iter_loop_entry25
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dataflow_in_loop_o_iter_loop_entry25_U0_ap_start,
        start_full_n => dataflow_in_loop_o_iter_loop_entry25_U0_start_full_n,
        ap_done => dataflow_in_loop_o_iter_loop_entry25_U0_ap_done,
        ap_continue => dataflow_in_loop_o_iter_loop_entry25_U0_ap_continue,
        ap_idle => dataflow_in_loop_o_iter_loop_entry25_U0_ap_idle,
        ap_ready => dataflow_in_loop_o_iter_loop_entry25_U0_ap_ready,
        start_out => dataflow_in_loop_o_iter_loop_entry25_U0_start_out,
        start_write => dataflow_in_loop_o_iter_loop_entry25_U0_start_write,
        o_iter_dout => o_iter_c4_dout,
        o_iter_empty_n => o_iter_c4_empty_n,
        o_iter_read => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_read,
        global_offset_dout => global_offset_c5_dout,
        global_offset_empty_n => global_offset_c5_empty_n,
        global_offset_read => dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_read,
        ptr_bias_dout => ptr_bias_c6_dout,
        ptr_bias_empty_n => ptr_bias_c6_empty_n,
        ptr_bias_read => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_bias_read,
        ptr_kernel_dout => ptr_kernel_c7_dout,
        ptr_kernel_empty_n => ptr_kernel_c7_empty_n,
        ptr_kernel_read => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_kernel_read,
        ptr_data_dout => ptr_data_c8_dout,
        ptr_data_empty_n => ptr_data_c8_empty_n,
        ptr_data_read => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_data_read,
        enable_relu_dout => enable_relu_c9_dout,
        enable_relu_empty_n => enable_relu_c9_empty_n,
        enable_relu_read => dataflow_in_loop_o_iter_loop_entry25_U0_enable_relu_read,
        ptr_out_dout => ptr_out_c10_dout,
        ptr_out_empty_n => ptr_out_c10_empty_n,
        ptr_out_read => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_out_read,
        o_iter_out_din => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out_din,
        o_iter_out_full_n => ap_const_logic_1,
        o_iter_out_write => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out_write,
        o_iter_out1_din => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out1_din,
        o_iter_out1_full_n => o_iter_c1_full_n,
        o_iter_out1_write => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out1_write,
        o_iter_out2_din => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out2_din,
        o_iter_out2_full_n => o_iter_c2_full_n,
        o_iter_out2_write => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out2_write,
        o_iter_out3_din => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out3_din,
        o_iter_out3_full_n => o_iter_c3_full_n,
        o_iter_out3_write => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out3_write,
        global_offset_out_din => dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out_din,
        global_offset_out_full_n => ap_const_logic_1,
        global_offset_out_write => dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out_write,
        global_offset_out4_din => dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out4_din,
        global_offset_out4_full_n => global_offset_c4_full_n,
        global_offset_out4_write => dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out4_write,
        ptr_bias_out_din => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_bias_out_din,
        ptr_bias_out_full_n => ptr_bias_c_full_n,
        ptr_bias_out_write => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_bias_out_write,
        ptr_kernel_out_din => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_kernel_out_din,
        ptr_kernel_out_full_n => ptr_kernel_c_full_n,
        ptr_kernel_out_write => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_kernel_out_write,
        ptr_data_out_din => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_data_out_din,
        ptr_data_out_full_n => ptr_data_c_full_n,
        ptr_data_out_write => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_data_out_write,
        enable_relu_out_din => dataflow_in_loop_o_iter_loop_entry25_U0_enable_relu_out_din,
        enable_relu_out_full_n => enable_relu_c_full_n,
        enable_relu_out_write => dataflow_in_loop_o_iter_loop_entry25_U0_enable_relu_out_write,
        ptr_out_out_din => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_out_out_din,
        ptr_out_out_full_n => ptr_out_c_full_n,
        ptr_out_out_write => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_out_out_write);

    read_bias_U0 : component k_conv2D_read_bias
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_bias_U0_ap_start,
        start_full_n => start_for_direct_conv_U0_full_n,
        ap_done => read_bias_U0_ap_done,
        ap_continue => read_bias_U0_ap_continue,
        ap_idle => read_bias_U0_ap_idle,
        ap_ready => read_bias_U0_ap_ready,
        start_out => read_bias_U0_start_out,
        start_write => read_bias_U0_start_write,
        m_axi_gmem2_AWVALID => read_bias_U0_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => ap_const_logic_0,
        m_axi_gmem2_AWADDR => read_bias_U0_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => read_bias_U0_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => read_bias_U0_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => read_bias_U0_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => read_bias_U0_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => read_bias_U0_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => read_bias_U0_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => read_bias_U0_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => read_bias_U0_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => read_bias_U0_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => read_bias_U0_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => read_bias_U0_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => ap_const_logic_0,
        m_axi_gmem2_WDATA => read_bias_U0_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => read_bias_U0_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => read_bias_U0_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => read_bias_U0_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => read_bias_U0_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => read_bias_U0_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR => read_bias_U0_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => read_bias_U0_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => read_bias_U0_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => read_bias_U0_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => read_bias_U0_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => read_bias_U0_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => read_bias_U0_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => read_bias_U0_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => read_bias_U0_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => read_bias_U0_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => read_bias_U0_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY => read_bias_U0_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST => m_axi_gmem2_RLAST,
        m_axi_gmem2_RID => m_axi_gmem2_RID,
        m_axi_gmem2_RUSER => m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP => m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID => ap_const_logic_0,
        m_axi_gmem2_BREADY => read_bias_U0_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => ap_const_lv2_0,
        m_axi_gmem2_BID => ap_const_lv1_0,
        m_axi_gmem2_BUSER => ap_const_lv1_0,
        o_iter_dout => o_iter_c1_dout,
        o_iter_empty_n => o_iter_c1_empty_n,
        o_iter_read => read_bias_U0_o_iter_read,
        o_iter_first => o_iter_first,
        ptr_bias_dout => ptr_bias_c_dout,
        ptr_bias_empty_n => ptr_bias_c_empty_n,
        ptr_bias_read => read_bias_U0_ptr_bias_read,
        out_read_bias_din => read_bias_U0_out_read_bias_din,
        out_read_bias_full_n => out_read_bias_full_n,
        out_read_bias_write => read_bias_U0_out_read_bias_write);

    read_kernel_U0 : component k_conv2D_read_kernel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_kernel_U0_ap_start,
        ap_done => read_kernel_U0_ap_done,
        ap_continue => read_kernel_U0_ap_continue,
        ap_idle => read_kernel_U0_ap_idle,
        ap_ready => read_kernel_U0_ap_ready,
        m_axi_gmem1_AWVALID => read_kernel_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => read_kernel_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => read_kernel_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => read_kernel_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => read_kernel_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => read_kernel_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => read_kernel_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => read_kernel_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => read_kernel_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => read_kernel_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => read_kernel_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => read_kernel_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => read_kernel_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => read_kernel_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => read_kernel_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => read_kernel_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => read_kernel_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => read_kernel_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => read_kernel_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR => read_kernel_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => read_kernel_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => read_kernel_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => read_kernel_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => read_kernel_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => read_kernel_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => read_kernel_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => read_kernel_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => read_kernel_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => read_kernel_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => read_kernel_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY => read_kernel_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST => m_axi_gmem1_RLAST,
        m_axi_gmem1_RID => m_axi_gmem1_RID,
        m_axi_gmem1_RUSER => m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP => m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => read_kernel_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        I_ITER => I_ITER,
        I => I,
        o_iter_dout => o_iter_c2_dout,
        o_iter_empty_n => o_iter_c2_empty_n,
        o_iter_read => read_kernel_U0_o_iter_read,
        o_iter_first => o_iter_first,
        ptr_kernel_dout => ptr_kernel_c_dout,
        ptr_kernel_empty_n => ptr_kernel_c_empty_n,
        ptr_kernel_read => read_kernel_U0_ptr_kernel_read,
        out_read_kernel_din => read_kernel_U0_out_read_kernel_din,
        out_read_kernel_full_n => out_read_kernel_full_n,
        out_read_kernel_write => read_kernel_U0_out_read_kernel_write);

    read_data_channels_gihwcpi_U0 : component k_conv2D_read_data_channels_gihwcpi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => read_data_channels_gihwcpi_U0_ap_start,
        start_full_n => start_for_input_buffer_U0_full_n,
        ap_done => read_data_channels_gihwcpi_U0_ap_done,
        ap_continue => read_data_channels_gihwcpi_U0_ap_continue,
        ap_idle => read_data_channels_gihwcpi_U0_ap_idle,
        ap_ready => read_data_channels_gihwcpi_U0_ap_ready,
        start_out => read_data_channels_gihwcpi_U0_start_out,
        start_write => read_data_channels_gihwcpi_U0_start_write,
        m_axi_gmem_AWVALID => read_data_channels_gihwcpi_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => read_data_channels_gihwcpi_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => read_data_channels_gihwcpi_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => read_data_channels_gihwcpi_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => read_data_channels_gihwcpi_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => read_data_channels_gihwcpi_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => read_data_channels_gihwcpi_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => read_data_channels_gihwcpi_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => read_data_channels_gihwcpi_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => read_data_channels_gihwcpi_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => read_data_channels_gihwcpi_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => read_data_channels_gihwcpi_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => read_data_channels_gihwcpi_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => read_data_channels_gihwcpi_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => read_data_channels_gihwcpi_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => read_data_channels_gihwcpi_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => read_data_channels_gihwcpi_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => read_data_channels_gihwcpi_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => read_data_channels_gihwcpi_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => read_data_channels_gihwcpi_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => read_data_channels_gihwcpi_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => read_data_channels_gihwcpi_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => read_data_channels_gihwcpi_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => read_data_channels_gihwcpi_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => read_data_channels_gihwcpi_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => read_data_channels_gihwcpi_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => read_data_channels_gihwcpi_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => read_data_channels_gihwcpi_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => read_data_channels_gihwcpi_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => read_data_channels_gihwcpi_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => read_data_channels_gihwcpi_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => read_data_channels_gihwcpi_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        enable_upper_padding => enable_upper_padding,
        rows => rows,
        enable_lower_padding => enable_lower_padding,
        W => W,
        I_ITER => I_ITER,
        global_offset_dout => global_offset_c4_dout,
        global_offset_empty_n => global_offset_c4_empty_n,
        global_offset_read => read_data_channels_gihwcpi_U0_global_offset_read,
        ptr_data_dout => ptr_data_c_dout,
        ptr_data_empty_n => ptr_data_c_empty_n,
        ptr_data_read => read_data_channels_gihwcpi_U0_ptr_data_read,
        o_iter_dout => o_iter_c3_dout,
        o_iter_empty_n => o_iter_c3_empty_n,
        o_iter_read => read_data_channels_gihwcpi_U0_o_iter_read,
        I => I,
        o_iter_out_din => read_data_channels_gihwcpi_U0_o_iter_out_din,
        o_iter_out_full_n => o_iter_c5_full_n,
        o_iter_out_write => read_data_channels_gihwcpi_U0_o_iter_out_write,
        out_read_data_din => read_data_channels_gihwcpi_U0_out_read_data_din,
        out_read_data_full_n => out_read_data_full_n,
        out_read_data_write => read_data_channels_gihwcpi_U0_out_read_data_write);

    input_buffer_U0 : component k_conv2D_input_buffer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => input_buffer_U0_ap_start,
        ap_done => input_buffer_U0_ap_done,
        ap_continue => input_buffer_U0_ap_continue,
        ap_idle => input_buffer_U0_ap_idle,
        ap_ready => input_buffer_U0_ap_ready,
        enable_upper_padding => enable_upper_padding,
        rows => rows,
        enable_lower_padding => enable_lower_padding,
        W => W,
        I_ITER => I_ITER,
        I => I,
        o_iter_dout => o_iter_c5_dout,
        o_iter_empty_n => o_iter_c5_empty_n,
        o_iter_read => input_buffer_U0_o_iter_read,
        o_iter_last => o_iter_last,
        o_iter_first => o_iter_first,
        o_iter_out_din => input_buffer_U0_o_iter_out_din,
        o_iter_out_full_n => o_iter_c6_full_n,
        o_iter_out_write => input_buffer_U0_o_iter_out_write,
        out_read_data_dout => out_read_data_dout,
        out_read_data_empty_n => out_read_data_empty_n,
        out_read_data_read => input_buffer_U0_out_read_data_read,
        out_read_data_1_din => input_buffer_U0_out_read_data_1_din,
        out_read_data_1_full_n => out_read_data_1_full_n,
        out_read_data_1_write => input_buffer_U0_out_read_data_1_write);

    direct_conv_U0 : component k_conv2D_direct_conv
    port map (
        rows => rows,
        W => W,
        I_ITER => I_ITER,
        enable_upper_padding => enable_upper_padding,
        enable_lower_padding => enable_lower_padding,
        out_read_data_1_dout => out_read_data_1_dout,
        out_read_data_1_empty_n => out_read_data_1_empty_n,
        out_read_data_1_read => direct_conv_U0_out_read_data_1_read,
        out_read_kernel_dout => out_read_kernel_dout,
        out_read_kernel_empty_n => out_read_kernel_empty_n,
        out_read_kernel_read => direct_conv_U0_out_read_kernel_read,
        out_read_bias_dout => out_read_bias_dout,
        out_read_bias_empty_n => out_read_bias_empty_n,
        out_read_bias_read => direct_conv_U0_out_read_bias_read,
        out_conv_din => direct_conv_U0_out_conv_din,
        out_conv_full_n => out_conv_full_n,
        out_conv_write => direct_conv_U0_out_conv_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        enable_upper_padding_ap_vld => enable_upper_padding_ap_vld,
        enable_lower_padding_ap_vld => enable_lower_padding_ap_vld,
        ap_start => direct_conv_U0_ap_start,
        rows_ap_vld => rows_ap_vld,
        W_ap_vld => W_ap_vld,
        I_ITER_ap_vld => I_ITER_ap_vld,
        ap_done => direct_conv_U0_ap_done,
        ap_ready => direct_conv_U0_ap_ready,
        ap_idle => direct_conv_U0_ap_idle,
        ap_continue => direct_conv_U0_ap_continue);

    relu_U0 : component k_conv2D_relu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => relu_U0_ap_start,
        start_full_n => start_for_batch_norm_U0_full_n,
        ap_done => relu_U0_ap_done,
        ap_continue => relu_U0_ap_continue,
        ap_idle => relu_U0_ap_idle,
        ap_ready => relu_U0_ap_ready,
        start_out => relu_U0_start_out,
        start_write => relu_U0_start_write,
        enable_relu_dout => enable_relu_c_dout,
        enable_relu_empty_n => enable_relu_c_empty_n,
        enable_relu_read => relu_U0_enable_relu_read,
        H => rows,
        W => W,
        out_conv_dout => out_conv_dout,
        out_conv_empty_n => out_conv_empty_n,
        out_conv_read => relu_U0_out_conv_read,
        out_relu_din => relu_U0_out_relu_din,
        out_relu_full_n => out_relu_full_n,
        out_relu_write => relu_U0_out_relu_write);

    batch_norm_U0 : component k_conv2D_batch_norm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => batch_norm_U0_ap_start,
        start_full_n => start_for_pooling_U0_full_n,
        ap_done => batch_norm_U0_ap_done,
        ap_continue => batch_norm_U0_ap_continue,
        ap_idle => batch_norm_U0_ap_idle,
        ap_ready => batch_norm_U0_ap_ready,
        start_out => batch_norm_U0_start_out,
        start_write => batch_norm_U0_start_write,
        H => rows,
        W => W,
        out_relu_dout => out_relu_dout,
        out_relu_empty_n => out_relu_empty_n,
        out_relu_read => batch_norm_U0_out_relu_read,
        out_batch_norm_din => batch_norm_U0_out_batch_norm_din,
        out_batch_norm_full_n => out_batch_norm_full_n,
        out_batch_norm_write => batch_norm_U0_out_batch_norm_write);

    pooling_U0 : component k_conv2D_pooling
    port map (
        H => H,
        W => W,
        enable_maxpooling => enable_maxpooling,
        enable_avgpooling => enable_avgpooling,
        out_batch_norm_dout => out_batch_norm_dout,
        out_batch_norm_empty_n => out_batch_norm_empty_n,
        out_batch_norm_read => pooling_U0_out_batch_norm_read,
        out_pooling_din => pooling_U0_out_pooling_din,
        out_pooling_full_n => out_pooling_full_n,
        out_pooling_write => pooling_U0_out_pooling_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        enable_avgpooling_ap_vld => enable_avgpooling_ap_vld,
        enable_maxpooling_ap_vld => enable_maxpooling_ap_vld,
        W_ap_vld => W_ap_vld,
        H_ap_vld => H_ap_vld,
        ap_start => pooling_U0_ap_start,
        ap_done => pooling_U0_ap_done,
        ap_ready => pooling_U0_ap_ready,
        ap_idle => pooling_U0_ap_idle,
        ap_continue => pooling_U0_ap_continue);

    write_data_channels_gihwcpi_U0 : component k_conv2D_write_data_channels_gihwcpi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => write_data_channels_gihwcpi_U0_ap_start,
        ap_done => write_data_channels_gihwcpi_U0_ap_done,
        ap_continue => write_data_channels_gihwcpi_U0_ap_continue,
        ap_idle => write_data_channels_gihwcpi_U0_ap_idle,
        ap_ready => write_data_channels_gihwcpi_U0_ap_ready,
        m_axi_gmem3_AWVALID => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY => m_axi_gmem3_AWREADY,
        m_axi_gmem3_AWADDR => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER => write_data_channels_gihwcpi_U0_m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID => write_data_channels_gihwcpi_U0_m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY => m_axi_gmem3_WREADY,
        m_axi_gmem3_WDATA => write_data_channels_gihwcpi_U0_m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB => write_data_channels_gihwcpi_U0_m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST => write_data_channels_gihwcpi_U0_m_axi_gmem3_WLAST,
        m_axi_gmem3_WID => write_data_channels_gihwcpi_U0_m_axi_gmem3_WID,
        m_axi_gmem3_WUSER => write_data_channels_gihwcpi_U0_m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY => ap_const_logic_0,
        m_axi_gmem3_ARADDR => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER => write_data_channels_gihwcpi_U0_m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID => ap_const_logic_0,
        m_axi_gmem3_RREADY => write_data_channels_gihwcpi_U0_m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA => ap_const_lv128_lc_1,
        m_axi_gmem3_RLAST => ap_const_logic_0,
        m_axi_gmem3_RID => ap_const_lv1_0,
        m_axi_gmem3_RUSER => ap_const_lv1_0,
        m_axi_gmem3_RRESP => ap_const_lv2_0,
        m_axi_gmem3_BVALID => m_axi_gmem3_BVALID,
        m_axi_gmem3_BREADY => write_data_channels_gihwcpi_U0_m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP => m_axi_gmem3_BRESP,
        m_axi_gmem3_BID => m_axi_gmem3_BID,
        m_axi_gmem3_BUSER => m_axi_gmem3_BUSER,
        enable_avgpooling => enable_avgpooling,
        enable_maxpooling => enable_maxpooling,
        rows => rows,
        W => W,
        o_iter_dout => o_iter_c6_dout,
        o_iter_empty_n => o_iter_c6_empty_n,
        o_iter_read => write_data_channels_gihwcpi_U0_o_iter_read,
        o_iter_first => o_iter_first,
        ptr_out_dout => ptr_out_c_dout,
        ptr_out_empty_n => ptr_out_c_empty_n,
        ptr_out_read => write_data_channels_gihwcpi_U0_ptr_out_read,
        out_pooling_dout => out_pooling_dout,
        out_pooling_empty_n => out_pooling_empty_n,
        out_pooling_read => write_data_channels_gihwcpi_U0_out_pooling_read);

    o_iter_c4_U : component k_conv2D_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry8_U0_o_iter_out_din,
        if_full_n => o_iter_c4_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry8_U0_o_iter_out_write,
        if_dout => o_iter_c4_dout,
        if_empty_n => o_iter_c4_empty_n,
        if_read => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_read);

    global_offset_c5_U : component k_conv2D_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry8_U0_global_offset_out_din,
        if_full_n => global_offset_c5_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry8_U0_global_offset_out_write,
        if_dout => global_offset_c5_dout,
        if_empty_n => global_offset_c5_empty_n,
        if_read => dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_read);

    ptr_bias_c6_U : component k_conv2D_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_bias_out_din,
        if_full_n => ptr_bias_c6_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_bias_out_write,
        if_dout => ptr_bias_c6_dout,
        if_empty_n => ptr_bias_c6_empty_n,
        if_read => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_bias_read);

    ptr_kernel_c7_U : component k_conv2D_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_kernel_out_din,
        if_full_n => ptr_kernel_c7_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_kernel_out_write,
        if_dout => ptr_kernel_c7_dout,
        if_empty_n => ptr_kernel_c7_empty_n,
        if_read => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_kernel_read);

    ptr_data_c8_U : component k_conv2D_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_data_out_din,
        if_full_n => ptr_data_c8_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_data_out_write,
        if_dout => ptr_data_c8_dout,
        if_empty_n => ptr_data_c8_empty_n,
        if_read => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_data_read);

    enable_relu_c9_U : component k_conv2D_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry8_U0_enable_relu_out_din,
        if_full_n => enable_relu_c9_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry8_U0_enable_relu_out_write,
        if_dout => enable_relu_c9_dout,
        if_empty_n => enable_relu_c9_empty_n,
        if_read => dataflow_in_loop_o_iter_loop_entry25_U0_enable_relu_read);

    ptr_out_c10_U : component k_conv2D_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_out_out_din,
        if_full_n => ptr_out_c10_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry8_U0_ptr_out_out_write,
        if_dout => ptr_out_c10_dout,
        if_empty_n => ptr_out_c10_empty_n,
        if_read => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_out_read);

    o_iter_c1_U : component k_conv2D_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out1_din,
        if_full_n => o_iter_c1_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out1_write,
        if_dout => o_iter_c1_dout,
        if_empty_n => o_iter_c1_empty_n,
        if_read => read_bias_U0_o_iter_read);

    o_iter_c2_U : component k_conv2D_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out2_din,
        if_full_n => o_iter_c2_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out2_write,
        if_dout => o_iter_c2_dout,
        if_empty_n => o_iter_c2_empty_n,
        if_read => read_kernel_U0_o_iter_read);

    o_iter_c3_U : component k_conv2D_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out3_din,
        if_full_n => o_iter_c3_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_o_iter_out3_write,
        if_dout => o_iter_c3_dout,
        if_empty_n => o_iter_c3_empty_n,
        if_read => read_data_channels_gihwcpi_U0_o_iter_read);

    global_offset_c4_U : component k_conv2D_fifo_w32_d2_S_x0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out4_din,
        if_full_n => global_offset_c4_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_global_offset_out4_write,
        if_dout => global_offset_c4_dout,
        if_empty_n => global_offset_c4_empty_n,
        if_read => read_data_channels_gihwcpi_U0_global_offset_read);

    ptr_bias_c_U : component k_conv2D_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_bias_out_din,
        if_full_n => ptr_bias_c_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_bias_out_write,
        if_dout => ptr_bias_c_dout,
        if_empty_n => ptr_bias_c_empty_n,
        if_read => read_bias_U0_ptr_bias_read);

    ptr_kernel_c_U : component k_conv2D_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_kernel_out_din,
        if_full_n => ptr_kernel_c_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_kernel_out_write,
        if_dout => ptr_kernel_c_dout,
        if_empty_n => ptr_kernel_c_empty_n,
        if_read => read_kernel_U0_ptr_kernel_read);

    ptr_data_c_U : component k_conv2D_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_data_out_din,
        if_full_n => ptr_data_c_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_data_out_write,
        if_dout => ptr_data_c_dout,
        if_empty_n => ptr_data_c_empty_n,
        if_read => read_data_channels_gihwcpi_U0_ptr_data_read);

    enable_relu_c_U : component k_conv2D_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry25_U0_enable_relu_out_din,
        if_full_n => enable_relu_c_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_enable_relu_out_write,
        if_dout => enable_relu_c_dout,
        if_empty_n => enable_relu_c_empty_n,
        if_read => relu_U0_enable_relu_read);

    ptr_out_c_U : component k_conv2D_fifo_w64_d8_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_out_out_din,
        if_full_n => ptr_out_c_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_ptr_out_out_write,
        if_dout => ptr_out_c_dout,
        if_empty_n => ptr_out_c_empty_n,
        if_read => write_data_channels_gihwcpi_U0_ptr_out_read);

    out_read_bias_U : component k_conv2D_fifo_w128_d4_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_bias_U0_out_read_bias_din,
        if_full_n => out_read_bias_full_n,
        if_write => read_bias_U0_out_read_bias_write,
        if_dout => out_read_bias_dout,
        if_empty_n => out_read_bias_empty_n,
        if_read => direct_conv_U0_out_read_bias_read);

    out_read_kernel_U : component k_conv2D_fifo_w4608_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_kernel_U0_out_read_kernel_din,
        if_full_n => out_read_kernel_full_n,
        if_write => read_kernel_U0_out_read_kernel_write,
        if_dout => out_read_kernel_dout,
        if_empty_n => out_read_kernel_empty_n,
        if_read => direct_conv_U0_out_read_kernel_read);

    o_iter_c5_U : component k_conv2D_fifo_w31_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_data_channels_gihwcpi_U0_o_iter_out_din,
        if_full_n => o_iter_c5_full_n,
        if_write => read_data_channels_gihwcpi_U0_o_iter_out_write,
        if_dout => o_iter_c5_dout,
        if_empty_n => o_iter_c5_empty_n,
        if_read => input_buffer_U0_o_iter_read);

    out_read_data_U : component k_conv2D_fifo_w128_d4_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_data_channels_gihwcpi_U0_out_read_data_din,
        if_full_n => out_read_data_full_n,
        if_write => read_data_channels_gihwcpi_U0_out_read_data_write,
        if_dout => out_read_data_dout,
        if_empty_n => out_read_data_empty_n,
        if_read => input_buffer_U0_out_read_data_read);

    o_iter_c6_U : component k_conv2D_fifo_w31_d6_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => input_buffer_U0_o_iter_out_din,
        if_full_n => o_iter_c6_full_n,
        if_write => input_buffer_U0_o_iter_out_write,
        if_dout => o_iter_c6_dout,
        if_empty_n => o_iter_c6_empty_n,
        if_read => write_data_channels_gihwcpi_U0_o_iter_read);

    out_read_data_1_U : component k_conv2D_fifo_w128_d4_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => input_buffer_U0_out_read_data_1_din,
        if_full_n => out_read_data_1_full_n,
        if_write => input_buffer_U0_out_read_data_1_write,
        if_dout => out_read_data_1_dout,
        if_empty_n => out_read_data_1_empty_n,
        if_read => direct_conv_U0_out_read_data_1_read);

    out_conv_U : component k_conv2D_fifo_w128_d4_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => direct_conv_U0_out_conv_din,
        if_full_n => out_conv_full_n,
        if_write => direct_conv_U0_out_conv_write,
        if_dout => out_conv_dout,
        if_empty_n => out_conv_empty_n,
        if_read => relu_U0_out_conv_read);

    out_relu_U : component k_conv2D_fifo_w128_d4_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => relu_U0_out_relu_din,
        if_full_n => out_relu_full_n,
        if_write => relu_U0_out_relu_write,
        if_dout => out_relu_dout,
        if_empty_n => out_relu_empty_n,
        if_read => batch_norm_U0_out_relu_read);

    out_batch_norm_U : component k_conv2D_fifo_w128_d4_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => batch_norm_U0_out_batch_norm_din,
        if_full_n => out_batch_norm_full_n,
        if_write => batch_norm_U0_out_batch_norm_write,
        if_dout => out_batch_norm_dout,
        if_empty_n => out_batch_norm_empty_n,
        if_read => pooling_U0_out_batch_norm_read);

    out_pooling_U : component k_conv2D_fifo_w128_d4_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling_U0_out_pooling_din,
        if_full_n => out_pooling_full_n,
        if_write => pooling_U0_out_pooling_write,
        if_dout => out_pooling_dout,
        if_empty_n => out_pooling_empty_n,
        if_read => write_data_channels_gihwcpi_U0_out_pooling_read);

    start_for_dataflow_in_loop_o_iter_loop_entry25_U0_U : component k_conv2D_start_for_dataflow_in_loop_o_iter_loop_entry25_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dataflow_in_loop_o_iter_loop_entry25_U0_din,
        if_full_n => start_for_dataflow_in_loop_o_iter_loop_entry25_U0_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry8_U0_start_write,
        if_dout => start_for_dataflow_in_loop_o_iter_loop_entry25_U0_dout,
        if_empty_n => start_for_dataflow_in_loop_o_iter_loop_entry25_U0_empty_n,
        if_read => dataflow_in_loop_o_iter_loop_entry25_U0_ap_ready);

    start_for_relu_U0_U : component k_conv2D_start_for_relu_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_relu_U0_din,
        if_full_n => start_for_relu_U0_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_start_write,
        if_dout => start_for_relu_U0_dout,
        if_empty_n => start_for_relu_U0_empty_n,
        if_read => relu_U0_ap_ready);

    start_for_write_data_channels_gihwcpi_U0_U : component k_conv2D_start_for_write_data_channels_gihwcpi_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_data_channels_gihwcpi_U0_din,
        if_full_n => start_for_write_data_channels_gihwcpi_U0_full_n,
        if_write => dataflow_in_loop_o_iter_loop_entry25_U0_start_write,
        if_dout => start_for_write_data_channels_gihwcpi_U0_dout,
        if_empty_n => start_for_write_data_channels_gihwcpi_U0_empty_n,
        if_read => write_data_channels_gihwcpi_U0_ap_ready);

    start_for_direct_conv_U0_U : component k_conv2D_start_for_direct_conv_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_direct_conv_U0_din,
        if_full_n => start_for_direct_conv_U0_full_n,
        if_write => read_bias_U0_start_write,
        if_dout => start_for_direct_conv_U0_dout,
        if_empty_n => start_for_direct_conv_U0_empty_n,
        if_read => direct_conv_U0_ap_ready);

    start_for_input_buffer_U0_U : component k_conv2D_start_for_input_buffer_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_input_buffer_U0_din,
        if_full_n => start_for_input_buffer_U0_full_n,
        if_write => read_data_channels_gihwcpi_U0_start_write,
        if_dout => start_for_input_buffer_U0_dout,
        if_empty_n => start_for_input_buffer_U0_empty_n,
        if_read => input_buffer_U0_ap_ready);

    start_for_batch_norm_U0_U : component k_conv2D_start_for_batch_norm_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_batch_norm_U0_din,
        if_full_n => start_for_batch_norm_U0_full_n,
        if_write => relu_U0_start_write,
        if_dout => start_for_batch_norm_U0_dout,
        if_empty_n => start_for_batch_norm_U0_empty_n,
        if_read => batch_norm_U0_ap_ready);

    start_for_pooling_U0_U : component k_conv2D_start_for_pooling_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pooling_U0_din,
        if_full_n => start_for_pooling_U0_full_n,
        if_write => batch_norm_U0_start_write,
        if_dout => start_for_pooling_U0_dout,
        if_empty_n => start_for_pooling_U0_empty_n,
        if_read => pooling_U0_ap_ready);





    ap_sync_reg_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready <= ap_sync_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_bias_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_bias_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_bias_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_bias_U0_ap_ready <= ap_sync_read_bias_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_data_channels_gihwcpi_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_data_channels_gihwcpi_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_data_channels_gihwcpi_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_data_channels_gihwcpi_U0_ap_ready <= ap_sync_read_data_channels_gihwcpi_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_kernel_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_read_kernel_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_kernel_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_kernel_U0_ap_ready <= ap_sync_read_kernel_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_done <= write_data_channels_gihwcpi_U0_ap_done;
    ap_idle <= (write_data_channels_gihwcpi_U0_ap_idle and relu_U0_ap_idle and read_kernel_U0_ap_idle and read_data_channels_gihwcpi_U0_ap_idle and read_bias_U0_ap_idle and pooling_U0_ap_idle and input_buffer_U0_ap_idle and direct_conv_U0_ap_idle and dataflow_in_loop_o_iter_loop_entry8_U0_ap_idle and dataflow_in_loop_o_iter_loop_entry25_U0_ap_idle and batch_norm_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready <= (dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready or ap_sync_reg_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready);
    ap_sync_done <= write_data_channels_gihwcpi_U0_ap_done;
    ap_sync_read_bias_U0_ap_ready <= (read_bias_U0_ap_ready or ap_sync_reg_read_bias_U0_ap_ready);
    ap_sync_read_data_channels_gihwcpi_U0_ap_ready <= (read_data_channels_gihwcpi_U0_ap_ready or ap_sync_reg_read_data_channels_gihwcpi_U0_ap_ready);
    ap_sync_read_kernel_U0_ap_ready <= (read_kernel_U0_ap_ready or ap_sync_reg_read_kernel_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_kernel_U0_ap_ready and ap_sync_read_data_channels_gihwcpi_U0_ap_ready and ap_sync_read_bias_U0_ap_ready and ap_sync_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready);
    batch_norm_U0_ap_continue <= ap_const_logic_1;
    batch_norm_U0_ap_start <= start_for_batch_norm_U0_empty_n;
    dataflow_in_loop_o_iter_loop_entry25_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_o_iter_loop_entry25_U0_ap_start <= start_for_dataflow_in_loop_o_iter_loop_entry25_U0_empty_n;
    dataflow_in_loop_o_iter_loop_entry25_U0_start_full_n <= (start_for_write_data_channels_gihwcpi_U0_full_n and start_for_relu_U0_full_n);
    dataflow_in_loop_o_iter_loop_entry8_U0_ap_continue <= ap_const_logic_1;
    dataflow_in_loop_o_iter_loop_entry8_U0_ap_start <= ((ap_sync_reg_dataflow_in_loop_o_iter_loop_entry8_U0_ap_ready xor ap_const_logic_1) and ap_start);
    direct_conv_U0_ap_continue <= ap_const_logic_1;
    direct_conv_U0_ap_start <= start_for_direct_conv_U0_empty_n;
    direct_conv_U0_start_full_n <= ap_const_logic_1;
    direct_conv_U0_start_write <= ap_const_logic_0;
    input_buffer_U0_ap_continue <= ap_const_logic_1;
    input_buffer_U0_ap_start <= start_for_input_buffer_U0_empty_n;
    input_buffer_U0_start_full_n <= ap_const_logic_1;
    input_buffer_U0_start_write <= ap_const_logic_0;
    m_axi_gmem1_ARADDR <= read_kernel_U0_m_axi_gmem1_ARADDR;
    m_axi_gmem1_ARBURST <= read_kernel_U0_m_axi_gmem1_ARBURST;
    m_axi_gmem1_ARCACHE <= read_kernel_U0_m_axi_gmem1_ARCACHE;
    m_axi_gmem1_ARID <= read_kernel_U0_m_axi_gmem1_ARID;
    m_axi_gmem1_ARLEN <= read_kernel_U0_m_axi_gmem1_ARLEN;
    m_axi_gmem1_ARLOCK <= read_kernel_U0_m_axi_gmem1_ARLOCK;
    m_axi_gmem1_ARPROT <= read_kernel_U0_m_axi_gmem1_ARPROT;
    m_axi_gmem1_ARQOS <= read_kernel_U0_m_axi_gmem1_ARQOS;
    m_axi_gmem1_ARREGION <= read_kernel_U0_m_axi_gmem1_ARREGION;
    m_axi_gmem1_ARSIZE <= read_kernel_U0_m_axi_gmem1_ARSIZE;
    m_axi_gmem1_ARUSER <= read_kernel_U0_m_axi_gmem1_ARUSER;
    m_axi_gmem1_ARVALID <= read_kernel_U0_m_axi_gmem1_ARVALID;
    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;
    m_axi_gmem1_RREADY <= read_kernel_U0_m_axi_gmem1_RREADY;
    m_axi_gmem1_WDATA <= ap_const_lv32_0;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv4_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    m_axi_gmem2_ARADDR <= read_bias_U0_m_axi_gmem2_ARADDR;
    m_axi_gmem2_ARBURST <= read_bias_U0_m_axi_gmem2_ARBURST;
    m_axi_gmem2_ARCACHE <= read_bias_U0_m_axi_gmem2_ARCACHE;
    m_axi_gmem2_ARID <= read_bias_U0_m_axi_gmem2_ARID;
    m_axi_gmem2_ARLEN <= read_bias_U0_m_axi_gmem2_ARLEN;
    m_axi_gmem2_ARLOCK <= read_bias_U0_m_axi_gmem2_ARLOCK;
    m_axi_gmem2_ARPROT <= read_bias_U0_m_axi_gmem2_ARPROT;
    m_axi_gmem2_ARQOS <= read_bias_U0_m_axi_gmem2_ARQOS;
    m_axi_gmem2_ARREGION <= read_bias_U0_m_axi_gmem2_ARREGION;
    m_axi_gmem2_ARSIZE <= read_bias_U0_m_axi_gmem2_ARSIZE;
    m_axi_gmem2_ARUSER <= read_bias_U0_m_axi_gmem2_ARUSER;
    m_axi_gmem2_ARVALID <= read_bias_U0_m_axi_gmem2_ARVALID;
    m_axi_gmem2_AWADDR <= ap_const_lv64_0;
    m_axi_gmem2_AWBURST <= ap_const_lv2_0;
    m_axi_gmem2_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem2_AWID <= ap_const_lv1_0;
    m_axi_gmem2_AWLEN <= ap_const_lv32_0;
    m_axi_gmem2_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem2_AWPROT <= ap_const_lv3_0;
    m_axi_gmem2_AWQOS <= ap_const_lv4_0;
    m_axi_gmem2_AWREGION <= ap_const_lv4_0;
    m_axi_gmem2_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem2_AWUSER <= ap_const_lv1_0;
    m_axi_gmem2_AWVALID <= ap_const_logic_0;
    m_axi_gmem2_BREADY <= ap_const_logic_0;
    m_axi_gmem2_RREADY <= read_bias_U0_m_axi_gmem2_RREADY;
    m_axi_gmem2_WDATA <= ap_const_lv128_lc_1;
    m_axi_gmem2_WID <= ap_const_lv1_0;
    m_axi_gmem2_WLAST <= ap_const_logic_0;
    m_axi_gmem2_WSTRB <= ap_const_lv16_0;
    m_axi_gmem2_WUSER <= ap_const_lv1_0;
    m_axi_gmem2_WVALID <= ap_const_logic_0;
    m_axi_gmem3_ARADDR <= ap_const_lv64_0;
    m_axi_gmem3_ARBURST <= ap_const_lv2_0;
    m_axi_gmem3_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem3_ARID <= ap_const_lv1_0;
    m_axi_gmem3_ARLEN <= ap_const_lv32_0;
    m_axi_gmem3_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem3_ARPROT <= ap_const_lv3_0;
    m_axi_gmem3_ARQOS <= ap_const_lv4_0;
    m_axi_gmem3_ARREGION <= ap_const_lv4_0;
    m_axi_gmem3_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem3_ARUSER <= ap_const_lv1_0;
    m_axi_gmem3_ARVALID <= ap_const_logic_0;
    m_axi_gmem3_AWADDR <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWADDR;
    m_axi_gmem3_AWBURST <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWBURST;
    m_axi_gmem3_AWCACHE <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWCACHE;
    m_axi_gmem3_AWID <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWID;
    m_axi_gmem3_AWLEN <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWLEN;
    m_axi_gmem3_AWLOCK <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWLOCK;
    m_axi_gmem3_AWPROT <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWPROT;
    m_axi_gmem3_AWQOS <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWQOS;
    m_axi_gmem3_AWREGION <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWREGION;
    m_axi_gmem3_AWSIZE <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWSIZE;
    m_axi_gmem3_AWUSER <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWUSER;
    m_axi_gmem3_AWVALID <= write_data_channels_gihwcpi_U0_m_axi_gmem3_AWVALID;
    m_axi_gmem3_BREADY <= write_data_channels_gihwcpi_U0_m_axi_gmem3_BREADY;
    m_axi_gmem3_RREADY <= ap_const_logic_0;
    m_axi_gmem3_WDATA <= write_data_channels_gihwcpi_U0_m_axi_gmem3_WDATA;
    m_axi_gmem3_WID <= write_data_channels_gihwcpi_U0_m_axi_gmem3_WID;
    m_axi_gmem3_WLAST <= write_data_channels_gihwcpi_U0_m_axi_gmem3_WLAST;
    m_axi_gmem3_WSTRB <= write_data_channels_gihwcpi_U0_m_axi_gmem3_WSTRB;
    m_axi_gmem3_WUSER <= write_data_channels_gihwcpi_U0_m_axi_gmem3_WUSER;
    m_axi_gmem3_WVALID <= write_data_channels_gihwcpi_U0_m_axi_gmem3_WVALID;
    m_axi_gmem_ARADDR <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARUSER;
    m_axi_gmem_ARVALID <= read_data_channels_gihwcpi_U0_m_axi_gmem_ARVALID;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= read_data_channels_gihwcpi_U0_m_axi_gmem_RREADY;
    m_axi_gmem_WDATA <= ap_const_lv128_lc_1;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv16_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    pooling_U0_ap_continue <= ap_const_logic_1;
    pooling_U0_ap_start <= start_for_pooling_U0_empty_n;
    pooling_U0_start_full_n <= ap_const_logic_1;
    pooling_U0_start_write <= ap_const_logic_0;
    read_bias_U0_ap_continue <= ap_const_logic_1;
    read_bias_U0_ap_start <= ((ap_sync_reg_read_bias_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_data_channels_gihwcpi_U0_ap_continue <= ap_const_logic_1;
    read_data_channels_gihwcpi_U0_ap_start <= ((ap_sync_reg_read_data_channels_gihwcpi_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_kernel_U0_ap_continue <= ap_const_logic_1;
    read_kernel_U0_ap_start <= ((ap_sync_reg_read_kernel_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_kernel_U0_start_full_n <= ap_const_logic_1;
    read_kernel_U0_start_write <= ap_const_logic_0;
    relu_U0_ap_continue <= ap_const_logic_1;
    relu_U0_ap_start <= start_for_relu_U0_empty_n;
    start_for_batch_norm_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_dataflow_in_loop_o_iter_loop_entry25_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_direct_conv_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_input_buffer_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_pooling_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_relu_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_write_data_channels_gihwcpi_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_data_channels_gihwcpi_U0_ap_continue <= ap_continue;
    write_data_channels_gihwcpi_U0_ap_start <= start_for_write_data_channels_gihwcpi_U0_empty_n;
    write_data_channels_gihwcpi_U0_start_full_n <= ap_const_logic_1;
    write_data_channels_gihwcpi_U0_start_write <= ap_const_logic_0;
end behav;
