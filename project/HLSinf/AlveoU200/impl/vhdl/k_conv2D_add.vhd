-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k_conv2D_add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    H : IN STD_LOGIC_VECTOR (31 downto 0);
    W : IN STD_LOGIC_VECTOR (31 downto 0);
    I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
    out_read_bias_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    out_read_bias_empty_n : IN STD_LOGIC;
    out_read_bias_read : OUT STD_LOGIC;
    str_mul_add_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    str_mul_add_empty_n : IN STD_LOGIC;
    str_mul_add_read : OUT STD_LOGIC;
    out_conv_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_conv_full_n : IN STD_LOGIC;
    out_conv_write : OUT STD_LOGIC );
end;


architecture behav of k_conv2D_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal buff_o_channels_ce0 : STD_LOGIC;
    signal buff_o_channels_we0 : STD_LOGIC;
    signal buff_o_channels_address1 : STD_LOGIC_VECTOR (15 downto 0);
    signal buff_o_channels_ce1 : STD_LOGIC;
    signal buff_o_channels_q1 : STD_LOGIC_VECTOR (127 downto 0);
    signal out_read_bias_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal str_mul_add_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_conv_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal cmp16_i_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal it_reg_149 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_382 : STD_LOGIC_VECTOR (127 downto 0);
    signal sub_i_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_iter_1_fu_188_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_iter_1_reg_392 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln56_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp4_i_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp4_i_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp16_i_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_fu_214_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln61_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal buff_o_channels_addr_reg_419 : STD_LOGIC_VECTOR (15 downto 0);
    signal buff_o_channels_addr_reg_419_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal buff_o_channels_addr_reg_419_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal buff_o_channels_addr_reg_419_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal buff_o_channels_addr_reg_419_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal buff_o_channels_addr_reg_419_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal buff_o_channels_addr_reg_419_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal buff_o_channels_addr_reg_419_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal buff_o_channels_addr_reg_419_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln64_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_1_reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_2_reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln64_3_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln36_2_reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln36_3_reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln36_4_reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln36_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln36_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_reg_505 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_1_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_2_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_out_3_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal i_iter_reg_138 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal it_cast_i_fu_225_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal or_ln_fu_348_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_160_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln56_fu_194_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_in_sroa_0_0_in_in_i_fu_264_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal bitcast_ln76_3_fu_345_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_2_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_1_fu_339_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_ce : STD_LOGIC;
    signal grp_fu_164_ce : STD_LOGIC;
    signal grp_fu_168_ce : STD_LOGIC;
    signal grp_fu_172_ce : STD_LOGIC;
    signal grp_fu_176_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component k_conv2D_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k_conv2D_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k_conv2D_add_buff_o_channels IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        address1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    buff_o_channels_U : component k_conv2D_add_buff_o_channels
    generic map (
        DataWidth => 128,
        AddressRange => 65536,
        AddressWidth => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buff_o_channels_addr_reg_419_pp0_iter8_reg,
        ce0 => buff_o_channels_ce0,
        we0 => buff_o_channels_we0,
        d0 => or_ln_fu_348_p5,
        address1 => buff_o_channels_address1,
        ce1 => buff_o_channels_ce1,
        q1 => buff_o_channels_q1);

    fadd_32ns_32ns_32_7_full_dsp_1_U400 : component k_conv2D_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_160_p0,
        din1 => grp_fu_160_p1,
        ce => grp_fu_160_ce,
        dout => grp_fu_160_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U401 : component k_conv2D_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_164_p0,
        din1 => grp_fu_164_p1,
        ce => grp_fu_164_ce,
        dout => grp_fu_164_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U402 : component k_conv2D_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_168_p1,
        ce => grp_fu_168_ce,
        dout => grp_fu_168_p2);

    fadd_32ns_32ns_32_7_full_dsp_1_U403 : component k_conv2D_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_172_p0,
        din1 => grp_fu_172_p1,
        ce => grp_fu_172_ce,
        dout => grp_fu_172_p2);

    mul_32s_32s_32_2_1_U404 : component k_conv2D_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => W,
        din1 => H,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln56_fu_198_p2 = ap_const_lv1_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln56_fu_198_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln56_fu_198_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_iter_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_iter_reg_138 <= i_iter_1_reg_392;
            elsif (((out_read_bias_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_iter_reg_138 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;

    it_reg_149_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                it_reg_149 <= add_ln61_fu_214_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln56_fu_198_p2 = ap_const_lv1_1))) then 
                it_reg_149 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln61_fu_220_p2 = ap_const_lv1_0))) then
                buff_o_channels_addr_reg_419 <= it_cast_i_fu_225_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                buff_o_channels_addr_reg_419_pp0_iter1_reg <= buff_o_channels_addr_reg_419;
                trunc_ln36_2_reg_445 <= data_in_sroa_0_0_in_in_i_fu_264_p3(127 downto 96);
                trunc_ln36_3_reg_450 <= data_in_sroa_0_0_in_in_i_fu_264_p3(95 downto 64);
                trunc_ln36_4_reg_455 <= data_in_sroa_0_0_in_in_i_fu_264_p3(63 downto 32);
                trunc_ln36_reg_460 <= trunc_ln36_fu_300_p1;
                trunc_ln64_1_reg_430 <= str_mul_add_dout(63 downto 32);
                trunc_ln64_2_reg_435 <= str_mul_add_dout(95 downto 64);
                trunc_ln64_3_reg_440 <= str_mul_add_dout(127 downto 96);
                trunc_ln64_reg_425 <= trunc_ln64_fu_230_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                buff_o_channels_addr_reg_419_pp0_iter2_reg <= buff_o_channels_addr_reg_419_pp0_iter1_reg;
                buff_o_channels_addr_reg_419_pp0_iter3_reg <= buff_o_channels_addr_reg_419_pp0_iter2_reg;
                buff_o_channels_addr_reg_419_pp0_iter4_reg <= buff_o_channels_addr_reg_419_pp0_iter3_reg;
                buff_o_channels_addr_reg_419_pp0_iter5_reg <= buff_o_channels_addr_reg_419_pp0_iter4_reg;
                buff_o_channels_addr_reg_419_pp0_iter6_reg <= buff_o_channels_addr_reg_419_pp0_iter5_reg;
                buff_o_channels_addr_reg_419_pp0_iter7_reg <= buff_o_channels_addr_reg_419_pp0_iter6_reg;
                buff_o_channels_addr_reg_419_pp0_iter8_reg <= buff_o_channels_addr_reg_419_pp0_iter7_reg;
                data_out_1_reg_510 <= grp_fu_164_p2;
                data_out_2_reg_515 <= grp_fu_168_p2;
                data_out_3_reg_520 <= grp_fu_172_p2;
                data_out_reg_505 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln56_fu_198_p2 = ap_const_lv1_1))) then
                cmp16_i_reg_406 <= cmp16_i_fu_209_p2;
                cmp4_i_reg_401 <= cmp4_i_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_iter_1_reg_392 <= i_iter_1_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_reg_382 <= out_read_bias_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, out_read_bias_empty_n, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_CS_fsm_state3, icmp_ln56_fu_198_p2, ap_enable_reg_pp0_iter0, icmp_ln61_fu_220_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter8)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((out_read_bias_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln56_fu_198_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln61_fu_220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln61_fu_220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln61_fu_214_p2 <= std_logic_vector(unsigned(it_reg_149) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(4);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(str_mul_add_empty_n, out_conv_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, cmp16_i_reg_406)
    begin
                ap_block_pp0_stage0_01001 <= (((cmp16_i_reg_406 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (out_conv_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (str_mul_add_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(str_mul_add_empty_n, out_conv_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, cmp16_i_reg_406)
    begin
                ap_block_pp0_stage0_11001 <= (((cmp16_i_reg_406 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (out_conv_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (str_mul_add_empty_n = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(str_mul_add_empty_n, out_conv_full_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, cmp16_i_reg_406)
    begin
                ap_block_pp0_stage0_subdone <= (((cmp16_i_reg_406 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (out_conv_full_n = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (str_mul_add_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_pp0_stage0_iter9_assign_proc : process(out_conv_full_n, cmp16_i_reg_406)
    begin
                ap_block_state13_pp0_stage0_iter9 <= ((cmp16_i_reg_406 = ap_const_lv1_1) and (out_conv_full_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(str_mul_add_empty_n)
    begin
                ap_block_state5_pp0_stage0_iter1 <= (str_mul_add_empty_n = ap_const_logic_0);
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln61_fu_220_p2)
    begin
        if ((icmp_ln61_fu_220_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, icmp_ln56_fu_198_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln56_fu_198_p2 = ap_const_lv1_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln56_fu_198_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln56_fu_198_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln76_1_fu_339_p1 <= data_out_1_reg_510;
    bitcast_ln76_2_fu_342_p1 <= data_out_2_reg_515;
    bitcast_ln76_3_fu_345_p1 <= data_out_3_reg_520;
    bitcast_ln76_fu_336_p1 <= data_out_reg_505;
    buff_o_channels_address1 <= it_cast_i_fu_225_p1(16 - 1 downto 0);

    buff_o_channels_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_o_channels_ce0 <= ap_const_logic_1;
        else 
            buff_o_channels_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buff_o_channels_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            buff_o_channels_ce1 <= ap_const_logic_1;
        else 
            buff_o_channels_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buff_o_channels_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buff_o_channels_we0 <= ap_const_logic_1;
        else 
            buff_o_channels_we0 <= ap_const_logic_0;
        end if; 
    end process;

    cmp16_i_fu_209_p2 <= "1" when (zext_ln56_fu_194_p1 = sub_i_fu_182_p2) else "0";
    cmp4_i_fu_203_p2 <= "1" when (i_iter_reg_138 = ap_const_lv31_0) else "0";
    data_in_sroa_0_0_in_in_i_fu_264_p3 <= 
        tmp_reg_382 when (cmp4_i_reg_401(0) = '1') else 
        buff_o_channels_q1;

    grp_fu_160_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_160_ce <= ap_const_logic_1;
        else 
            grp_fu_160_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_160_p0 <= trunc_ln36_reg_460;
    grp_fu_160_p1 <= trunc_ln64_reg_425;

    grp_fu_164_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_164_ce <= ap_const_logic_1;
        else 
            grp_fu_164_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_164_p0 <= trunc_ln36_4_reg_455;
    grp_fu_164_p1 <= trunc_ln64_1_reg_430;

    grp_fu_168_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_168_ce <= ap_const_logic_1;
        else 
            grp_fu_168_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_168_p0 <= trunc_ln36_3_reg_450;
    grp_fu_168_p1 <= trunc_ln64_2_reg_435;

    grp_fu_172_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_172_ce <= ap_const_logic_1;
        else 
            grp_fu_172_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_172_p0 <= trunc_ln36_2_reg_445;
    grp_fu_172_p1 <= trunc_ln64_3_reg_440;

    grp_fu_176_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_read_bias_empty_n, ap_CS_fsm_state2)
    begin
        if (((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((out_read_bias_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_iter_1_fu_188_p2 <= std_logic_vector(unsigned(i_iter_reg_138) + unsigned(ap_const_lv31_1));
    icmp_ln56_fu_198_p2 <= "1" when (signed(zext_ln56_fu_194_p1) < signed(I_ITER)) else "0";
    icmp_ln61_fu_220_p2 <= "1" when (it_reg_149 = grp_fu_176_p2) else "0";
    it_cast_i_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(it_reg_149),64));
    or_ln_fu_348_p5 <= (((bitcast_ln76_3_fu_345_p1 & bitcast_ln76_2_fu_342_p1) & bitcast_ln76_1_fu_339_p1) & bitcast_ln76_fu_336_p1);

    out_conv_blk_n_assign_proc : process(out_conv_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9, cmp16_i_reg_406)
    begin
        if (((cmp16_i_reg_406 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_conv_blk_n <= out_conv_full_n;
        else 
            out_conv_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_conv_din <= or_ln_fu_348_p5;

    out_conv_write_assign_proc : process(ap_enable_reg_pp0_iter9, cmp16_i_reg_406, ap_block_pp0_stage0_11001)
    begin
        if (((cmp16_i_reg_406 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_conv_write <= ap_const_logic_1;
        else 
            out_conv_write <= ap_const_logic_0;
        end if; 
    end process;


    out_read_bias_blk_n_assign_proc : process(out_read_bias_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            out_read_bias_blk_n <= out_read_bias_empty_n;
        else 
            out_read_bias_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_read_bias_read_assign_proc : process(out_read_bias_empty_n, ap_CS_fsm_state2)
    begin
        if (((out_read_bias_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_read_bias_read <= ap_const_logic_1;
        else 
            out_read_bias_read <= ap_const_logic_0;
        end if; 
    end process;


    str_mul_add_blk_n_assign_proc : process(str_mul_add_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            str_mul_add_blk_n <= str_mul_add_empty_n;
        else 
            str_mul_add_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    str_mul_add_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            str_mul_add_read <= ap_const_logic_1;
        else 
            str_mul_add_read <= ap_const_logic_0;
        end if; 
    end process;

    sub_i_fu_182_p2 <= std_logic_vector(unsigned(I_ITER) + unsigned(ap_const_lv32_FFFFFFFF));
    trunc_ln36_fu_300_p1 <= data_in_sroa_0_0_in_in_i_fu_264_p3(32 - 1 downto 0);
    trunc_ln64_fu_230_p1 <= str_mul_add_dout(32 - 1 downto 0);
    zext_ln56_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_iter_reg_138),32));
end behav;
