-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k_conv2D_pooling is
port (
    H : IN STD_LOGIC_VECTOR (31 downto 0);
    W : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_maxpooling : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_avgpooling : IN STD_LOGIC_VECTOR (31 downto 0);
    out_batch_norm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    out_batch_norm_empty_n : IN STD_LOGIC;
    out_batch_norm_read : OUT STD_LOGIC;
    out_pooling_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_pooling_full_n : IN STD_LOGIC;
    out_pooling_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    enable_avgpooling_ap_vld : IN STD_LOGIC;
    enable_maxpooling_ap_vld : IN STD_LOGIC;
    W_ap_vld : IN STD_LOGIC;
    H_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of k_conv2D_pooling is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

attribute shreg_extract : string;
    signal pooling_Block_split7_proc_U0_ap_start : STD_LOGIC;
    signal pooling_Block_split7_proc_U0_ap_done : STD_LOGIC;
    signal pooling_Block_split7_proc_U0_ap_continue : STD_LOGIC;
    signal pooling_Block_split7_proc_U0_ap_idle : STD_LOGIC;
    signal pooling_Block_split7_proc_U0_ap_ready : STD_LOGIC;
    signal pooling_Block_split7_proc_U0_start_out : STD_LOGIC;
    signal pooling_Block_split7_proc_U0_start_write : STD_LOGIC;
    signal pooling_Block_split7_proc_U0_cond1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pooling_Block_split7_proc_U0_cond1_out_out_write : STD_LOGIC;
    signal pooling_Block_split7_proc_U0_HO_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal pooling_Block_split7_proc_U0_HO_out_out_write : STD_LOGIC;
    signal pooling_Block_split7_proc_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_enable_pooling_loc_i_channel : STD_LOGIC;
    signal enable_pooling_loc_i_channel_full_n : STD_LOGIC;
    signal pool_cvt_U0_ap_start : STD_LOGIC;
    signal pool_cvt_U0_ap_done : STD_LOGIC;
    signal pool_cvt_U0_ap_continue : STD_LOGIC;
    signal pool_cvt_U0_ap_idle : STD_LOGIC;
    signal pool_cvt_U0_ap_ready : STD_LOGIC;
    signal pool_cvt_U0_out_batch_norm_read : STD_LOGIC;
    signal pool_cvt_U0_stream_pool_din : STD_LOGIC_VECTOR (511 downto 0);
    signal pool_cvt_U0_stream_pool_write : STD_LOGIC;
    signal pool_pooling_U0_ap_start : STD_LOGIC;
    signal pool_pooling_U0_ap_done : STD_LOGIC;
    signal pool_pooling_U0_ap_continue : STD_LOGIC;
    signal pool_pooling_U0_ap_idle : STD_LOGIC;
    signal pool_pooling_U0_ap_ready : STD_LOGIC;
    signal pool_pooling_U0_HO_loc_i_read : STD_LOGIC;
    signal pool_pooling_U0_cond1_loc_i_read : STD_LOGIC;
    signal pool_pooling_U0_stream_pool_read : STD_LOGIC;
    signal pool_pooling_U0_out_pooling_din : STD_LOGIC_VECTOR (127 downto 0);
    signal pool_pooling_U0_out_pooling_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal cond1_loc_i_c_full_n : STD_LOGIC;
    signal cond1_loc_i_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cond1_loc_i_c_empty_n : STD_LOGIC;
    signal HO_loc_i_c_full_n : STD_LOGIC;
    signal HO_loc_i_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal HO_loc_i_c_empty_n : STD_LOGIC;
    signal enable_pooling_loc_i_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_pooling_loc_i_channel_empty_n : STD_LOGIC;
    signal stream_pool_full_n : STD_LOGIC;
    signal stream_pool_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal stream_pool_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_pool_pooling_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_pooling_U0_full_n : STD_LOGIC;
    signal start_for_pool_pooling_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_pool_pooling_U0_empty_n : STD_LOGIC;
    signal pool_cvt_U0_start_full_n : STD_LOGIC;
    signal pool_cvt_U0_start_write : STD_LOGIC;
    signal pool_pooling_U0_start_full_n : STD_LOGIC;
    signal pool_pooling_U0_start_write : STD_LOGIC;

    component k_conv2D_pooling_Block_split7_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        enable_avgpooling : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_maxpooling : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        H : IN STD_LOGIC_VECTOR (31 downto 0);
        cond1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cond1_out_out_full_n : IN STD_LOGIC;
        cond1_out_out_write : OUT STD_LOGIC;
        HO_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        HO_out_out_full_n : IN STD_LOGIC;
        HO_out_out_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k_conv2D_pool_cvt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        H : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        out_batch_norm_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_batch_norm_empty_n : IN STD_LOGIC;
        out_batch_norm_read : OUT STD_LOGIC;
        stream_pool_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        stream_pool_full_n : IN STD_LOGIC;
        stream_pool_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_pool_pooling IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        HO_loc_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        HO_loc_i_empty_n : IN STD_LOGIC;
        HO_loc_i_read : OUT STD_LOGIC;
        cond1_loc_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cond1_loc_i_empty_n : IN STD_LOGIC;
        cond1_loc_i_read : OUT STD_LOGIC;
        enable_maxpooling : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_avgpooling : IN STD_LOGIC_VECTOR (31 downto 0);
        stream_pool_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        stream_pool_empty_n : IN STD_LOGIC;
        stream_pool_read : OUT STD_LOGIC;
        out_pooling_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_pooling_full_n : IN STD_LOGIC;
        out_pooling_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w32_d2_S_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w512_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_pool_pooling_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    pooling_Block_split7_proc_U0 : component k_conv2D_pooling_Block_split7_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pooling_Block_split7_proc_U0_ap_start,
        start_full_n => start_for_pool_pooling_U0_full_n,
        ap_done => pooling_Block_split7_proc_U0_ap_done,
        ap_continue => pooling_Block_split7_proc_U0_ap_continue,
        ap_idle => pooling_Block_split7_proc_U0_ap_idle,
        ap_ready => pooling_Block_split7_proc_U0_ap_ready,
        start_out => pooling_Block_split7_proc_U0_start_out,
        start_write => pooling_Block_split7_proc_U0_start_write,
        enable_avgpooling => enable_avgpooling,
        enable_maxpooling => enable_maxpooling,
        W => W,
        H => H,
        cond1_out_out_din => pooling_Block_split7_proc_U0_cond1_out_out_din,
        cond1_out_out_full_n => cond1_loc_i_c_full_n,
        cond1_out_out_write => pooling_Block_split7_proc_U0_cond1_out_out_write,
        HO_out_out_din => pooling_Block_split7_proc_U0_HO_out_out_din,
        HO_out_out_full_n => HO_loc_i_c_full_n,
        HO_out_out_write => pooling_Block_split7_proc_U0_HO_out_out_write,
        ap_return => pooling_Block_split7_proc_U0_ap_return);

    pool_cvt_U0 : component k_conv2D_pool_cvt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pool_cvt_U0_ap_start,
        ap_done => pool_cvt_U0_ap_done,
        ap_continue => pool_cvt_U0_ap_continue,
        ap_idle => pool_cvt_U0_ap_idle,
        ap_ready => pool_cvt_U0_ap_ready,
        H => H,
        W => W,
        p_read => enable_pooling_loc_i_channel_dout,
        out_batch_norm_dout => out_batch_norm_dout,
        out_batch_norm_empty_n => out_batch_norm_empty_n,
        out_batch_norm_read => pool_cvt_U0_out_batch_norm_read,
        stream_pool_din => pool_cvt_U0_stream_pool_din,
        stream_pool_full_n => stream_pool_full_n,
        stream_pool_write => pool_cvt_U0_stream_pool_write);

    pool_pooling_U0 : component k_conv2D_pool_pooling
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => pool_pooling_U0_ap_start,
        ap_done => pool_pooling_U0_ap_done,
        ap_continue => pool_pooling_U0_ap_continue,
        ap_idle => pool_pooling_U0_ap_idle,
        ap_ready => pool_pooling_U0_ap_ready,
        HO_loc_i_dout => HO_loc_i_c_dout,
        HO_loc_i_empty_n => HO_loc_i_c_empty_n,
        HO_loc_i_read => pool_pooling_U0_HO_loc_i_read,
        cond1_loc_i_dout => cond1_loc_i_c_dout,
        cond1_loc_i_empty_n => cond1_loc_i_c_empty_n,
        cond1_loc_i_read => pool_pooling_U0_cond1_loc_i_read,
        enable_maxpooling => enable_maxpooling,
        enable_avgpooling => enable_avgpooling,
        stream_pool_dout => stream_pool_dout,
        stream_pool_empty_n => stream_pool_empty_n,
        stream_pool_read => pool_pooling_U0_stream_pool_read,
        out_pooling_din => pool_pooling_U0_out_pooling_din,
        out_pooling_full_n => out_pooling_full_n,
        out_pooling_write => pool_pooling_U0_out_pooling_write);

    cond1_loc_i_c_U : component k_conv2D_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling_Block_split7_proc_U0_cond1_out_out_din,
        if_full_n => cond1_loc_i_c_full_n,
        if_write => pooling_Block_split7_proc_U0_cond1_out_out_write,
        if_dout => cond1_loc_i_c_dout,
        if_empty_n => cond1_loc_i_c_empty_n,
        if_read => pool_pooling_U0_cond1_loc_i_read);

    HO_loc_i_c_U : component k_conv2D_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling_Block_split7_proc_U0_HO_out_out_din,
        if_full_n => HO_loc_i_c_full_n,
        if_write => pooling_Block_split7_proc_U0_HO_out_out_write,
        if_dout => HO_loc_i_c_dout,
        if_empty_n => HO_loc_i_c_empty_n,
        if_read => pool_pooling_U0_HO_loc_i_read);

    enable_pooling_loc_i_channel_U : component k_conv2D_fifo_w32_d2_S_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pooling_Block_split7_proc_U0_ap_return,
        if_full_n => enable_pooling_loc_i_channel_full_n,
        if_write => pooling_Block_split7_proc_U0_ap_done,
        if_dout => enable_pooling_loc_i_channel_dout,
        if_empty_n => enable_pooling_loc_i_channel_empty_n,
        if_read => pool_cvt_U0_ap_ready);

    stream_pool_U : component k_conv2D_fifo_w512_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => pool_cvt_U0_stream_pool_din,
        if_full_n => stream_pool_full_n,
        if_write => pool_cvt_U0_stream_pool_write,
        if_dout => stream_pool_dout,
        if_empty_n => stream_pool_empty_n,
        if_read => pool_pooling_U0_stream_pool_read);

    start_for_pool_pooling_U0_U : component k_conv2D_start_for_pool_pooling_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_pool_pooling_U0_din,
        if_full_n => start_for_pool_pooling_U0_full_n,
        if_write => pooling_Block_split7_proc_U0_start_write,
        if_dout => start_for_pool_pooling_U0_dout,
        if_empty_n => start_for_pool_pooling_U0_empty_n,
        if_read => pool_pooling_U0_ap_ready);




    ap_channel_done_enable_pooling_loc_i_channel <= pooling_Block_split7_proc_U0_ap_done;
    ap_done <= pool_pooling_U0_ap_done;
    ap_idle <= (pooling_Block_split7_proc_U0_ap_idle and pool_pooling_U0_ap_idle and pool_cvt_U0_ap_idle and (enable_pooling_loc_i_channel_empty_n xor ap_const_logic_1));
    ap_ready <= pooling_Block_split7_proc_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= pool_pooling_U0_ap_done;
    ap_sync_ready <= pooling_Block_split7_proc_U0_ap_ready;
    out_batch_norm_read <= pool_cvt_U0_out_batch_norm_read;
    out_pooling_din <= pool_pooling_U0_out_pooling_din;
    out_pooling_write <= pool_pooling_U0_out_pooling_write;
    pool_cvt_U0_ap_continue <= ap_const_logic_1;
    pool_cvt_U0_ap_start <= enable_pooling_loc_i_channel_empty_n;
    pool_cvt_U0_start_full_n <= ap_const_logic_1;
    pool_cvt_U0_start_write <= ap_const_logic_0;
    pool_pooling_U0_ap_continue <= ap_continue;
    pool_pooling_U0_ap_start <= start_for_pool_pooling_U0_empty_n;
    pool_pooling_U0_start_full_n <= ap_const_logic_1;
    pool_pooling_U0_start_write <= ap_const_logic_0;
    pooling_Block_split7_proc_U0_ap_continue <= enable_pooling_loc_i_channel_full_n;
    pooling_Block_split7_proc_U0_ap_start <= ap_start;
    start_for_pool_pooling_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
