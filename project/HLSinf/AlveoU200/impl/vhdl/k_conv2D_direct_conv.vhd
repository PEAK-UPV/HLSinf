-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k_conv2D_direct_conv is
port (
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    W : IN STD_LOGIC_VECTOR (31 downto 0);
    I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_upper_padding : IN STD_LOGIC_VECTOR (31 downto 0);
    enable_lower_padding : IN STD_LOGIC_VECTOR (31 downto 0);
    out_read_data_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    out_read_data_1_empty_n : IN STD_LOGIC;
    out_read_data_1_read : OUT STD_LOGIC;
    out_read_kernel_dout : IN STD_LOGIC_VECTOR (4607 downto 0);
    out_read_kernel_empty_n : IN STD_LOGIC;
    out_read_kernel_read : OUT STD_LOGIC;
    out_read_bias_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    out_read_bias_empty_n : IN STD_LOGIC;
    out_read_bias_read : OUT STD_LOGIC;
    out_conv_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    out_conv_full_n : IN STD_LOGIC;
    out_conv_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    enable_upper_padding_ap_vld : IN STD_LOGIC;
    enable_lower_padding_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    rows_ap_vld : IN STD_LOGIC;
    W_ap_vld : IN STD_LOGIC;
    I_ITER_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of k_conv2D_direct_conv is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

attribute shreg_extract : string;
    signal direct_conv_entry5_U0_ap_start : STD_LOGIC;
    signal direct_conv_entry5_U0_ap_done : STD_LOGIC;
    signal direct_conv_entry5_U0_ap_continue : STD_LOGIC;
    signal direct_conv_entry5_U0_ap_idle : STD_LOGIC;
    signal direct_conv_entry5_U0_ap_ready : STD_LOGIC;
    signal direct_conv_entry5_U0_start_out : STD_LOGIC;
    signal direct_conv_entry5_U0_start_write : STD_LOGIC;
    signal direct_conv_entry5_U0_enable_upper_padding_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal direct_conv_entry5_U0_enable_upper_padding_out_write : STD_LOGIC;
    signal direct_conv_entry5_U0_enable_lower_padding_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal direct_conv_entry5_U0_enable_lower_padding_out_write : STD_LOGIC;
    signal padding_U0_ap_start : STD_LOGIC;
    signal padding_U0_ap_done : STD_LOGIC;
    signal padding_U0_ap_continue : STD_LOGIC;
    signal padding_U0_ap_idle : STD_LOGIC;
    signal padding_U0_ap_ready : STD_LOGIC;
    signal padding_U0_start_out : STD_LOGIC;
    signal padding_U0_start_write : STD_LOGIC;
    signal padding_U0_enable_upper_padding_read : STD_LOGIC;
    signal padding_U0_enable_lower_padding_read : STD_LOGIC;
    signal padding_U0_out_read_data_1_read : STD_LOGIC;
    signal padding_U0_str_pad_cvt_din : STD_LOGIC_VECTOR (127 downto 0);
    signal padding_U0_str_pad_cvt_write : STD_LOGIC;
    signal cvt_U0_ap_start : STD_LOGIC;
    signal cvt_U0_ap_done : STD_LOGIC;
    signal cvt_U0_ap_continue : STD_LOGIC;
    signal cvt_U0_ap_idle : STD_LOGIC;
    signal cvt_U0_ap_ready : STD_LOGIC;
    signal cvt_U0_start_out : STD_LOGIC;
    signal cvt_U0_start_write : STD_LOGIC;
    signal cvt_U0_str_pad_cvt_read : STD_LOGIC;
    signal cvt_U0_str_cvt_mul_din : STD_LOGIC_VECTOR (1151 downto 0);
    signal cvt_U0_str_cvt_mul_write : STD_LOGIC;
    signal mul_U0_ap_start : STD_LOGIC;
    signal mul_U0_ap_done : STD_LOGIC;
    signal mul_U0_ap_continue : STD_LOGIC;
    signal mul_U0_ap_idle : STD_LOGIC;
    signal mul_U0_ap_ready : STD_LOGIC;
    signal mul_U0_start_out : STD_LOGIC;
    signal mul_U0_start_write : STD_LOGIC;
    signal mul_U0_out_read_kernel_read : STD_LOGIC;
    signal mul_U0_str_cvt_mul_read : STD_LOGIC;
    signal mul_U0_str_mul_add_din : STD_LOGIC_VECTOR (127 downto 0);
    signal mul_U0_str_mul_add_write : STD_LOGIC;
    signal add_U0_ap_start : STD_LOGIC;
    signal add_U0_ap_done : STD_LOGIC;
    signal add_U0_ap_continue : STD_LOGIC;
    signal add_U0_ap_idle : STD_LOGIC;
    signal add_U0_ap_ready : STD_LOGIC;
    signal add_U0_out_read_bias_read : STD_LOGIC;
    signal add_U0_str_mul_add_read : STD_LOGIC;
    signal add_U0_out_conv_din : STD_LOGIC_VECTOR (127 downto 0);
    signal add_U0_out_conv_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal enable_upper_padding_c_full_n : STD_LOGIC;
    signal enable_upper_padding_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_upper_padding_c_empty_n : STD_LOGIC;
    signal enable_lower_padding_c_full_n : STD_LOGIC;
    signal enable_lower_padding_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal enable_lower_padding_c_empty_n : STD_LOGIC;
    signal str_pad_cvt_full_n : STD_LOGIC;
    signal str_pad_cvt_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal str_pad_cvt_empty_n : STD_LOGIC;
    signal str_cvt_mul_full_n : STD_LOGIC;
    signal str_cvt_mul_dout : STD_LOGIC_VECTOR (1151 downto 0);
    signal str_cvt_mul_empty_n : STD_LOGIC;
    signal str_mul_add_full_n : STD_LOGIC;
    signal str_mul_add_dout : STD_LOGIC_VECTOR (127 downto 0);
    signal str_mul_add_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_padding_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_padding_U0_full_n : STD_LOGIC;
    signal start_for_padding_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_padding_U0_empty_n : STD_LOGIC;
    signal start_for_cvt_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_cvt_U0_full_n : STD_LOGIC;
    signal start_for_cvt_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_cvt_U0_empty_n : STD_LOGIC;
    signal start_for_mul_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mul_U0_full_n : STD_LOGIC;
    signal start_for_mul_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_mul_U0_empty_n : STD_LOGIC;
    signal start_for_add_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_add_U0_full_n : STD_LOGIC;
    signal start_for_add_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_add_U0_empty_n : STD_LOGIC;
    signal add_U0_start_full_n : STD_LOGIC;
    signal add_U0_start_write : STD_LOGIC;

    component k_conv2D_direct_conv_entry5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        enable_upper_padding : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_lower_padding : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_upper_padding_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        enable_upper_padding_out_full_n : IN STD_LOGIC;
        enable_upper_padding_out_write : OUT STD_LOGIC;
        enable_lower_padding_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        enable_lower_padding_out_full_n : IN STD_LOGIC;
        enable_lower_padding_out_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_padding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_upper_padding_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_upper_padding_empty_n : IN STD_LOGIC;
        enable_upper_padding_read : OUT STD_LOGIC;
        enable_lower_padding_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        enable_lower_padding_empty_n : IN STD_LOGIC;
        enable_lower_padding_read : OUT STD_LOGIC;
        out_read_data_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_read_data_1_empty_n : IN STD_LOGIC;
        out_read_data_1_read : OUT STD_LOGIC;
        str_pad_cvt_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        str_pad_cvt_full_n : IN STD_LOGIC;
        str_pad_cvt_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_cvt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        H : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
        str_pad_cvt_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        str_pad_cvt_empty_n : IN STD_LOGIC;
        str_pad_cvt_read : OUT STD_LOGIC;
        str_cvt_mul_din : OUT STD_LOGIC_VECTOR (1151 downto 0);
        str_cvt_mul_full_n : IN STD_LOGIC;
        str_cvt_mul_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        H : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
        out_read_kernel_dout : IN STD_LOGIC_VECTOR (4607 downto 0);
        out_read_kernel_empty_n : IN STD_LOGIC;
        out_read_kernel_read : OUT STD_LOGIC;
        str_cvt_mul_dout : IN STD_LOGIC_VECTOR (1151 downto 0);
        str_cvt_mul_empty_n : IN STD_LOGIC;
        str_cvt_mul_read : OUT STD_LOGIC;
        str_mul_add_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        str_mul_add_full_n : IN STD_LOGIC;
        str_mul_add_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_add IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        H : IN STD_LOGIC_VECTOR (31 downto 0);
        W : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ITER : IN STD_LOGIC_VECTOR (31 downto 0);
        out_read_bias_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        out_read_bias_empty_n : IN STD_LOGIC;
        out_read_bias_read : OUT STD_LOGIC;
        str_mul_add_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        str_mul_add_empty_n : IN STD_LOGIC;
        str_mul_add_read : OUT STD_LOGIC;
        out_conv_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        out_conv_full_n : IN STD_LOGIC;
        out_conv_write : OUT STD_LOGIC );
    end component;


    component k_conv2D_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w128_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (127 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (127 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_fifo_w1152_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1151 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1151 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_padding_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_cvt_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_mul_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component k_conv2D_start_for_add_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    direct_conv_entry5_U0 : component k_conv2D_direct_conv_entry5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => direct_conv_entry5_U0_ap_start,
        start_full_n => start_for_padding_U0_full_n,
        ap_done => direct_conv_entry5_U0_ap_done,
        ap_continue => direct_conv_entry5_U0_ap_continue,
        ap_idle => direct_conv_entry5_U0_ap_idle,
        ap_ready => direct_conv_entry5_U0_ap_ready,
        start_out => direct_conv_entry5_U0_start_out,
        start_write => direct_conv_entry5_U0_start_write,
        enable_upper_padding => enable_upper_padding,
        enable_lower_padding => enable_lower_padding,
        enable_upper_padding_out_din => direct_conv_entry5_U0_enable_upper_padding_out_din,
        enable_upper_padding_out_full_n => enable_upper_padding_c_full_n,
        enable_upper_padding_out_write => direct_conv_entry5_U0_enable_upper_padding_out_write,
        enable_lower_padding_out_din => direct_conv_entry5_U0_enable_lower_padding_out_din,
        enable_lower_padding_out_full_n => enable_lower_padding_c_full_n,
        enable_lower_padding_out_write => direct_conv_entry5_U0_enable_lower_padding_out_write);

    padding_U0 : component k_conv2D_padding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => padding_U0_ap_start,
        start_full_n => start_for_cvt_U0_full_n,
        ap_done => padding_U0_ap_done,
        ap_continue => padding_U0_ap_continue,
        ap_idle => padding_U0_ap_idle,
        ap_ready => padding_U0_ap_ready,
        start_out => padding_U0_start_out,
        start_write => padding_U0_start_write,
        rows => rows,
        W => W,
        I_ITER => I_ITER,
        enable_upper_padding_dout => enable_upper_padding_c_dout,
        enable_upper_padding_empty_n => enable_upper_padding_c_empty_n,
        enable_upper_padding_read => padding_U0_enable_upper_padding_read,
        enable_lower_padding_dout => enable_lower_padding_c_dout,
        enable_lower_padding_empty_n => enable_lower_padding_c_empty_n,
        enable_lower_padding_read => padding_U0_enable_lower_padding_read,
        out_read_data_1_dout => out_read_data_1_dout,
        out_read_data_1_empty_n => out_read_data_1_empty_n,
        out_read_data_1_read => padding_U0_out_read_data_1_read,
        str_pad_cvt_din => padding_U0_str_pad_cvt_din,
        str_pad_cvt_full_n => str_pad_cvt_full_n,
        str_pad_cvt_write => padding_U0_str_pad_cvt_write);

    cvt_U0 : component k_conv2D_cvt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => cvt_U0_ap_start,
        start_full_n => start_for_mul_U0_full_n,
        ap_done => cvt_U0_ap_done,
        ap_continue => cvt_U0_ap_continue,
        ap_idle => cvt_U0_ap_idle,
        ap_ready => cvt_U0_ap_ready,
        start_out => cvt_U0_start_out,
        start_write => cvt_U0_start_write,
        H => rows,
        W => W,
        I_ITER => I_ITER,
        str_pad_cvt_dout => str_pad_cvt_dout,
        str_pad_cvt_empty_n => str_pad_cvt_empty_n,
        str_pad_cvt_read => cvt_U0_str_pad_cvt_read,
        str_cvt_mul_din => cvt_U0_str_cvt_mul_din,
        str_cvt_mul_full_n => str_cvt_mul_full_n,
        str_cvt_mul_write => cvt_U0_str_cvt_mul_write);

    mul_U0 : component k_conv2D_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => mul_U0_ap_start,
        start_full_n => start_for_add_U0_full_n,
        ap_done => mul_U0_ap_done,
        ap_continue => mul_U0_ap_continue,
        ap_idle => mul_U0_ap_idle,
        ap_ready => mul_U0_ap_ready,
        start_out => mul_U0_start_out,
        start_write => mul_U0_start_write,
        H => rows,
        W => W,
        I_ITER => I_ITER,
        out_read_kernel_dout => out_read_kernel_dout,
        out_read_kernel_empty_n => out_read_kernel_empty_n,
        out_read_kernel_read => mul_U0_out_read_kernel_read,
        str_cvt_mul_dout => str_cvt_mul_dout,
        str_cvt_mul_empty_n => str_cvt_mul_empty_n,
        str_cvt_mul_read => mul_U0_str_cvt_mul_read,
        str_mul_add_din => mul_U0_str_mul_add_din,
        str_mul_add_full_n => str_mul_add_full_n,
        str_mul_add_write => mul_U0_str_mul_add_write);

    add_U0 : component k_conv2D_add
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => add_U0_ap_start,
        ap_done => add_U0_ap_done,
        ap_continue => add_U0_ap_continue,
        ap_idle => add_U0_ap_idle,
        ap_ready => add_U0_ap_ready,
        H => rows,
        W => W,
        I_ITER => I_ITER,
        out_read_bias_dout => out_read_bias_dout,
        out_read_bias_empty_n => out_read_bias_empty_n,
        out_read_bias_read => add_U0_out_read_bias_read,
        str_mul_add_dout => str_mul_add_dout,
        str_mul_add_empty_n => str_mul_add_empty_n,
        str_mul_add_read => add_U0_str_mul_add_read,
        out_conv_din => add_U0_out_conv_din,
        out_conv_full_n => out_conv_full_n,
        out_conv_write => add_U0_out_conv_write);

    enable_upper_padding_c_U : component k_conv2D_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => direct_conv_entry5_U0_enable_upper_padding_out_din,
        if_full_n => enable_upper_padding_c_full_n,
        if_write => direct_conv_entry5_U0_enable_upper_padding_out_write,
        if_dout => enable_upper_padding_c_dout,
        if_empty_n => enable_upper_padding_c_empty_n,
        if_read => padding_U0_enable_upper_padding_read);

    enable_lower_padding_c_U : component k_conv2D_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => direct_conv_entry5_U0_enable_lower_padding_out_din,
        if_full_n => enable_lower_padding_c_full_n,
        if_write => direct_conv_entry5_U0_enable_lower_padding_out_write,
        if_dout => enable_lower_padding_c_dout,
        if_empty_n => enable_lower_padding_c_empty_n,
        if_read => padding_U0_enable_lower_padding_read);

    str_pad_cvt_U : component k_conv2D_fifo_w128_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => padding_U0_str_pad_cvt_din,
        if_full_n => str_pad_cvt_full_n,
        if_write => padding_U0_str_pad_cvt_write,
        if_dout => str_pad_cvt_dout,
        if_empty_n => str_pad_cvt_empty_n,
        if_read => cvt_U0_str_pad_cvt_read);

    str_cvt_mul_U : component k_conv2D_fifo_w1152_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => cvt_U0_str_cvt_mul_din,
        if_full_n => str_cvt_mul_full_n,
        if_write => cvt_U0_str_cvt_mul_write,
        if_dout => str_cvt_mul_dout,
        if_empty_n => str_cvt_mul_empty_n,
        if_read => mul_U0_str_cvt_mul_read);

    str_mul_add_U : component k_conv2D_fifo_w128_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => mul_U0_str_mul_add_din,
        if_full_n => str_mul_add_full_n,
        if_write => mul_U0_str_mul_add_write,
        if_dout => str_mul_add_dout,
        if_empty_n => str_mul_add_empty_n,
        if_read => add_U0_str_mul_add_read);

    start_for_padding_U0_U : component k_conv2D_start_for_padding_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_padding_U0_din,
        if_full_n => start_for_padding_U0_full_n,
        if_write => direct_conv_entry5_U0_start_write,
        if_dout => start_for_padding_U0_dout,
        if_empty_n => start_for_padding_U0_empty_n,
        if_read => padding_U0_ap_ready);

    start_for_cvt_U0_U : component k_conv2D_start_for_cvt_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_cvt_U0_din,
        if_full_n => start_for_cvt_U0_full_n,
        if_write => padding_U0_start_write,
        if_dout => start_for_cvt_U0_dout,
        if_empty_n => start_for_cvt_U0_empty_n,
        if_read => cvt_U0_ap_ready);

    start_for_mul_U0_U : component k_conv2D_start_for_mul_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_mul_U0_din,
        if_full_n => start_for_mul_U0_full_n,
        if_write => cvt_U0_start_write,
        if_dout => start_for_mul_U0_dout,
        if_empty_n => start_for_mul_U0_empty_n,
        if_read => mul_U0_ap_ready);

    start_for_add_U0_U : component k_conv2D_start_for_add_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_add_U0_din,
        if_full_n => start_for_add_U0_full_n,
        if_write => mul_U0_start_write,
        if_dout => start_for_add_U0_dout,
        if_empty_n => start_for_add_U0_empty_n,
        if_read => add_U0_ap_ready);




    add_U0_ap_continue <= ap_continue;
    add_U0_ap_start <= start_for_add_U0_empty_n;
    add_U0_start_full_n <= ap_const_logic_1;
    add_U0_start_write <= ap_const_logic_0;
    ap_done <= add_U0_ap_done;
    ap_idle <= (padding_U0_ap_idle and mul_U0_ap_idle and direct_conv_entry5_U0_ap_idle and cvt_U0_ap_idle and add_U0_ap_idle);
    ap_ready <= direct_conv_entry5_U0_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= add_U0_ap_done;
    ap_sync_ready <= direct_conv_entry5_U0_ap_ready;
    cvt_U0_ap_continue <= ap_const_logic_1;
    cvt_U0_ap_start <= start_for_cvt_U0_empty_n;
    direct_conv_entry5_U0_ap_continue <= ap_const_logic_1;
    direct_conv_entry5_U0_ap_start <= ap_start;
    mul_U0_ap_continue <= ap_const_logic_1;
    mul_U0_ap_start <= start_for_mul_U0_empty_n;
    out_conv_din <= add_U0_out_conv_din;
    out_conv_write <= add_U0_out_conv_write;
    out_read_bias_read <= add_U0_out_read_bias_read;
    out_read_data_1_read <= padding_U0_out_read_data_1_read;
    out_read_kernel_read <= mul_U0_out_read_kernel_read;
    padding_U0_ap_continue <= ap_const_logic_1;
    padding_U0_ap_start <= start_for_padding_U0_empty_n;
    start_for_add_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_cvt_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_mul_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_padding_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
