-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_mul_1_2_8_9_128_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_w_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    in_w_V_V_empty_n : IN STD_LOGIC;
    in_w_V_V_read : OUT STD_LOGIC;
    in_x_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_x_V_V_empty_n : IN STD_LOGIC;
    in_x_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of top_mul_1_2_8_9_128_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal in_w_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln176_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_x_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_phi_ln213_phi_fu_196_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln216_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal phi_ln213_reg_192 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln213_reg_192_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_reg_530 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_reg_530_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_reg_526 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln233_reg_526_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal free_slots_reg_180 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op36_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op93_write_state11 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal num_reads_reg_204 : STD_LOGIC_VECTOR (31 downto 0);
    signal swap_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal free_slots_1_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_reads_1_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal swap_1_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal swap_1_reg_253_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal free_slots_2165_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_302_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_1_reg_469 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal zext_ln213_fu_314_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln213_reg_478 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln216_reg_483 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_0_fu_324_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_0_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_1_reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln200_fu_338_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal num_reads_2_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln225_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln225_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln247_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln247_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal op1_V_1_reg_521 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal icmp_ln233_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln241_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln213_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln213_reg_534 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_fu_432_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_reg_539 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal xs_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_V_ce0 : STD_LOGIC;
    signal xs_V_we0 : STD_LOGIC;
    signal xs_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_V_ce1 : STD_LOGIC;
    signal xs_V_we1 : STD_LOGIC;
    signal xs_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ys_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ys_V_ce0 : STD_LOGIC;
    signal ys_V_we0 : STD_LOGIC;
    signal ys_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ys_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ys_V_ce1 : STD_LOGIC;
    signal ys_V_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_last_swap_8_s_fu_288_ap_start : STD_LOGIC;
    signal grp_last_swap_8_s_fu_288_ap_done : STD_LOGIC;
    signal grp_last_swap_8_s_fu_288_ap_idle : STD_LOGIC;
    signal grp_last_swap_8_s_fu_288_ap_ready : STD_LOGIC;
    signal grp_last_swap_8_s_fu_288_ap_ce : STD_LOGIC;
    signal grp_last_swap_8_s_fu_288_input_r_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_last_swap_8_s_fu_288_input_r_ce0 : STD_LOGIC;
    signal grp_last_swap_8_s_fu_288_input_r_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_last_swap_8_s_fu_288_input_r_ce1 : STD_LOGIC;
    signal grp_last_swap_8_s_fu_288_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_last_swap_8_s_fu_288_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_predicate_op88_call_state10 : BOOLEAN;
    signal ap_predicate_op89_call_state11 : BOOLEAN;
    signal ap_block_state6_pp0_stage3_iter0_ignore_call0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1_ignore_call0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp88 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter0_ignore_call0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1_ignore_call0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2_ignore_call0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp89 : BOOLEAN;
    signal swap_2_first_swap_8_s_fu_295_ap_start : STD_LOGIC;
    signal swap_2_first_swap_8_s_fu_295_ap_ready : STD_LOGIC;
    signal swap_2_first_swap_8_s_fu_295_output_r_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal swap_2_first_swap_8_s_fu_295_output_r_ce0 : STD_LOGIC;
    signal swap_2_first_swap_8_s_fu_295_output_r_we0 : STD_LOGIC;
    signal swap_2_first_swap_8_s_fu_295_output_r_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal swap_2_first_swap_8_s_fu_295_output_r_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal swap_2_first_swap_8_s_fu_295_output_r_ce1 : STD_LOGIC;
    signal swap_2_first_swap_8_s_fu_295_output_r_we1 : STD_LOGIC;
    signal swap_2_first_swap_8_s_fu_295_output_r_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal swap_2_first_swap_8_s_fu_295_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal p_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_phi_mux_free_slots_phi_fu_184_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_num_reads_phi_fu_208_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_swap_phi_fu_220_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_free_slots_1_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_num_reads_1_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_swap_1_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_cmp51167_phi_fu_268_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_cmp51167_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_reg_pp0_iter0_free_slots_2165_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal free_slots_3_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_last_swap_8_s_fu_288_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op88_call_state10_state9 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal swap_2_first_swap_8_s_fu_295_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op45_call_state4_state3 : BOOLEAN;
    signal select_ln225_cast_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal xor_ln225_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln233_fu_371_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_381_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal or_ln233_fu_375_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_391_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln247_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_fu_432_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ret_fu_432_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ret_fu_432_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_583 : BOOLEAN;
    signal ap_condition_385 : BOOLEAN;
    signal ap_condition_388 : BOOLEAN;
    signal ap_condition_215 : BOOLEAN;
    signal ap_condition_595 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component top_last_swap_8_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        swap : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_first_swap_8_s IS
    port (
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (7 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component top_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_mul_1_2_8_9_128_s_xs_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component top_mul_1_2_8_9_128_s_ys_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    xs_V_U : component top_mul_1_2_8_9_128_s_xs_V
    generic map (
        DataWidth => 8,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => xs_V_address0,
        ce0 => xs_V_ce0,
        we0 => xs_V_we0,
        d0 => swap_2_first_swap_8_s_fu_295_output_r_d0,
        q0 => xs_V_q0,
        address1 => xs_V_address1,
        ce1 => xs_V_ce1,
        we1 => xs_V_we1,
        d1 => swap_2_first_swap_8_s_fu_295_output_r_d1,
        q1 => xs_V_q1);

    ys_V_U : component top_mul_1_2_8_9_128_s_ys_V
    generic map (
        DataWidth => 16,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ys_V_address0,
        ce0 => ys_V_ce0,
        we0 => ys_V_we0,
        d0 => ys_V_d0,
        q0 => ys_V_q0,
        address1 => grp_last_swap_8_s_fu_288_input_r_address1,
        ce1 => ys_V_ce1,
        q1 => ys_V_q1);

    grp_last_swap_8_s_fu_288 : component top_last_swap_8_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_last_swap_8_s_fu_288_ap_start,
        ap_done => grp_last_swap_8_s_fu_288_ap_done,
        ap_idle => grp_last_swap_8_s_fu_288_ap_idle,
        ap_ready => grp_last_swap_8_s_fu_288_ap_ready,
        ap_ce => grp_last_swap_8_s_fu_288_ap_ce,
        swap => swap_1_reg_253_pp0_iter1_reg,
        input_r_address0 => grp_last_swap_8_s_fu_288_input_r_address0,
        input_r_ce0 => grp_last_swap_8_s_fu_288_input_r_ce0,
        input_r_q0 => ys_V_q0,
        input_r_address1 => grp_last_swap_8_s_fu_288_input_r_address1,
        input_r_ce1 => grp_last_swap_8_s_fu_288_input_r_ce1,
        input_r_q1 => ys_V_q1,
        ap_return_0 => grp_last_swap_8_s_fu_288_ap_return_0,
        ap_return_1 => grp_last_swap_8_s_fu_288_ap_return_1);

    swap_2_first_swap_8_s_fu_295 : component top_first_swap_8_s
    port map (
        ap_start => swap_2_first_swap_8_s_fu_295_ap_start,
        ap_ready => swap_2_first_swap_8_s_fu_295_ap_ready,
        p_read => x_V_0_reg_487,
        p_read1 => x_V_1_reg_492,
        output_r_address0 => swap_2_first_swap_8_s_fu_295_output_r_address0,
        output_r_ce0 => swap_2_first_swap_8_s_fu_295_output_r_ce0,
        output_r_we0 => swap_2_first_swap_8_s_fu_295_output_r_we0,
        output_r_d0 => swap_2_first_swap_8_s_fu_295_output_r_d0,
        output_r_address1 => swap_2_first_swap_8_s_fu_295_output_r_address1,
        output_r_ce1 => swap_2_first_swap_8_s_fu_295_output_r_ce1,
        output_r_we1 => swap_2_first_swap_8_s_fu_295_output_r_we1,
        output_r_d1 => swap_2_first_swap_8_s_fu_295_output_r_d1,
        ap_return => swap_2_first_swap_8_s_fu_295_ap_return);

    mul_8ns_8ns_16_1_1_U22 : component top_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => ret_fu_432_p0,
        din1 => ret_fu_432_p1,
        dout => ret_fu_432_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_last_swap_8_s_fu_288_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_last_swap_8_s_fu_288_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op88_call_state10_state9 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    grp_last_swap_8_s_fu_288_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_last_swap_8_s_fu_288_ap_ready = ap_const_logic_1)) then 
                    grp_last_swap_8_s_fu_288_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    swap_2_first_swap_8_s_fu_295_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                swap_2_first_swap_8_s_fu_295_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op45_call_state4_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    swap_2_first_swap_8_s_fu_295_ap_start_reg <= ap_const_logic_1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (swap_2_first_swap_8_s_fu_295_ap_ready = ap_const_logic_1))) then 
                    swap_2_first_swap_8_s_fu_295_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_free_slots_1_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_583)) then
                if ((icmp_ln216_reg_483 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_free_slots_1_reg_228 <= free_slots_reg_180;
                elsif ((icmp_ln216_reg_483 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_free_slots_1_reg_228 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_num_reads_1_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_583)) then
                if ((icmp_ln216_reg_483 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_num_reads_1_reg_241 <= ap_phi_mux_num_reads_phi_fu_208_p4;
                elsif ((icmp_ln216_reg_483 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_num_reads_1_reg_241 <= num_reads_2_fu_342_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_swap_1_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_583)) then
                if ((icmp_ln216_reg_483 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter0_swap_1_reg_253 <= ap_phi_mux_swap_phi_fu_220_p4;
                elsif ((icmp_ln216_reg_483 = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter0_swap_1_reg_253 <= zext_ln200_fu_338_p1;
                end if;
            end if; 
        end if;
    end process;

    free_slots_2165_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_215)) then
                if ((ap_const_boolean_1 = ap_condition_388)) then 
                    free_slots_2165_reg_276 <= free_slots_3_fu_405_p2;
                elsif ((ap_const_boolean_1 = ap_condition_385)) then 
                    free_slots_2165_reg_276 <= ap_const_lv32_2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    free_slots_2165_reg_276 <= ap_phi_reg_pp0_iter0_free_slots_2165_reg_276;
                end if;
            end if; 
        end if;
    end process;

    free_slots_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                free_slots_reg_180 <= free_slots_2165_reg_276;
            elsif ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                free_slots_reg_180 <= ap_const_lv32_2;
            end if; 
        end if;
    end process;

    num_reads_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                num_reads_reg_204 <= num_reads_1_reg_241;
            elsif ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                num_reads_reg_204 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_reg_169 <= p_1_reg_469;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_reg_169 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_ln213_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_ln213_reg_192 <= xor_ln213_reg_534;
            elsif ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_ln213_reg_192 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    swap_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                swap_reg_216 <= swap_1_reg_253;
            elsif ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                swap_reg_216 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                free_slots_1_reg_228 <= ap_phi_reg_pp0_iter0_free_slots_1_reg_228;
                num_reads_1_reg_241 <= ap_phi_reg_pp0_iter0_num_reads_1_reg_241;
                swap_1_reg_253 <= ap_phi_reg_pp0_iter0_swap_1_reg_253;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_phi_mux_phi_ln213_phi_fu_196_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln216_reg_483 <= icmp_ln216_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                icmp_ln225_reg_507 <= icmp_ln225_fu_348_p2;
                icmp_ln247_reg_516 <= icmp_ln247_fu_365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln233_reg_526 <= icmp_ln233_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln233_reg_526_pp0_iter1_reg <= icmp_ln233_reg_526;
                icmp_ln241_reg_530_pp0_iter1_reg <= icmp_ln241_reg_530;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln233_fu_399_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                icmp_ln241_reg_530 <= icmp_ln241_fu_412_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                op1_V_1_reg_521 <= xs_V_q0;
                xor_ln213_reg_534 <= xor_ln213_fu_423_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_1_reg_469 <= p_1_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                phi_ln213_reg_192_pp0_iter1_reg <= phi_ln213_reg_192;
                ret_reg_539 <= ret_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                swap_1_reg_253_pp0_iter1_reg <= swap_1_reg_253;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln216_fu_318_p2 = ap_const_lv1_1) and (ap_phi_mux_phi_ln213_phi_fu_196_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                x_V_0_reg_487 <= x_V_0_fu_324_p1;
                x_V_1_reg_492 <= in_x_V_V_dout(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln213_reg_478(7 downto 0) <= zext_ln213_fu_314_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln213_reg_478(15 downto 8) <= "00000000";

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, in_w_V_V_empty_n, ap_CS_fsm_state2, icmp_ln176_fu_308_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, phi_ln213_reg_192, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((phi_ln213_reg_192 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((phi_ln213_reg_192 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    and_ln247_fu_418_p2 <= (icmp_ln247_reg_516 and ap_phi_mux_cmp51167_phi_fu_268_p4);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(6);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_x_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_predicate_op36_read_state3, ap_predicate_op93_write_state11)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op93_write_state11 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (in_x_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op36_read_state3 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_x_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_predicate_op36_read_state3, ap_predicate_op93_write_state11)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op93_write_state11 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (in_x_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op36_read_state3 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp89_assign_proc : process(in_x_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_predicate_op36_read_state3, ap_predicate_op93_write_state11)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp89 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op93_write_state11 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (in_x_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op36_read_state3 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_x_V_V_empty_n, out_V_V_full_n, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_predicate_op36_read_state3, ap_predicate_op93_write_state11)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op93_write_state11 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (in_x_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op36_read_state3 = ap_const_boolean_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp88 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (real_start = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter2_assign_proc : process(out_V_V_full_n, ap_predicate_op93_write_state11)
    begin
                ap_block_state11_pp0_stage0_iter2 <= ((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op93_write_state11 = ap_const_boolean_1));
    end process;


    ap_block_state11_pp0_stage0_iter2_ignore_call0_assign_proc : process(out_V_V_full_n, ap_predicate_op93_write_state11)
    begin
                ap_block_state11_pp0_stage0_iter2_ignore_call0 <= ((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op93_write_state11 = ap_const_boolean_1));
    end process;


    ap_block_state2_assign_proc : process(in_w_V_V_empty_n, icmp_ln176_fu_308_p2)
    begin
                ap_block_state2 <= ((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(in_x_V_V_empty_n, ap_predicate_op36_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter0 <= ((in_x_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op36_read_state3 = ap_const_boolean_1));
    end process;


    ap_block_state3_pp0_stage0_iter0_ignore_call0_assign_proc : process(in_x_V_V_empty_n, ap_predicate_op36_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter0_ignore_call0 <= ((in_x_V_V_empty_n = ap_const_logic_0) and (ap_predicate_op36_read_state3 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_215_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
                ap_condition_215 <= ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_condition_385_assign_proc : process(phi_ln213_reg_192, icmp_ln233_fu_399_p2, icmp_ln241_fu_412_p2)
    begin
                ap_condition_385 <= (((phi_ln213_reg_192 = ap_const_lv1_1) and (icmp_ln233_fu_399_p2 = ap_const_lv1_1)) or ((phi_ln213_reg_192 = ap_const_lv1_1) and (icmp_ln241_fu_412_p2 = ap_const_lv1_1)));
    end process;


    ap_condition_388_assign_proc : process(phi_ln213_reg_192, icmp_ln233_fu_399_p2, icmp_ln241_fu_412_p2)
    begin
                ap_condition_388 <= ((phi_ln213_reg_192 = ap_const_lv1_1) and (icmp_ln241_fu_412_p2 = ap_const_lv1_0) and (icmp_ln233_fu_399_p2 = ap_const_lv1_0));
    end process;


    ap_condition_583_assign_proc : process(ap_enable_reg_pp0_iter0, phi_ln213_reg_192, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_583 <= ((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_condition_595_assign_proc : process(phi_ln213_reg_192, icmp_ln216_reg_483, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
                ap_condition_595 <= ((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln216_reg_483 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(phi_ln213_reg_192)
    begin
        if ((phi_ln213_reg_192 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, in_w_V_V_empty_n, ap_CS_fsm_state2, icmp_ln176_fu_308_p2)
    begin
        if ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (real_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_cmp51167_phi_fu_268_p4_assign_proc : process(phi_ln213_reg_192, icmp_ln233_fu_399_p2, icmp_ln241_fu_412_p2, ap_phi_reg_pp0_iter0_cmp51167_reg_265)
    begin
        if (((phi_ln213_reg_192 = ap_const_lv1_1) and (icmp_ln241_fu_412_p2 = ap_const_lv1_0) and (icmp_ln233_fu_399_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_cmp51167_phi_fu_268_p4 <= ap_const_lv1_0;
        elsif ((((phi_ln213_reg_192 = ap_const_lv1_1) and (icmp_ln233_fu_399_p2 = ap_const_lv1_1)) or ((phi_ln213_reg_192 = ap_const_lv1_1) and (icmp_ln241_fu_412_p2 = ap_const_lv1_1)))) then 
            ap_phi_mux_cmp51167_phi_fu_268_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_cmp51167_phi_fu_268_p4 <= ap_phi_reg_pp0_iter0_cmp51167_reg_265;
        end if; 
    end process;


    ap_phi_mux_free_slots_phi_fu_184_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, phi_ln213_reg_192, free_slots_reg_180, free_slots_2165_reg_276, ap_enable_reg_pp0_iter1)
    begin
        if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_free_slots_phi_fu_184_p4 <= free_slots_2165_reg_276;
        else 
            ap_phi_mux_free_slots_phi_fu_184_p4 <= free_slots_reg_180;
        end if; 
    end process;


    ap_phi_mux_num_reads_phi_fu_208_p4_assign_proc : process(phi_ln213_reg_192_pp0_iter1_reg, num_reads_reg_204, num_reads_1_reg_241, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_num_reads_phi_fu_208_p4 <= num_reads_1_reg_241;
        else 
            ap_phi_mux_num_reads_phi_fu_208_p4 <= num_reads_reg_204;
        end if; 
    end process;


    ap_phi_mux_phi_ln213_phi_fu_196_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, phi_ln213_reg_192, xor_ln213_reg_534, ap_enable_reg_pp0_iter1)
    begin
        if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_phi_ln213_phi_fu_196_p4 <= xor_ln213_reg_534;
        else 
            ap_phi_mux_phi_ln213_phi_fu_196_p4 <= phi_ln213_reg_192;
        end if; 
    end process;


    ap_phi_mux_swap_phi_fu_220_p4_assign_proc : process(phi_ln213_reg_192_pp0_iter1_reg, swap_reg_216, swap_1_reg_253, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_swap_phi_fu_220_p4 <= swap_1_reg_253;
        else 
            ap_phi_mux_swap_phi_fu_220_p4 <= swap_reg_216;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_cmp51167_reg_265 <= "X";
    ap_phi_reg_pp0_iter0_free_slots_2165_reg_276 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op36_read_state3_assign_proc : process(ap_phi_mux_phi_ln213_phi_fu_196_p4, icmp_ln216_fu_318_p2)
    begin
                ap_predicate_op36_read_state3 <= ((icmp_ln216_fu_318_p2 = ap_const_lv1_1) and (ap_phi_mux_phi_ln213_phi_fu_196_p4 = ap_const_lv1_1));
    end process;


    ap_predicate_op45_call_state4_state3_assign_proc : process(ap_phi_mux_phi_ln213_phi_fu_196_p4, icmp_ln216_fu_318_p2)
    begin
                ap_predicate_op45_call_state4_state3 <= ((icmp_ln216_fu_318_p2 = ap_const_lv1_1) and (ap_phi_mux_phi_ln213_phi_fu_196_p4 = ap_const_lv1_1));
    end process;


    ap_predicate_op88_call_state10_assign_proc : process(phi_ln213_reg_192_pp0_iter1_reg, icmp_ln241_reg_530, icmp_ln233_reg_526)
    begin
                ap_predicate_op88_call_state10 <= (((icmp_ln233_reg_526 = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1)) or ((icmp_ln241_reg_530 = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1)));
    end process;


    ap_predicate_op88_call_state10_state9_assign_proc : process(phi_ln213_reg_192_pp0_iter1_reg, icmp_ln241_reg_530, icmp_ln233_reg_526)
    begin
                ap_predicate_op88_call_state10_state9 <= (((icmp_ln233_reg_526 = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1)) or ((icmp_ln241_reg_530 = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1)));
    end process;


    ap_predicate_op89_call_state11_assign_proc : process(phi_ln213_reg_192_pp0_iter1_reg, icmp_ln241_reg_530_pp0_iter1_reg, icmp_ln233_reg_526_pp0_iter1_reg)
    begin
                ap_predicate_op89_call_state11 <= (((icmp_ln241_reg_530_pp0_iter1_reg = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1)) or ((icmp_ln233_reg_526_pp0_iter1_reg = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1)));
    end process;


    ap_predicate_op93_write_state11_assign_proc : process(phi_ln213_reg_192_pp0_iter1_reg, icmp_ln241_reg_530_pp0_iter1_reg, icmp_ln233_reg_526_pp0_iter1_reg)
    begin
                ap_predicate_op93_write_state11 <= (((icmp_ln241_reg_530_pp0_iter1_reg = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1)) or ((icmp_ln233_reg_526_pp0_iter1_reg = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1)));
    end process;

    ap_ready <= internal_ap_ready;
    free_slots_3_fu_405_p2 <= std_logic_vector(unsigned(free_slots_1_reg_228) + unsigned(ap_const_lv32_1));

    grp_last_swap_8_s_fu_288_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001_ignoreCallOp88, ap_block_pp0_stage0_11001_ignoreCallOp89)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp89) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp88) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_last_swap_8_s_fu_288_ap_ce <= ap_const_logic_1;
        else 
            grp_last_swap_8_s_fu_288_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_last_swap_8_s_fu_288_ap_start <= grp_last_swap_8_s_fu_288_ap_start_reg;
    icmp_ln176_fu_308_p2 <= "1" when (p_reg_169 = ap_const_lv4_9) else "0";
    icmp_ln216_fu_318_p2 <= "1" when (ap_phi_mux_free_slots_phi_fu_184_p4 = ap_const_lv32_2) else "0";
    icmp_ln225_fu_348_p2 <= "1" when (ap_phi_reg_pp0_iter0_free_slots_1_reg_228 = ap_const_lv32_0) else "0";
    icmp_ln233_fu_399_p2 <= "1" when (or_ln_fu_391_p3 = ap_const_lv32_0) else "0";
    icmp_ln241_fu_412_p2 <= "1" when (free_slots_3_fu_405_p2 = ap_const_lv32_2) else "0";
    icmp_ln247_fu_365_p2 <= "1" when (ap_phi_reg_pp0_iter0_num_reads_1_reg_241 = ap_const_lv32_80) else "0";

    in_w_V_V_blk_n_assign_proc : process(in_w_V_V_empty_n, ap_CS_fsm_state2, icmp_ln176_fu_308_p2)
    begin
        if (((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_w_V_V_blk_n <= in_w_V_V_empty_n;
        else 
            in_w_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_w_V_V_read_assign_proc : process(in_w_V_V_empty_n, ap_CS_fsm_state2, icmp_ln176_fu_308_p2)
    begin
        if ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in_w_V_V_read <= ap_const_logic_1;
        else 
            in_w_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_x_V_V_blk_n_assign_proc : process(in_x_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_phi_mux_phi_ln213_phi_fu_196_p4, icmp_ln216_fu_318_p2)
    begin
        if (((icmp_ln216_fu_318_p2 = ap_const_lv1_1) and (ap_phi_mux_phi_ln213_phi_fu_196_p4 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_x_V_V_blk_n <= in_x_V_V_empty_n;
        else 
            in_x_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_x_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_predicate_op36_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op36_read_state3 = ap_const_boolean_1))) then 
            in_x_V_V_read <= ap_const_logic_1;
        else 
            in_x_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(in_w_V_V_empty_n, ap_CS_fsm_state2, icmp_ln176_fu_308_p2)
    begin
        if ((not(((icmp_ln176_fu_308_p2 = ap_const_lv1_0) and (in_w_V_V_empty_n = ap_const_logic_0))) and (icmp_ln176_fu_308_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    num_reads_2_fu_342_p2 <= std_logic_vector(unsigned(ap_phi_mux_num_reads_phi_fu_208_p4) + unsigned(ap_const_lv32_1));
    or_ln233_fu_375_p2 <= (xs_V_q1 or trunc_ln233_fu_371_p1);
    or_ln_fu_391_p3 <= (tmp_2_fu_381_p4 & or_ln233_fu_375_p2);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, phi_ln213_reg_192_pp0_iter1_reg, icmp_ln241_reg_530_pp0_iter1_reg, icmp_ln233_reg_526_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (((icmp_ln241_reg_530_pp0_iter1_reg = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1)) or ((icmp_ln233_reg_526_pp0_iter1_reg = ap_const_lv1_1) and (phi_ln213_reg_192_pp0_iter1_reg = ap_const_lv1_1))))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= (grp_last_swap_8_s_fu_288_ap_return_1 & grp_last_swap_8_s_fu_288_ap_return_0);

    out_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_predicate_op93_write_state11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op93_write_state11 = ap_const_boolean_1))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_1_fu_302_p2 <= std_logic_vector(unsigned(p_reg_169) + unsigned(ap_const_lv4_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    ret_fu_432_p0 <= ret_fu_432_p00(8 - 1 downto 0);
    ret_fu_432_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op1_V_1_reg_521),16));
    ret_fu_432_p1 <= zext_ln213_reg_478(8 - 1 downto 0);
    select_ln225_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln225_fu_354_p2),64));
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    swap_2_first_swap_8_s_fu_295_ap_start <= swap_2_first_swap_8_s_fu_295_ap_start_reg;
    tmp_2_fu_381_p4 <= free_slots_1_reg_228(31 downto 8);
    trunc_ln233_fu_371_p1 <= free_slots_1_reg_228(8 - 1 downto 0);
    x_V_0_fu_324_p1 <= in_x_V_V_dout(8 - 1 downto 0);
    xor_ln213_fu_423_p2 <= (ap_const_lv1_1 xor and_ln247_fu_418_p2);
    xor_ln225_fu_354_p2 <= (icmp_ln225_fu_348_p2 xor ap_const_lv1_1);

    xs_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, swap_2_first_swap_8_s_fu_295_output_r_address0, select_ln225_cast_fu_360_p1, ap_block_pp0_stage2, ap_condition_595)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                xs_V_address0 <= select_ln225_cast_fu_360_p1(1 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_595)) then 
                xs_V_address0 <= swap_2_first_swap_8_s_fu_295_output_r_address0;
            else 
                xs_V_address0 <= "X";
            end if;
        else 
            xs_V_address0 <= "X";
        end if; 
    end process;


    xs_V_address1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, swap_2_first_swap_8_s_fu_295_output_r_address1, ap_block_pp0_stage2, ap_condition_595)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                xs_V_address1 <= ap_const_lv64_1(1 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_595)) then 
                xs_V_address1 <= swap_2_first_swap_8_s_fu_295_output_r_address1;
            else 
                xs_V_address1 <= "X";
            end if;
        else 
            xs_V_address1 <= "X";
        end if; 
    end process;


    xs_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, swap_2_first_swap_8_s_fu_295_output_r_ce0, ap_condition_595)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                xs_V_ce0 <= ap_const_logic_1;
            elsif ((ap_const_boolean_1 = ap_condition_595)) then 
                xs_V_ce0 <= swap_2_first_swap_8_s_fu_295_output_r_ce0;
            else 
                xs_V_ce0 <= ap_const_logic_0;
            end if;
        else 
            xs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    xs_V_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, swap_2_first_swap_8_s_fu_295_output_r_ce1, ap_condition_595)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                xs_V_ce1 <= ap_const_logic_1;
            elsif ((ap_const_boolean_1 = ap_condition_595)) then 
                xs_V_ce1 <= swap_2_first_swap_8_s_fu_295_output_r_ce1;
            else 
                xs_V_ce1 <= ap_const_logic_0;
            end if;
        else 
            xs_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    xs_V_we0_assign_proc : process(ap_enable_reg_pp0_iter0, phi_ln213_reg_192, icmp_ln216_reg_483, ap_CS_fsm_pp0_stage1, swap_2_first_swap_8_s_fu_295_output_r_we0, ap_block_pp0_stage1)
    begin
        if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln216_reg_483 = ap_const_lv1_1))) then 
            xs_V_we0 <= swap_2_first_swap_8_s_fu_295_output_r_we0;
        else 
            xs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    xs_V_we1_assign_proc : process(ap_enable_reg_pp0_iter0, phi_ln213_reg_192, icmp_ln216_reg_483, ap_CS_fsm_pp0_stage1, swap_2_first_swap_8_s_fu_295_output_r_we1, ap_block_pp0_stage1)
    begin
        if (((phi_ln213_reg_192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln216_reg_483 = ap_const_lv1_1))) then 
            xs_V_we1 <= swap_2_first_swap_8_s_fu_295_output_r_we1;
        else 
            xs_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    ys_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, icmp_ln225_reg_507, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, grp_last_swap_8_s_fu_288_input_r_address0, ap_predicate_op88_call_state10, ap_predicate_op89_call_state11, ap_block_pp0_stage1, ap_block_pp0_stage3, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln225_reg_507 = ap_const_lv1_1))) then 
            ys_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln225_reg_507 = ap_const_lv1_0)))) then 
            ys_V_address0 <= ap_const_lv64_1(1 - 1 downto 0);
        elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op89_call_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_predicate_op88_call_state10 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            ys_V_address0 <= grp_last_swap_8_s_fu_288_input_r_address0;
        else 
            ys_V_address0 <= "X";
        end if; 
    end process;


    ys_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln225_reg_507, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, grp_last_swap_8_s_fu_288_input_r_ce0, ap_predicate_op88_call_state10, ap_predicate_op89_call_state11, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln225_reg_507 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln225_reg_507 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            ys_V_ce0 <= ap_const_logic_1;
        elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op89_call_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_predicate_op88_call_state10 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            ys_V_ce0 <= grp_last_swap_8_s_fu_288_input_r_ce0;
        else 
            ys_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ys_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, grp_last_swap_8_s_fu_288_input_r_ce1, ap_predicate_op88_call_state10, ap_predicate_op89_call_state11, ap_block_pp0_stage3)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op89_call_state11 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_predicate_op88_call_state10 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            ys_V_ce1 <= grp_last_swap_8_s_fu_288_input_r_ce1;
        else 
            ys_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ys_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, icmp_ln225_reg_507, ret_reg_539, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ys_V_d0 <= ap_const_lv16_0;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln225_reg_507 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln225_reg_507 = ap_const_lv1_0)))) then 
            ys_V_d0 <= ret_reg_539;
        else 
            ys_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ys_V_we0_assign_proc : process(icmp_ln233_reg_526, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln225_reg_507, ap_enable_reg_pp0_iter1)
    begin
        if ((((icmp_ln233_reg_526 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln225_reg_507 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln225_reg_507 = ap_const_lv1_0)))) then 
            ys_V_we0 <= ap_const_logic_1;
        else 
            ys_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln200_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(swap_2_first_swap_8_s_fu_295_ap_return),32));
    zext_ln213_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_w_V_V_dout),16));
end behav;
